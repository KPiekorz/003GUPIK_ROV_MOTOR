
003GUPIK_ROV_MOTOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e950  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  0800eae0  0800eae0  0001eae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee24  0800ee24  00020700  2**0
                  CONTENTS
  4 .ARM          00000000  0800ee24  0800ee24  00020700  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ee24  0800ee24  00020700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee24  0800ee24  0001ee24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee28  0800ee28  0001ee28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000700  20000000  0800ee2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000700  0800f52c  00020700  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c74  0800f52c  00020c74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020700  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002190d  00000000  00000000  00020730  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0003a67b  00000000  00000000  0004203d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005372  00000000  00000000  0007c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001cc8  00000000  00000000  00081a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d3189  00000000  00000000  000836f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a50  00000000  00000000  00156888  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000267e9  00000000  00000000  001582d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f7  00000000  00000000  0017eac1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000792c  00000000  00000000  0017ebb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000700 	.word	0x20000700
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eac8 	.word	0x0800eac8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000704 	.word	0x20000704
 80001cc:	0800eac8 	.word	0x0800eac8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000284:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000286:	e003      	b.n	8000290 <LoopCopyDataInit>

08000288 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800028a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800028c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800028e:	3104      	adds	r1, #4

08000290 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000290:	480b      	ldr	r0, [pc, #44]	; (80002c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000294:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000296:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000298:	d3f6      	bcc.n	8000288 <CopyDataInit>
	ldr	r2, =_sbss
 800029a:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800029c:	e002      	b.n	80002a4 <LoopFillZerobss>

0800029e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800029e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80002a0:	f842 3b04 	str.w	r3, [r2], #4

080002a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80002a4:	4b09      	ldr	r3, [pc, #36]	; (80002cc <LoopForever+0x16>)
	cmp	r2, r3
 80002a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80002a8:	d3f9      	bcc.n	800029e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002aa:	f004 fe79 	bl	8004fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ae:	f00d ffd9 	bl	800e264 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002b2:	f000 f849 	bl	8000348 <main>

080002b6 <LoopForever>:

LoopForever:
    b LoopForever
 80002b6:	e7fe      	b.n	80002b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002b8:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 80002bc:	0800ee2c 	.word	0x0800ee2c
	ldr	r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80002c4:	20000700 	.word	0x20000700
	ldr	r2, =_sbss
 80002c8:	20000700 	.word	0x20000700
	ldr	r3, = _ebss
 80002cc:	20000c74 	.word	0x20000c74

080002d0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC3_IRQHandler>
	...

080002d4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM6){
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a14      	ldr	r2, [pc, #80]	; (8000334 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <HAL_TIM_PeriodElapsedCallback+0x20>

		  speed_from_sensor = MC_GetMecSpeedAverageMotor1();
 80002e6:	f000 fcaf 	bl	8000c48 <MC_GetMecSpeedAverageMotor1>
 80002ea:	4603      	mov	r3, r0
 80002ec:	461a      	mov	r2, r3
 80002ee:	4b12      	ldr	r3, [pc, #72]	; (8000338 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80002f0:	801a      	strh	r2, [r3, #0]
		MC_ProgramSpeedRampMotor1(set_speed, 100);
		MC_StartMotor1();

	}

}
 80002f2:	e01a      	b.n	800032a <HAL_TIM_PeriodElapsedCallback+0x56>
	}else if(htim->Instance == TIM7){
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a10      	ldr	r2, [pc, #64]	; (800033c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d115      	bne.n	800032a <HAL_TIM_PeriodElapsedCallback+0x56>
		fault_flag = MC_GetOccurredFaultsMotor1();
 80002fe:	f000 fcbb 	bl	8000c78 <MC_GetOccurredFaultsMotor1>
 8000302:	4603      	mov	r3, r0
 8000304:	b21a      	sxth	r2, r3
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000308:	801a      	strh	r2, [r3, #0]
		if(fault_flag != 0){
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	b21b      	sxth	r3, r3
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <HAL_TIM_PeriodElapsedCallback+0x44>
			MC_AcknowledgeFaultMotor1();
 8000314:	f000 fca4 	bl	8000c60 <MC_AcknowledgeFaultMotor1>
		MC_ProgramSpeedRampMotor1(set_speed, 100);
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	b21b      	sxth	r3, r3
 800031e:	2164      	movs	r1, #100	; 0x64
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fc7b 	bl	8000c1c <MC_ProgramSpeedRampMotor1>
		MC_StartMotor1();
 8000326:	f000 fc6d 	bl	8000c04 <MC_StartMotor1>
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40001000 	.word	0x40001000
 8000338:	20000a56 	.word	0x20000a56
 800033c:	40001400 	.word	0x40001400
 8000340:	2000078a 	.word	0x2000078a
 8000344:	20000a54 	.word	0x20000a54

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034c:	f004 fe3e 	bl	8004fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000350:	f000 f860 	bl	8000414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000354:	f000 fc1e 	bl	8000b94 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000358:	f000 f8de 	bl	8000518 <MX_ADC1_Init>
  MX_ADC3_Init();
 800035c:	f000 f998 	bl	8000690 <MX_ADC3_Init>
  MX_COMP2_Init();
 8000360:	f000 fa08 	bl	8000774 <MX_COMP2_Init>
  MX_COMP4_Init();
 8000364:	f000 fa36 	bl	80007d4 <MX_COMP4_Init>
  MX_COMP6_Init();
 8000368:	f000 fa64 	bl	8000834 <MX_COMP6_Init>
  MX_TIM1_Init();
 800036c:	f000 fa92 	bl	8000894 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000370:	f000 fb70 	bl	8000a54 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000374:	f000 fba6 	bl	8000ac4 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8000378:	f000 fbdc 	bl	8000b34 <MX_USART1_UART_Init>
  MX_MotorControl_Init();
 800037c:	f002 fd36 	bl	8002dec <MX_MotorControl_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000380:	f000 f8a6 	bl	80004d0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  fault_flag = motor_ok;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <main+0xac>)
 8000386:	2200      	movs	r2, #0
 8000388:	801a      	strh	r2, [r3, #0]

  set_speed = 200;
 800038a:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <main+0xb0>)
 800038c:	22c8      	movs	r2, #200	; 0xc8
 800038e:	801a      	strh	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim6);
 8000390:	481a      	ldr	r0, [pc, #104]	; (80003fc <main+0xb4>)
 8000392:	f007 fe7b 	bl	800808c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000396:	481a      	ldr	r0, [pc, #104]	; (8000400 <main+0xb8>)
 8000398:	f007 fe78 	bl	800808c <HAL_TIM_Base_Start_IT>


  HAL_Delay(10000);
 800039c:	f242 7010 	movw	r0, #10000	; 0x2710
 80003a0:	f004 fe7a 	bl	8005098 <HAL_Delay>

  set_speed = -200;
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <main+0xb0>)
 80003a6:	f64f 7238 	movw	r2, #65336	; 0xff38
 80003aa:	801a      	strh	r2, [r3, #0]

  HAL_Delay(10000);
 80003ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80003b0:	f004 fe72 	bl	8005098 <HAL_Delay>

  set_speed = 500;
 80003b4:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <main+0xb0>)
 80003b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003ba:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  sprintf(uart1_msg, "Motor speed: %d %d\r\n", speed_from_sensor, fault_flag);
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <main+0xbc>)
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	b21b      	sxth	r3, r3
 80003c2:	461a      	mov	r2, r3
 80003c4:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <main+0xac>)
 80003c6:	881b      	ldrh	r3, [r3, #0]
 80003c8:	b21b      	sxth	r3, r3
 80003ca:	490f      	ldr	r1, [pc, #60]	; (8000408 <main+0xc0>)
 80003cc:	480f      	ldr	r0, [pc, #60]	; (800040c <main+0xc4>)
 80003ce:	f00d ff75 	bl	800e2bc <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) uart1_msg, strlen(uart1_msg), HAL_MAX_DELAY);
 80003d2:	480e      	ldr	r0, [pc, #56]	; (800040c <main+0xc4>)
 80003d4:	f7ff fefc 	bl	80001d0 <strlen>
 80003d8:	4603      	mov	r3, r0
 80003da:	b29a      	uxth	r2, r3
 80003dc:	f04f 33ff 	mov.w	r3, #4294967295
 80003e0:	490a      	ldr	r1, [pc, #40]	; (800040c <main+0xc4>)
 80003e2:	480b      	ldr	r0, [pc, #44]	; (8000410 <main+0xc8>)
 80003e4:	f008 ff2a 	bl	800923c <HAL_UART_Transmit>

	  HAL_Delay(1000);
 80003e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ec:	f004 fe54 	bl	8005098 <HAL_Delay>
	  sprintf(uart1_msg, "Motor speed: %d %d\r\n", speed_from_sensor, fault_flag);
 80003f0:	e7e4      	b.n	80003bc <main+0x74>
 80003f2:	bf00      	nop
 80003f4:	2000078a 	.word	0x2000078a
 80003f8:	20000a54 	.word	0x20000a54
 80003fc:	200009a4 	.word	0x200009a4
 8000400:	20000a58 	.word	0x20000a58
 8000404:	20000a56 	.word	0x20000a56
 8000408:	0800eae0 	.word	0x0800eae0
 800040c:	200008dc 	.word	0x200008dc
 8000410:	2000085c 	.word	0x2000085c

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b09e      	sub	sp, #120	; 0x78
 8000418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800041e:	2228      	movs	r2, #40	; 0x28
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f00d ff42 	bl	800e2ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000428:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000438:	463b      	mov	r3, r7
 800043a:	223c      	movs	r2, #60	; 0x3c
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f00d ff34 	bl	800e2ac <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000444:	2301      	movs	r3, #1
 8000446:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000448:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000452:	2301      	movs	r3, #1
 8000454:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000456:	2302      	movs	r3, #2
 8000458:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800045a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800045e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000460:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000464:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000466:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800046a:	4618      	mov	r0, r3
 800046c:	f006 faf4 	bl	8006a58 <HAL_RCC_OscConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000476:	f000 fbbd 	bl	8000bf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047a:	230f      	movs	r3, #15
 800047c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047e:	2302      	movs	r3, #2
 8000480:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000490:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000494:	2102      	movs	r1, #2
 8000496:	4618      	mov	r0, r3
 8000498:	f007 f9e6 	bl	8007868 <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004a2:	f000 fba7 	bl	8000bf4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 80004a6:	f241 0301 	movw	r3, #4097	; 0x1001
 80004aa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80004b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b6:	463b      	mov	r3, r7
 80004b8:	4618      	mov	r0, r3
 80004ba:	f007 fc0b 	bl	8007cd4 <HAL_RCCEx_PeriphCLKConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004c4:	f000 fb96 	bl	8000bf4 <Error_Handler>
  }
}
 80004c8:	bf00      	nop
 80004ca:	3778      	adds	r7, #120	; 0x78
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* TIM1_BRK_TIM15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2104      	movs	r1, #4
 80004d8:	2018      	movs	r0, #24
 80004da:	f006 f900 	bl	80066de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80004de:	2018      	movs	r0, #24
 80004e0:	f006 f919 	bl	8006716 <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2100      	movs	r1, #0
 80004e8:	2019      	movs	r0, #25
 80004ea:	f006 f8f8 	bl	80066de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80004ee:	2019      	movs	r0, #25
 80004f0:	f006 f911 	bl	8006716 <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2102      	movs	r1, #2
 80004f8:	2012      	movs	r0, #18
 80004fa:	f006 f8f0 	bl	80066de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80004fe:	2012      	movs	r0, #18
 8000500:	f006 f909 	bl	8006716 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 1);
 8000504:	2201      	movs	r2, #1
 8000506:	2103      	movs	r1, #3
 8000508:	2025      	movs	r0, #37	; 0x25
 800050a:	f006 f8e8 	bl	80066de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800050e:	2025      	movs	r0, #37	; 0x25
 8000510:	f006 f901 	bl	8006716 <HAL_NVIC_EnableIRQ>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800051e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2228      	movs	r2, #40	; 0x28
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f00d feba 	bl	800e2ac <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]
 8000546:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000548:	4b50      	ldr	r3, [pc, #320]	; (800068c <MX_ADC1_Init+0x174>)
 800054a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800054e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000550:	4b4e      	ldr	r3, [pc, #312]	; (800068c <MX_ADC1_Init+0x174>)
 8000552:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000556:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000558:	4b4c      	ldr	r3, [pc, #304]	; (800068c <MX_ADC1_Init+0x174>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800055e:	4b4b      	ldr	r3, [pc, #300]	; (800068c <MX_ADC1_Init+0x174>)
 8000560:	2201      	movs	r2, #1
 8000562:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000564:	4b49      	ldr	r3, [pc, #292]	; (800068c <MX_ADC1_Init+0x174>)
 8000566:	2200      	movs	r2, #0
 8000568:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800056a:	4b48      	ldr	r3, [pc, #288]	; (800068c <MX_ADC1_Init+0x174>)
 800056c:	2200      	movs	r2, #0
 800056e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000572:	4b46      	ldr	r3, [pc, #280]	; (800068c <MX_ADC1_Init+0x174>)
 8000574:	2200      	movs	r2, #0
 8000576:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000578:	4b44      	ldr	r3, [pc, #272]	; (800068c <MX_ADC1_Init+0x174>)
 800057a:	2201      	movs	r2, #1
 800057c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800057e:	4b43      	ldr	r3, [pc, #268]	; (800068c <MX_ADC1_Init+0x174>)
 8000580:	2220      	movs	r2, #32
 8000582:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000584:	4b41      	ldr	r3, [pc, #260]	; (800068c <MX_ADC1_Init+0x174>)
 8000586:	2201      	movs	r2, #1
 8000588:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800058a:	4b40      	ldr	r3, [pc, #256]	; (800068c <MX_ADC1_Init+0x174>)
 800058c:	2200      	movs	r2, #0
 800058e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000592:	4b3e      	ldr	r3, [pc, #248]	; (800068c <MX_ADC1_Init+0x174>)
 8000594:	2204      	movs	r2, #4
 8000596:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000598:	4b3c      	ldr	r3, [pc, #240]	; (800068c <MX_ADC1_Init+0x174>)
 800059a:	2200      	movs	r2, #0
 800059c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800059e:	4b3b      	ldr	r3, [pc, #236]	; (800068c <MX_ADC1_Init+0x174>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a4:	4839      	ldr	r0, [pc, #228]	; (800068c <MX_ADC1_Init+0x174>)
 80005a6:	f004 fd99 	bl	80050dc <HAL_ADC_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80005b0:	f000 fb20 	bl	8000bf4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4619      	mov	r1, r3
 80005be:	4833      	ldr	r0, [pc, #204]	; (800068c <MX_ADC1_Init+0x174>)
 80005c0:	f005 fde0 	bl	8006184 <HAL_ADCEx_MultiModeConfigChannel>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005ca:	f000 fb13 	bl	8000bf4 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80005d6:	2300      	movs	r3, #0
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 3;
 80005da:	2303      	movs	r3, #3
 80005dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80005de:	2303      	movs	r3, #3
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80005e2:	2340      	movs	r3, #64	; 0x40
 80005e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 80005e6:	2300      	movs	r3, #0
 80005e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigInjected.AutoInjectedConv = DISABLE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sConfigInjected.QueueInjectedContext = ENABLE;
 80005f6:	2301      	movs	r3, #1
 80005f8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  sConfigInjected.InjectedOffset = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000600:	2300      	movs	r3, #0
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4619      	mov	r1, r3
 800060a:	4820      	ldr	r0, [pc, #128]	; (800068c <MX_ADC1_Init+0x174>)
 800060c:	f005 fa32 	bl	8005a74 <HAL_ADCEx_InjectedConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000616:	f000 faed 	bl	8000bf4 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800061a:	2302      	movs	r3, #2
 800061c:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800061e:	2302      	movs	r3, #2
 8000620:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	4818      	ldr	r0, [pc, #96]	; (800068c <MX_ADC1_Init+0x174>)
 800062a:	f005 fa23 	bl	8005a74 <HAL_ADCEx_InjectedConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000634:	f000 fade 	bl	8000bf4 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000638:	2303      	movs	r3, #3
 800063a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800063c:	2303      	movs	r3, #3
 800063e:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4619      	mov	r1, r3
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <MX_ADC1_Init+0x174>)
 8000648:	f005 fa14 	bl	8005a74 <HAL_ADCEx_InjectedConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000652:	f000 facf 	bl	8000bf4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000656:	2304      	movs	r3, #4
 8000658:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065a:	2301      	movs	r3, #1
 800065c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000662:	2304      	movs	r3, #4
 8000664:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <MX_ADC1_Init+0x174>)
 8000674:	f004 ff12 	bl	800549c <HAL_ADC_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 800067e:	f000 fab9 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200007bc 	.word	0x200007bc

08000690 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
 80006b0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <MX_ADC3_Init+0xdc>)
 80006b4:	4a2e      	ldr	r2, [pc, #184]	; (8000770 <MX_ADC3_Init+0xe0>)
 80006b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <MX_ADC3_Init+0xdc>)
 80006ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006c0:	4b2a      	ldr	r3, [pc, #168]	; (800076c <MX_ADC3_Init+0xdc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c6:	4b29      	ldr	r3, [pc, #164]	; (800076c <MX_ADC3_Init+0xdc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006cc:	4b27      	ldr	r3, [pc, #156]	; (800076c <MX_ADC3_Init+0xdc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006d2:	4b26      	ldr	r3, [pc, #152]	; (800076c <MX_ADC3_Init+0xdc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b24      	ldr	r3, [pc, #144]	; (800076c <MX_ADC3_Init+0xdc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <MX_ADC3_Init+0xdc>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_ADC3_Init+0xdc>)
 80006e8:	2220      	movs	r2, #32
 80006ea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ADC3_Init+0xdc>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_ADC3_Init+0xdc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ADC3_Init+0xdc>)
 80006fc:	2204      	movs	r2, #4
 80006fe:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_ADC3_Init+0xdc>)
 8000702:	2200      	movs	r2, #0
 8000704:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_ADC3_Init+0xdc>)
 8000708:	2201      	movs	r2, #1
 800070a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800070c:	4817      	ldr	r0, [pc, #92]	; (800076c <MX_ADC3_Init+0xdc>)
 800070e:	f004 fce5 	bl	80050dc <HAL_ADC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8000718:	f000 fa6c 	bl	8000bf4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <MX_ADC3_Init+0xdc>)
 8000728:	f005 fd2c 	bl	8006184 <HAL_ADCEx_MultiModeConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 8000732:	f000 fa5f 	bl	8000bf4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000736:	2305      	movs	r3, #5
 8000738:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073a:	2301      	movs	r3, #1
 800073c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000742:	2304      	movs	r3, #4
 8000744:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_ADC3_Init+0xdc>)
 8000754:	f004 fea2 	bl	800549c <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 800075e:	f000 fa49 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	; 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000080c 	.word	0x2000080c
 8000770:	50000400 	.word	0x50000400

08000774 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_COMP2_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_COMP2_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_COMP2_Init+0x58>)
 8000780:	2210      	movs	r2, #16
 8000782:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_COMP2_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_COMP2_Init+0x58>)
 800078c:	f640 027f 	movw	r2, #2175	; 0x87f
 8000790:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_COMP2_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_COMP2_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_COMP2_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_COMP2_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_COMP2_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_COMP2_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_COMP2_Init+0x58>)
 80007b8:	f005 fe36 	bl	8006428 <HAL_COMP_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 fa17 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000a24 	.word	0x20000a24
 80007d0:	40010020 	.word	0x40010020

080007d4 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_COMP4_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	; (8000830 <MX_COMP4_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_COMP4_Init+0x58>)
 80007e0:	2210      	movs	r2, #16
 80007e2:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_COMP4_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_COMP4_Init+0x58>)
 80007ec:	f640 027f 	movw	r2, #2175	; 0x87f
 80007f0:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_COMP4_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_COMP4_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_COMP4_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_COMP4_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_COMP4_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_COMP4_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_COMP4_Init+0x58>)
 8000818:	f005 fe06 	bl	8006428 <HAL_COMP_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_COMP4_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 f9e7 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000078c 	.word	0x2000078c
 8000830:	40010028 	.word	0x40010028

08000834 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_COMP6_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MX_COMP6_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_COMP6_Init+0x58>)
 8000840:	2210      	movs	r2, #16
 8000842:	605a      	str	r2, [r3, #4]
  hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_COMP6_Init+0x58>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	609a      	str	r2, [r3, #8]
  hcomp6.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_COMP6_Init+0x58>)
 800084c:	f640 027f 	movw	r2, #2175	; 0x87f
 8000850:	60da      	str	r2, [r3, #12]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_COMP6_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_COMP6_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_COMP6_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  hcomp6.Init.Mode = COMP_MODE_HIGHSPEED;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_COMP6_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  hcomp6.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_COMP6_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_COMP6_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_COMP6_Init+0x58>)
 8000878:	f005 fdd6 	bl	8006428 <HAL_COMP_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_COMP6_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f9b7 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000758 	.word	0x20000758
 8000890:	40010030 	.word	0x40010030

08000894 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b09a      	sub	sp, #104	; 0x68
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800089a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
 80008c6:	615a      	str	r2, [r3, #20]
 80008c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ca:	463b      	mov	r3, r7
 80008cc:	222c      	movs	r2, #44	; 0x2c
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f00d fceb 	bl	800e2ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008d6:	4b5d      	ldr	r3, [pc, #372]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 80008d8:	4a5d      	ldr	r2, [pc, #372]	; (8000a50 <MX_TIM1_Init+0x1bc>)
 80008da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80008dc:	4b5b      	ldr	r3, [pc, #364]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80008e2:	4b5a      	ldr	r3, [pc, #360]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 80008e4:	2220      	movs	r2, #32
 80008e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80008e8:	4b58      	ldr	r3, [pc, #352]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 80008ea:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80008ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80008f0:	4b56      	ldr	r3, [pc, #344]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 80008f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80008f8:	4b54      	ldr	r3, [pc, #336]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 80008fa:	2203      	movs	r2, #3
 80008fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fe:	4b53      	ldr	r3, [pc, #332]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000904:	4851      	ldr	r0, [pc, #324]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 8000906:	f007 fb95 	bl	8008034 <HAL_TIM_Base_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000910:	f000 f970 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000914:	484d      	ldr	r0, [pc, #308]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 8000916:	f007 fbe3 	bl	80080e0 <HAL_TIM_PWM_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000920:	f000 f968 	bl	8000bf4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000924:	2306      	movs	r3, #6
 8000926:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000928:	2310      	movs	r3, #16
 800092a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800092c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000930:	4619      	mov	r1, r3
 8000932:	4846      	ldr	r0, [pc, #280]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 8000934:	f007 fe40 	bl	80085b8 <HAL_TIM_SlaveConfigSynchro>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800093e:	f000 f959 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000942:	2370      	movs	r3, #112	; 0x70
 8000944:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800094e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000952:	4619      	mov	r1, r3
 8000954:	483d      	ldr	r0, [pc, #244]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 8000956:	f008 fb07 	bl	8008f68 <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000960:	f000 f948 	bl	8000bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000964:	2360      	movs	r3, #96	; 0x60
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096c:	2300      	movs	r3, #0
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000970:	2308      	movs	r3, #8
 8000972:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000978:	2300      	movs	r3, #0
 800097a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800097c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000980:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000986:	2200      	movs	r2, #0
 8000988:	4619      	mov	r1, r3
 800098a:	4830      	ldr	r0, [pc, #192]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 800098c:	f007 fcfc 	bl	8008388 <HAL_TIM_PWM_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000996:	f000 f92d 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800099a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099e:	2204      	movs	r2, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	482a      	ldr	r0, [pc, #168]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 80009a4:	f007 fcf0 	bl	8008388 <HAL_TIM_PWM_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80009ae:	f000 f921 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b6:	2208      	movs	r2, #8
 80009b8:	4619      	mov	r1, r3
 80009ba:	4824      	ldr	r0, [pc, #144]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 80009bc:	f007 fce4 	bl	8008388 <HAL_TIM_PWM_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80009c6:	f000 f915 	bl	8000bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009ca:	2370      	movs	r3, #112	; 0x70
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80009ce:	f640 135f 	movw	r3, #2399	; 0x95f
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009dc:	220c      	movs	r2, #12
 80009de:	4619      	mov	r1, r3
 80009e0:	481a      	ldr	r0, [pc, #104]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 80009e2:	f007 fcd1 	bl	8008388 <HAL_TIM_PWM_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80009ec:	f000 f902 	bl	8000bf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80009f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009f4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80009f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 80009fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000a02:	2339      	movs	r3, #57	; 0x39
 8000a04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a18:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000a20:	2303      	movs	r3, #3
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 8000a2e:	f008 fb1b 	bl	8009068 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 8000a38:	f000 f8dc 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a3c:	4803      	ldr	r0, [pc, #12]	; (8000a4c <MX_TIM1_Init+0x1b8>)
 8000a3e:	f002 ffbf 	bl	80039c0 <HAL_TIM_MspPostInit>

}
 8000a42:	bf00      	nop
 8000a44:	3768      	adds	r7, #104	; 0x68
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200009e4 	.word	0x200009e4
 8000a50:	40012c00 	.word	0x40012c00

08000a54 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_TIM6_Init+0x68>)
 8000a66:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <MX_TIM6_Init+0x6c>)
 8000a68:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_TIM6_Init+0x68>)
 8000a6c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000a70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_TIM6_Init+0x68>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_TIM6_Init+0x68>)
 8000a7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_TIM6_Init+0x68>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_TIM6_Init+0x68>)
 8000a88:	f007 fad4 	bl	8008034 <HAL_TIM_Base_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000a92:	f000 f8af 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_TIM6_Init+0x68>)
 8000aa4:	f008 fa60 	bl	8008f68 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000aae:	f000 f8a1 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200009a4 	.word	0x200009a4
 8000ac0:	40001000 	.word	0x40001000

08000ac4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_TIM7_Init+0x68>)
 8000ad6:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <MX_TIM7_Init+0x6c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_TIM7_Init+0x68>)
 8000adc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000ae0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_TIM7_Init+0x68>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_TIM7_Init+0x68>)
 8000aea:	f242 720f 	movw	r2, #9999	; 0x270f
 8000aee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_TIM7_Init+0x68>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_TIM7_Init+0x68>)
 8000af8:	f007 fa9c 	bl	8008034 <HAL_TIM_Base_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000b02:	f000 f877 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <MX_TIM7_Init+0x68>)
 8000b14:	f008 fa28 	bl	8008f68 <HAL_TIMEx_MasterConfigSynchronization>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000b1e:	f000 f869 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000a58 	.word	0x20000a58
 8000b30:	40001400 	.word	0x40001400

08000b34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b3a:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <MX_USART1_UART_Init+0x5c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b78:	f008 fb12 	bl	80091a0 <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b82:	f000 f837 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000085c 	.word	0x2000085c
 8000b90:	40013800 	.word	0x40013800

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_GPIO_Init+0x5c>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <MX_GPIO_Init+0x5c>)
 8000ba0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ba4:	6153      	str	r3, [r2, #20]
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_GPIO_Init+0x5c>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_GPIO_Init+0x5c>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <MX_GPIO_Init+0x5c>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_GPIO_Init+0x5c>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_GPIO_Init+0x5c>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <MX_GPIO_Init+0x5c>)
 8000bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd4:	6153      	str	r3, [r2, #20]
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_GPIO_Init+0x5c>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <MC_StartMotor1>:
  * check if it has reached the #RUN state. See MC_GetSTMStateMotor1() for more details.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	return MCI_StartMotor( pMCI[M1] );
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <MC_StartMotor1+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 f8ba 	bl	8000d86 <MCI_StartMotor>
 8000c12:	4603      	mov	r3, r0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000b78 	.word	0x20000b78

08000c1c <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	460a      	mov	r2, r1
 8000c26:	80fb      	strh	r3, [r7, #6]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	80bb      	strh	r3, [r7, #4]
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <MC_ProgramSpeedRampMotor1+0x28>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	88ba      	ldrh	r2, [r7, #4]
 8000c32:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f84f 	bl	8000cda <MCI_ExecSpeedRamp>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000b78 	.word	0x20000b78

08000c48 <MC_GetMecSpeedAverageMotor1>:

/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <MC_GetMecSpeedAverageMotor1+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 f9c0 	bl	8000fd6 <MCI_GetAvrgMecSpeedUnit>
 8000c56:	4603      	mov	r3, r0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000b78 	.word	0x20000b78

08000c60 <MC_AcknowledgeFaultMotor1>:
 * the error condition that occured into account. If no error condition exists when
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned. 
 */
__weak bool MC_AcknowledgeFaultMotor1( void )
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return MCI_FaultAcknowledged( pMCI[M1] );
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <MC_AcknowledgeFaultMotor1+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f8b2 	bl	8000dd2 <MCI_FaultAcknowledged>
 8000c6e:	4603      	mov	r3, r0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000b78 	.word	0x20000b78

08000c78 <MC_GetOccurredFaultsMotor1>:
 *
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of 
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	return MCI_GetOccurredFaults( pMCI[M1] );
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <MC_GetOccurredFaultsMotor1+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f934 	bl	8000eee <MCI_GetOccurredFaults>
 8000c86:	4603      	mov	r3, r0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000b78 	.word	0x20000b78

08000c90 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	603b      	str	r3, [r7, #0]
  pHandle->pSTM = pSTM;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	68ba      	ldr	r2, [r7, #8]
 8000ca2:	601a      	str	r2, [r3, #0]
  pHandle->pSTC = pSTC;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	605a      	str	r2, [r3, #4]
  pHandle->pFOCVars = pFOCVars;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	609a      	str	r2, [r3, #8]

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalSpeed = 0;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	81da      	strh	r2, [r3, #14]
  pHandle->hFinalTorque = 0;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	821a      	strh	r2, [r3, #16]
  pHandle->hDurationms = 0;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	761a      	strb	r2, [r3, #24]
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	807b      	strh	r3, [r7, #2]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	803b      	strh	r3, [r7, #0]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2201      	movs	r2, #1
 8000cee:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	887a      	ldrh	r2, [r7, #2]
 8000cf4:	81da      	strh	r2, [r3, #14]
  pHandle->hDurationms = hDurationms;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	883a      	ldrh	r2, [r7, #0]
 8000cfa:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2201      	movs	r2, #1
 8000d06:	765a      	strb	r2, [r3, #25]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
 8000d20:	4613      	mov	r3, r2
 8000d22:	803b      	strh	r3, [r7, #0]
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2202      	movs	r2, #2
 8000d28:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	887a      	ldrh	r2, [r7, #2]
 8000d2e:	821a      	strh	r2, [r3, #16]
  pHandle->hDurationms = hDurationms;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	883a      	ldrh	r2, [r7, #0]
 8000d34:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	765a      	strb	r2, [r3, #25]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	731a      	strb	r2, [r3, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8000d5e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	825a      	strh	r2, [r3, #18]
  pHandle->Iqdref.d = Iqdref.d;
 8000d66:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	829a      	strh	r2, [r3, #20]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	765a      	strb	r2, [r3, #25]
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2103      	movs	r1, #3
 8000d94:	4618      	mov	r0, r3
 8000d96:	f00c f851 	bl	800ce3c <STM_NextState>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	73fb      	strb	r3, [r7, #15]

  if ( RetVal == true )
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <MCI_StartMotor+0x24>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2201      	movs	r2, #1
 8000da8:	761a      	strb	r2, [r3, #24]
  }

  return RetVal;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <MCI_StopMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2107      	movs	r1, #7
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f00c f83a 	bl	800ce3c <STM_NextState>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <MCI_FaultAcknowledged>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f00c f9d8 	bl	800d194 <STM_FaultAcknowledged>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <MCI_EncoderAlign>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f00c f81d 	bl	800ce3c <STM_NextState>
 8000e02:	4603      	mov	r3, r0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ( pHandle != MC_NULL )
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d057      	beq.n	8000eca <MCI_ExecBufferedCommands+0xbe>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7e1b      	ldrb	r3, [r3, #24]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d153      	bne.n	8000eca <MCI_ExecBufferedCommands+0xbe>
    {
      bool commandHasBeenExecuted = false;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]
      switch ( pHandle->lastCommand )
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7b1b      	ldrb	r3, [r3, #12]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d01c      	beq.n	8000e68 <MCI_ExecBufferedCommands+0x5c>
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d032      	beq.n	8000e98 <MCI_ExecBufferedCommands+0x8c>
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d000      	beq.n	8000e38 <MCI_ExecBufferedCommands+0x2c>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
          commandHasBeenExecuted = true;
        }
        break;
        default:
          break;
 8000e36:	e03e      	b.n	8000eb6 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2101      	movs	r1, #1
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f00b fe6b 	bl	800cb24 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6858      	ldr	r0, [r3, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	8adb      	ldrh	r3, [r3, #22]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	f00b fe73 	bl	800cb48 <STC_ExecRamp>
 8000e62:	4603      	mov	r3, r0
 8000e64:	73fb      	strb	r3, [r7, #15]
        break;
 8000e66:	e026      	b.n	8000eb6 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f00b fe53 	bl	800cb24 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6858      	ldr	r0, [r3, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	8adb      	ldrh	r3, [r3, #22]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	f00b fe5b 	bl	800cb48 <STC_ExecRamp>
 8000e92:	4603      	mov	r3, r0
 8000e94:	73fb      	strb	r3, [r7, #15]
        break;
 8000e96:	e00e      	b.n	8000eb6 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	3310      	adds	r3, #16
 8000eaa:	3212      	adds	r2, #18
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	601a      	str	r2, [r3, #0]
          commandHasBeenExecuted = true;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
        break;
 8000eb4:	bf00      	nop
      }

      if ( commandHasBeenExecuted )
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <MCI_ExecBufferedCommands+0xb8>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	761a      	strb	r2, [r3, #24]
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000ec2:	e002      	b.n	8000eca <MCI_ExecBufferedCommands+0xbe>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	761a      	strb	r2, [r3, #24]
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <MCI_GetSTMState>:
  * @brief  It returns information about the state of the related pSTM object.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  return STM_GetState( pHandle->pSTM );
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f00c f94c 	bl	800d17c <STM_GetState>
 8000ee4:	4603      	mov	r3, r0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults( MCI_Handle_t * pHandle )
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) );
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f00c f963 	bl	800d1c6 <STM_GetFaultState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	b29b      	uxth	r3, r3
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <MCI_GetControlMode>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval STC_Modality_t It returns the modality of STC. It can be one of
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  return pHandle->LastModalitySetByUser;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7e5b      	ldrb	r3, [r3, #25]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <MCI_GetImposedMotorDirection>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t It returns 1 or -1 according the sign of hFinalSpeed,
  *         hFinalTorque or Iqdref.q of the last command.
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  int16_t retVal = 1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	81fb      	strh	r3, [r7, #14]

  switch ( pHandle->lastCommand )
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7b1b      	ldrb	r3, [r3, #12]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d00d      	beq.n	8000f54 <MCI_GetImposedMotorDirection+0x30>
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d014      	beq.n	8000f66 <MCI_GetImposedMotorDirection+0x42>
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d000      	beq.n	8000f42 <MCI_GetImposedMotorDirection+0x1e>
      {
        retVal = -1;
      }
      break;
    default:
      break;
 8000f40:	e01f      	b.n	8000f82 <MCI_GetImposedMotorDirection+0x5e>
      if ( pHandle->hFinalSpeed < 0 )
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da15      	bge.n	8000f78 <MCI_GetImposedMotorDirection+0x54>
        retVal = -1;
 8000f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f50:	81fb      	strh	r3, [r7, #14]
      break;
 8000f52:	e011      	b.n	8000f78 <MCI_GetImposedMotorDirection+0x54>
      if ( pHandle->hFinalTorque < 0 )
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	da0e      	bge.n	8000f7c <MCI_GetImposedMotorDirection+0x58>
        retVal = -1;
 8000f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f62:	81fb      	strh	r3, [r7, #14]
      break;
 8000f64:	e00a      	b.n	8000f7c <MCI_GetImposedMotorDirection+0x58>
      if ( pHandle->Iqdref.q < 0 )
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	da07      	bge.n	8000f80 <MCI_GetImposedMotorDirection+0x5c>
        retVal = -1;
 8000f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f74:	81fb      	strh	r3, [r7, #14]
      break;
 8000f76:	e003      	b.n	8000f80 <MCI_GetImposedMotorDirection+0x5c>
      break;
 8000f78:	bf00      	nop
 8000f7a:	e002      	b.n	8000f82 <MCI_GetImposedMotorDirection+0x5e>
      break;
 8000f7c:	bf00      	nop
 8000f7e:	e000      	b.n	8000f82 <MCI_GetImposedMotorDirection+0x5e>
      break;
 8000f80:	bf00      	nop
  }
  return retVal;
 8000f82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <MCI_GetLastRampFinalSpeed>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t last ramp final speed sent by the user expressed in tehts
  *         of HZ.
  */
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
 8000f92:	b480      	push	{r7}
 8000f94:	b085      	sub	sp, #20
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  int16_t hRetVal = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	81fb      	strh	r3, [r7, #14]

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7b1b      	ldrb	r3, [r3, #12]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d102      	bne.n	8000fac <MCI_GetLastRampFinalSpeed+0x1a>
  {
    hRetVal = pHandle->hFinalSpeed;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	89db      	ldrh	r3, [r3, #14]
 8000faa:	81fb      	strh	r3, [r7, #14]
  }
  return hRetVal;
 8000fac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
   STC_StopRamp( pHandle->pSTC );
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f00b fe59 	bl	800cc80 <STC_StopRamp>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00b fd5a 	bl	800ca9c <STC_GetSpeedSensor>
 8000fe8:	60f8      	str	r0, [r7, #12]

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f00b fc7a 	bl	800c8e4 <SPD_GetAvrgMecSpeedUnit>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <MCI_GetMecSpeedRefUnit>:
  *         
  * @param  pHandle Pointer on the component instance to work on.
  *         
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4618      	mov	r0, r3
 8001008:	f00b fd66 	bl	800cad8 <STC_GetMecSpeedRefUnit>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
 8001016:	b480      	push	{r7}
 8001018:	b085      	sub	sp, #20
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iab );
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	6810      	ldr	r0, [r2, #0]
 8001028:	6018      	str	r0, [r3, #0]
 800102a:	2300      	movs	r3, #0
 800102c:	89ba      	ldrh	r2, [r7, #12]
 800102e:	f362 030f 	bfi	r3, r2, #0, #16
 8001032:	89fa      	ldrh	r2, [r7, #14]
 8001034:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Ialphabeta );
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	3204      	adds	r2, #4
 8001056:	6810      	ldr	r0, [r2, #0]
 8001058:	6018      	str	r0, [r3, #0]
 800105a:	2300      	movs	r3, #0
 800105c:	89ba      	ldrh	r2, [r7, #12]
 800105e:	f362 030f 	bfi	r3, r2, #0, #16
 8001062:	89fa      	ldrh	r2, [r7, #14]
 8001064:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iqd );
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	320c      	adds	r2, #12
 8001086:	6810      	ldr	r0, [r2, #0]
 8001088:	6018      	str	r0, [r3, #0]
 800108a:	2300      	movs	r3, #0
 800108c:	89ba      	ldrh	r2, [r7, #12]
 800108e:	f362 030f 	bfi	r3, r2, #0, #16
 8001092:	89fa      	ldrh	r2, [r7, #14]
 8001094:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iqdref );
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	3210      	adds	r2, #16
 80010b6:	6810      	ldr	r0, [r2, #0]
 80010b8:	6018      	str	r0, [r3, #0]
 80010ba:	2300      	movs	r3, #0
 80010bc:	89ba      	ldrh	r2, [r7, #12]
 80010be:	f362 030f 	bfi	r3, r2, #0, #16
 80010c2:	89fa      	ldrh	r2, [r7, #14]
 80010c4:	f362 431f 	bfi	r3, r2, #16, #16
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Vqd );
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	3216      	adds	r2, #22
 80010e6:	6810      	ldr	r0, [r2, #0]
 80010e8:	6018      	str	r0, [r3, #0]
 80010ea:	2300      	movs	r3, #0
 80010ec:	89ba      	ldrh	r2, [r7, #12]
 80010ee:	f362 030f 	bfi	r3, r2, #0, #16
 80010f2:	89fa      	ldrh	r2, [r7, #14]
 80010f4:	f362 431f 	bfi	r3, r2, #16, #16
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Valphabeta );
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	321a      	adds	r2, #26
 8001116:	6810      	ldr	r0, [r2, #0]
 8001118:	6018      	str	r0, [r3, #0]
 800111a:	2300      	movs	r3, #0
 800111c:	89ba      	ldrh	r2, [r7, #12]
 800111e:	f362 030f 	bfi	r3, r2, #0, #16
 8001122:	89fa      	ldrh	r2, [r7, #14]
 8001124:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <MCI_GetTeref>:
  *         Iqref and Idref computation
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->hTeref );
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <MCI_SetIdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	887a      	ldrh	r2, [r7, #2]
 8001162:	825a      	strh	r2, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	887a      	ldrh	r2, [r7, #2]
 800116a:	829a      	strh	r2, [r3, #20]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689c      	ldr	r4, [r3, #8]
 8001188:	4610      	mov	r0, r2
 800118a:	f00b fe17 	bl	800cdbc <STC_GetDefaultIqdref>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	8222      	strh	r2, [r4, #16]
 8001194:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8001198:	8263      	strh	r3, [r4, #18]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd90      	pop	{r4, r7, pc}

080011a2 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 80011a2:	b480      	push	{r7}
 80011a4:	b089      	sub	sp, #36	; 0x24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  int32_t a_divSQRT3_tmp, b_divSQRT3_tmp ;
  int32_t wbeta_tmp;
  int16_t hbeta_tmp;

  /* qIalpha = qIas*/
  Output.alpha = Input.a;
 80011aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011ae:	813b      	strh	r3, [r7, #8]

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 80011b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011b4:	461a      	mov	r2, r3
 80011b6:	f644 13e6 	movw	r3, #18918	; 0x49e6
 80011ba:	fb03 f302 	mul.w	r3, r3, r2
 80011be:	61bb      	str	r3, [r7, #24]

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 80011c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c4:	461a      	mov	r2, r3
 80011c6:	f644 13e6 	movw	r3, #18918	; 0x49e6
 80011ca:	fb03 f302 	mul.w	r3, r3, r2
 80011ce:	617b      	str	r3, [r7, #20]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	425a      	negs	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	1ad2      	subs	r2, r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	13db      	asrs	r3, r3, #15
 80011de:	613b      	str	r3, [r7, #16]
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011e6:	db03      	blt.n	80011f0 <MCM_Clarke+0x4e>
  {
    hbeta_tmp = INT16_MAX;
 80011e8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80011ec:	83fb      	strh	r3, [r7, #30]
 80011ee:	e009      	b.n	8001204 <MCM_Clarke+0x62>
  }
  else if ( wbeta_tmp < ( -32768 ) )
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80011f6:	da03      	bge.n	8001200 <MCM_Clarke+0x5e>
  {
    hbeta_tmp = ( -32768 );
 80011f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011fc:	83fb      	strh	r3, [r7, #30]
 80011fe:	e001      	b.n	8001204 <MCM_Clarke+0x62>
  }
  else
  {
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	83fb      	strh	r3, [r7, #30]
  }

  Output.beta = hbeta_tmp;
 8001204:	8bfb      	ldrh	r3, [r7, #30]
 8001206:	817b      	strh	r3, [r7, #10]

  if ( Output.beta == ( int16_t )( -32768 ) )
 8001208:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800120c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001210:	d102      	bne.n	8001218 <MCM_Clarke+0x76>
  {
    Output.beta = -32767;
 8001212:	f248 0301 	movw	r3, #32769	; 0x8001
 8001216:	817b      	strh	r3, [r7, #10]
  }

  return ( Output );
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	2300      	movs	r3, #0
 800121e:	89ba      	ldrh	r2, [r7, #12]
 8001220:	f362 030f 	bfi	r3, r2, #0, #16
 8001224:	89fa      	ldrh	r2, [r7, #14]
 8001226:	f362 431f 	bfi	r3, r2, #16, #16
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <MCM_Park>:
  * @param  Input: stator values alpha and beta in alphabeta_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator values q and d in qd_t format
  */
__weak qd_t MCM_Park( alphabeta_t Input, int16_t Theta )
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b08c      	sub	sp, #48	; 0x30
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	807b      	strh	r3, [r7, #2]
  int32_t d_tmp_1, d_tmp_2, q_tmp_1, q_tmp_2;
  Trig_Components Local_Vector_Components;
  int32_t wqd_tmp;
  int16_t hqd_tmp;

  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001242:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f8b0 	bl	80013ac <MCM_Trig_Functions>
 800124c:	4603      	mov	r3, r0
 800124e:	60fb      	str	r3, [r7, #12]

  /*No overflow guaranteed*/
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8001250:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001254:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001258:	fb02 f303 	mul.w	r3, r2, r3
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28

  /*No overflow guaranteed*/
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 800125e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001262:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) / 32768;
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 800126c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	13db      	asrs	r3, r3, #15
 8001274:	623b      	str	r3, [r7, #32]
#endif

  /* Check saturation of Iq */
  if ( wqd_tmp > INT16_MAX )
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800127c:	db03      	blt.n	8001286 <MCM_Park+0x50>
  {
    hqd_tmp = INT16_MAX;
 800127e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001282:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001284:	e009      	b.n	800129a <MCM_Park+0x64>
  }
  else if ( wqd_tmp < ( -32768 ) )
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800128c:	da03      	bge.n	8001296 <MCM_Park+0x60>
  {
    hqd_tmp = ( -32768 );
 800128e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001292:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001294:	e001      	b.n	800129a <MCM_Park+0x64>
  }
  else
  {
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.q = hqd_tmp;
 800129a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800129c:	823b      	strh	r3, [r7, #16]

  if ( Output.q == ( int16_t )( -32768 ) )
 800129e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012a2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80012a6:	d102      	bne.n	80012ae <MCM_Park+0x78>
  {
    Output.q = -32767;
 80012a8:	f248 0301 	movw	r3, #32769	; 0x8001
 80012ac:	823b      	strh	r3, [r7, #16]
  }

  /*No overflow guaranteed*/
  d_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hSin;
 80012ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	61fb      	str	r3, [r7, #28]

  /*No overflow guaranteed*/
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 80012bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	61bb      	str	r3, [r7, #24]
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) / 32768;
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	4413      	add	r3, r2
 80012d0:	13db      	asrs	r3, r3, #15
 80012d2:	623b      	str	r3, [r7, #32]
#endif

  /* Check saturation of Id */
  if ( wqd_tmp > INT16_MAX )
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012da:	db03      	blt.n	80012e4 <MCM_Park+0xae>
  {
    hqd_tmp = INT16_MAX;
 80012dc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80012e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80012e2:	e009      	b.n	80012f8 <MCM_Park+0xc2>
  }
  else if ( wqd_tmp < ( -32768 ) )
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80012ea:	da03      	bge.n	80012f4 <MCM_Park+0xbe>
  {
    hqd_tmp = ( -32768 );
 80012ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80012f2:	e001      	b.n	80012f8 <MCM_Park+0xc2>
  }
  else
  {
    hqd_tmp = ( int16_t )( wqd_tmp );
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.d = hqd_tmp;
 80012f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012fa:	827b      	strh	r3, [r7, #18]

  if ( Output.d == ( int16_t )( -32768 ) )
 80012fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001300:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001304:	d102      	bne.n	800130c <MCM_Park+0xd6>
  {
    Output.d = -32767;
 8001306:	f248 0301 	movw	r3, #32769	; 0x8001
 800130a:	827b      	strh	r3, [r7, #18]
  }

  return ( Output );
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	2300      	movs	r3, #0
 8001312:	8aba      	ldrh	r2, [r7, #20]
 8001314:	f362 030f 	bfi	r3, r2, #0, #16
 8001318:	8afa      	ldrh	r2, [r7, #22]
 800131a:	f362 431f 	bfi	r3, r2, #16, #16
}
 800131e:	4618      	mov	r0, r3
 8001320:	3730      	adds	r7, #48	; 0x30
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <MCM_Rev_Park>:
  * @param  Input: stator voltage Vq and Vd in qd_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator voltage Valpha and Vbeta in qd_t format
  */
__weak alphabeta_t MCM_Rev_Park( qd_t Input, int16_t Theta )
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b08a      	sub	sp, #40	; 0x28
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	807b      	strh	r3, [r7, #2]
  int32_t alpha_tmp1, alpha_tmp2, beta_tmp1, beta_tmp2;
  Trig_Components Local_Vector_Components;
  alphabeta_t Output;

  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001332:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f838 	bl	80013ac <MCM_Trig_Functions>
 800133c:	4603      	mov	r3, r0
 800133e:	613b      	str	r3, [r7, #16]

  /*No overflow guaranteed*/
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8001340:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001344:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001348:	fb02 f303 	mul.w	r3, r2, r3
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 800134e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001352:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	623b      	str	r3, [r7, #32]
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) / 32768 );
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 800135c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	4413      	add	r3, r2
 8001362:	13db      	asrs	r3, r3, #15
 8001364:	b21b      	sxth	r3, r3
 8001366:	81bb      	strh	r3, [r7, #12]
#endif

  beta_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hSin;
 8001368:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800136c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001370:	fb02 f303 	mul.w	r3, r2, r3
 8001374:	61fb      	str	r3, [r7, #28]
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	61bb      	str	r3, [r7, #24]
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) / 32768 );
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
  that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
  the compiler to perform the shift (instead of LSR logical shift right) */
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	13db      	asrs	r3, r3, #15
 800138c:	b21b      	sxth	r3, r3
 800138e:	81fb      	strh	r3, [r7, #14]
#endif

  return ( Output );
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	2300      	movs	r3, #0
 8001396:	8aba      	ldrh	r2, [r7, #20]
 8001398:	f362 030f 	bfi	r3, r2, #0, #16
 800139c:	8afa      	ldrh	r2, [r7, #22]
 800139e:	f362 431f 	bfi	r3, r2, #16, #16
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <MCM_Trig_Functions>:
  * @param  hAngle: angle in q1.15 format
  * @retval Sin(angle) and Cos(angle) in Trig_Components format
  */

__weak Trig_Components MCM_Trig_Functions( int16_t hAngle )
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 80013b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013be:	617b      	str	r3, [r7, #20]
  uhindex = ( uint16_t )shindex;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	827b      	strh	r3, [r7, #18]
  uhindex /= ( uint16_t )64;
 80013c4:	8a7b      	ldrh	r3, [r7, #18]
 80013c6:	099b      	lsrs	r3, r3, #6
 80013c8:	827b      	strh	r3, [r7, #18]

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80013ca:	8a7b      	ldrh	r3, [r7, #18]
 80013cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013d4:	d04b      	beq.n	800146e <MCM_Trig_Functions+0xc2>
 80013d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013da:	d802      	bhi.n	80013e2 <MCM_Trig_Functions+0x36>
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d02d      	beq.n	800143c <MCM_Trig_Functions+0x90>
    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    default:
      break;
 80013e0:	e05a      	b.n	8001498 <MCM_Trig_Functions+0xec>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80013e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013e6:	d003      	beq.n	80013f0 <MCM_Trig_Functions+0x44>
 80013e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80013ec:	d011      	beq.n	8001412 <MCM_Trig_Functions+0x66>
      break;
 80013ee:	e053      	b.n	8001498 <MCM_Trig_Functions+0xec>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80013f0:	8a7b      	ldrh	r3, [r7, #18]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <MCM_Trig_Functions+0x10c>)
 80013f8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80013fc:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013fe:	8a7b      	ldrh	r3, [r7, #18]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <MCM_Trig_Functions+0x10c>)
 800140a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800140e:	813b      	strh	r3, [r7, #8]
      break;
 8001410:	e042      	b.n	8001498 <MCM_Trig_Functions+0xec>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001412:	8a7b      	ldrh	r3, [r7, #18]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <MCM_Trig_Functions+0x10c>)
 800141e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001422:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001424:	8a7b      	ldrh	r3, [r7, #18]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <MCM_Trig_Functions+0x10c>)
 800142c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001430:	b29b      	uxth	r3, r3
 8001432:	425b      	negs	r3, r3
 8001434:	b29b      	uxth	r3, r3
 8001436:	b21b      	sxth	r3, r3
 8001438:	813b      	strh	r3, [r7, #8]
      break;
 800143a:	e02d      	b.n	8001498 <MCM_Trig_Functions+0xec>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800143c:	8a7b      	ldrh	r3, [r7, #18]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <MCM_Trig_Functions+0x10c>)
 8001444:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001448:	b29b      	uxth	r3, r3
 800144a:	425b      	negs	r3, r3
 800144c:	b29b      	uxth	r3, r3
 800144e:	b21b      	sxth	r3, r3
 8001450:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001452:	8a7b      	ldrh	r3, [r7, #18]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MCM_Trig_Functions+0x10c>)
 800145e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001462:	b29b      	uxth	r3, r3
 8001464:	425b      	negs	r3, r3
 8001466:	b29b      	uxth	r3, r3
 8001468:	b21b      	sxth	r3, r3
 800146a:	813b      	strh	r3, [r7, #8]
      break;
 800146c:	e014      	b.n	8001498 <MCM_Trig_Functions+0xec>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800146e:	8a7b      	ldrh	r3, [r7, #18]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MCM_Trig_Functions+0x10c>)
 800147a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800147e:	b29b      	uxth	r3, r3
 8001480:	425b      	negs	r3, r3
 8001482:	b29b      	uxth	r3, r3
 8001484:	b21b      	sxth	r3, r3
 8001486:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001488:	8a7b      	ldrh	r3, [r7, #18]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MCM_Trig_Functions+0x10c>)
 8001490:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001494:	813b      	strh	r3, [r7, #8]
      break;
 8001496:	bf00      	nop
  }
  return ( Local_Components );
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	2300      	movs	r3, #0
 800149e:	89ba      	ldrh	r2, [r7, #12]
 80014a0:	f362 030f 	bfi	r3, r2, #0, #16
 80014a4:	89fa      	ldrh	r2, [r7, #14]
 80014a6:	f362 431f 	bfi	r3, r2, #16, #16
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	371c      	adds	r7, #28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	0800eaf8 	.word	0x0800eaf8

080014bc <LL_GPIO_LockPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	60fb      	str	r3, [r7, #12]
  (void) temp;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <MCboot>:
  *         created and initialized. The vector must have length equal to the
  *         number of motor drives.
  * @retval None
  */
__weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS],MCT_Handle_t* pMCTList[NBR_OF_MOTORS] )
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  /* USER CODE END MCboot 0 */

  /**************************************/
  /*    State machine initialization    */
  /**************************************/
  STM_Init(&STM[M1]);
 80014fe:	4877      	ldr	r0, [pc, #476]	; (80016dc <MCboot+0x1e8>)
 8001500:	f00b fc88 	bl	800ce14 <STM_Init>
  
  bMCBootCompleted = 0;
 8001504:	4b76      	ldr	r3, [pc, #472]	; (80016e0 <MCboot+0x1ec>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 800150a:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <MCboot+0x1f0>)
 800150c:	4a76      	ldr	r2, [pc, #472]	; (80016e8 <MCboot+0x1f4>)
 800150e:	601a      	str	r2, [r3, #0]

  /**********************************************************/
  /*    PWM and current sensing component initialization    */
  /**********************************************************/
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001510:	4b76      	ldr	r3, [pc, #472]	; (80016ec <MCboot+0x1f8>)
 8001512:	4a77      	ldr	r2, [pc, #476]	; (80016f0 <MCboot+0x1fc>)
 8001514:	601a      	str	r2, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 8001516:	4876      	ldr	r0, [pc, #472]	; (80016f0 <MCboot+0x1fc>)
 8001518:	f009 fe36 	bl	800b188 <R3_1_Init>
  /* USER CODE END MCboot 1 */

  /**************************************/
  /*    Start timers synchronously      */
  /**************************************/
  startTimers();    
 800151c:	f008 ff0e 	bl	800a33c <startTimers>

  /******************************************************/
  /*   PID component initialization: speed regulation   */
  /******************************************************/
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001520:	4874      	ldr	r0, [pc, #464]	; (80016f4 <MCboot+0x200>)
 8001522:	f008 fce1 	bl	8009ee8 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001526:	4b74      	ldr	r3, [pc, #464]	; (80016f8 <MCboot+0x204>)
 8001528:	4a72      	ldr	r2, [pc, #456]	; (80016f4 <MCboot+0x200>)
 800152a:	601a      	str	r2, [r3, #0]
  
  /******************************************************/
  /*   Main speed sensor component initialization       */
  /******************************************************/
  pSTC[M1] = &SpeednTorqCtrlM1;
 800152c:	4b73      	ldr	r3, [pc, #460]	; (80016fc <MCboot+0x208>)
 800152e:	4a74      	ldr	r2, [pc, #464]	; (8001700 <MCboot+0x20c>)
 8001530:	601a      	str	r2, [r3, #0]
  STO_PLL_Init (&STO_PLL_M1);
 8001532:	4874      	ldr	r0, [pc, #464]	; (8001704 <MCboot+0x210>)
 8001534:	f00c fd98 	bl	800e068 <STO_PLL_Init>
  

  /******************************************************/
  /*   Speed & torque component initialization          */
  /******************************************************/
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8001538:	4b70      	ldr	r3, [pc, #448]	; (80016fc <MCboot+0x208>)
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	4b6e      	ldr	r3, [pc, #440]	; (80016f8 <MCboot+0x204>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a70      	ldr	r2, [pc, #448]	; (8001704 <MCboot+0x210>)
 8001542:	4619      	mov	r1, r3
 8001544:	f00b fa70 	bl	800ca28 <STC_Init>
  
  /****************************************************/
  /*   Virtual speed sensor component initialization  */
  /****************************************************/ 
  VSS_Init (&VirtualSpeedSensorM1);
 8001548:	486f      	ldr	r0, [pc, #444]	; (8001708 <MCboot+0x214>)
 800154a:	f00c f83f 	bl	800d5cc <VSS_Init>
  
  /**************************************/
  /*   Rev-up component initialization  */
  /**************************************/
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);  
 800154e:	4b6b      	ldr	r3, [pc, #428]	; (80016fc <MCboot+0x208>)
 8001550:	6819      	ldr	r1, [r3, #0]
 8001552:	4b66      	ldr	r3, [pc, #408]	; (80016ec <MCboot+0x1f8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	4b6c      	ldr	r3, [pc, #432]	; (800170c <MCboot+0x218>)
 800155a:	4a6b      	ldr	r2, [pc, #428]	; (8001708 <MCboot+0x214>)
 800155c:	486c      	ldr	r0, [pc, #432]	; (8001710 <MCboot+0x21c>)
 800155e:	f00c faa3 	bl	800daa8 <RUC_Init>
      
  /********************************************************/
  /*   PID component initialization: current regulation   */
  /********************************************************/
  PID_HandleInit(&PIDIqHandle_M1);
 8001562:	486c      	ldr	r0, [pc, #432]	; (8001714 <MCboot+0x220>)
 8001564:	f008 fcc0 	bl	8009ee8 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8001568:	486b      	ldr	r0, [pc, #428]	; (8001718 <MCboot+0x224>)
 800156a:	f008 fcbd 	bl	8009ee8 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 800156e:	4b6b      	ldr	r3, [pc, #428]	; (800171c <MCboot+0x228>)
 8001570:	4a68      	ldr	r2, [pc, #416]	; (8001714 <MCboot+0x220>)
 8001572:	601a      	str	r2, [r3, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8001574:	4b6a      	ldr	r3, [pc, #424]	; (8001720 <MCboot+0x22c>)
 8001576:	4a68      	ldr	r2, [pc, #416]	; (8001718 <MCboot+0x224>)
 8001578:	601a      	str	r2, [r3, #0]
  
  /********************************************************/
  /*   Bus voltage sensor component initialization        */
  /********************************************************/
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 800157a:	4b6a      	ldr	r3, [pc, #424]	; (8001724 <MCboot+0x230>)
 800157c:	4a6a      	ldr	r2, [pc, #424]	; (8001728 <MCboot+0x234>)
 800157e:	601a      	str	r2, [r3, #0]
  RVBS_Init(pBusSensorM1);
 8001580:	4b68      	ldr	r3, [pc, #416]	; (8001724 <MCboot+0x230>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f00a ff75 	bl	800c474 <RVBS_Init>
  
  /*************************************************/
  /*   Power measurement component initialization  */
  /*************************************************/
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800158a:	4b68      	ldr	r3, [pc, #416]	; (800172c <MCboot+0x238>)
 800158c:	4a68      	ldr	r2, [pc, #416]	; (8001730 <MCboot+0x23c>)
 800158e:	601a      	str	r2, [r3, #0]
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001590:	4b64      	ldr	r3, [pc, #400]	; (8001724 <MCboot+0x230>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b65      	ldr	r3, [pc, #404]	; (800172c <MCboot+0x238>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800159c:	4b63      	ldr	r3, [pc, #396]	; (800172c <MCboot+0x238>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a64      	ldr	r2, [pc, #400]	; (8001734 <MCboot+0x240>)
 80015a2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  /*******************************************************/
  /*   Temperature measurement component initialization  */
  /*******************************************************/
  NTC_Init(&TempSensorParamsM1);    
 80015a6:	4864      	ldr	r0, [pc, #400]	; (8001738 <MCboot+0x244>)
 80015a8:	f008 fbff 	bl	8009daa <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80015ac:	4b63      	ldr	r3, [pc, #396]	; (800173c <MCboot+0x248>)
 80015ae:	4a62      	ldr	r2, [pc, #392]	; (8001738 <MCboot+0x244>)
 80015b0:	601a      	str	r2, [r3, #0]
    

  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80015b2:	4b63      	ldr	r3, [pc, #396]	; (8001740 <MCboot+0x24c>)
 80015b4:	4a63      	ldr	r2, [pc, #396]	; (8001744 <MCboot+0x250>)
 80015b6:	601a      	str	r2, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 80015b8:	4b61      	ldr	r3, [pc, #388]	; (8001740 <MCboot+0x24c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f00b f869 	bl	800c694 <REMNG_Init>

  FOC_Clear(M1);
 80015c2:	2000      	movs	r0, #0
 80015c4:	f000 fad0 	bl	8001b68 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 80015c8:	4b5a      	ldr	r3, [pc, #360]	; (8001734 <MCboot+0x240>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80015d0:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <MCboot+0x208>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4c57      	ldr	r4, [pc, #348]	; (8001734 <MCboot+0x240>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f00b fbf0 	bl	800cdbc <STC_GetDefaultIqdref>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	8222      	strh	r2, [r4, #16]
 80015e2:	f3c3 430f 	ubfx	r3, r3, #16, #16
 80015e6:	8263      	strh	r3, [r4, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80015e8:	4b44      	ldr	r3, [pc, #272]	; (80016fc <MCboot+0x208>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00b fbe5 	bl	800cdbc <STC_GetDefaultIqdref>
 80015f2:	4603      	mov	r3, r0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015fa:	4b4e      	ldr	r3, [pc, #312]	; (8001734 <MCboot+0x240>)
 80015fc:	829a      	strh	r2, [r3, #20]
  oMCInterface[M1] = & Mci[M1];
 80015fe:	4b52      	ldr	r3, [pc, #328]	; (8001748 <MCboot+0x254>)
 8001600:	4a52      	ldr	r2, [pc, #328]	; (800174c <MCboot+0x258>)
 8001602:	601a      	str	r2, [r3, #0]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <MCboot+0x254>)
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	4b3c      	ldr	r3, [pc, #240]	; (80016fc <MCboot+0x208>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b49      	ldr	r3, [pc, #292]	; (8001734 <MCboot+0x240>)
 800160e:	4933      	ldr	r1, [pc, #204]	; (80016dc <MCboot+0x1e8>)
 8001610:	f7ff fb3e 	bl	8000c90 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001614:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <MCboot+0x254>)
 8001616:	681c      	ldr	r4, [r3, #0]
 8001618:	4b38      	ldr	r3, [pc, #224]	; (80016fc <MCboot+0x208>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f00b fba7 	bl	800cd70 <STC_GetMecSpeedRefUnitDefault>
 8001622:	4603      	mov	r3, r0
 8001624:	2200      	movs	r2, #0
 8001626:	4619      	mov	r1, r3
 8001628:	4620      	mov	r0, r4
 800162a:	f7ff fb56 	bl	8000cda <MCI_ExecSpeedRamp>
  STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /*First command to STC*/
  pMCIList[M1] = oMCInterface[M1];
 800162e:	4b46      	ldr	r3, [pc, #280]	; (8001748 <MCboot+0x254>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	601a      	str	r2, [r3, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001636:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <MCboot+0x204>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a45      	ldr	r2, [pc, #276]	; (8001750 <MCboot+0x25c>)
 800163c:	6013      	str	r3, [r2, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <MCboot+0x228>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a43      	ldr	r2, [pc, #268]	; (8001750 <MCboot+0x25c>)
 8001644:	6053      	str	r3, [r2, #4]
  MCT[M1].pPIDId = pPIDId[M1];
 8001646:	4b36      	ldr	r3, [pc, #216]	; (8001720 <MCboot+0x22c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a41      	ldr	r2, [pc, #260]	; (8001750 <MCboot+0x25c>)
 800164c:	6093      	str	r3, [r2, #8]
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 800164e:	4b40      	ldr	r3, [pc, #256]	; (8001750 <MCboot+0x25c>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <MCboot+0x1f8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a3d      	ldr	r2, [pc, #244]	; (8001750 <MCboot+0x25c>)
 800165a:	6113      	str	r3, [r2, #16]
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 800165c:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <MCboot+0x25c>)
 800165e:	4a2c      	ldr	r2, [pc, #176]	; (8001710 <MCboot+0x21c>)
 8001660:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1; 
 8001662:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <MCboot+0x25c>)
 8001664:	4a27      	ldr	r2, [pc, #156]	; (8001704 <MCboot+0x210>)
 8001666:	619a      	str	r2, [r3, #24]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8001668:	4b39      	ldr	r3, [pc, #228]	; (8001750 <MCboot+0x25c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <MCboot+0x25c>)
 8001670:	4a25      	ldr	r2, [pc, #148]	; (8001708 <MCboot+0x214>)
 8001672:	621a      	str	r2, [r3, #32]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <MCboot+0x208>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a35      	ldr	r2, [pc, #212]	; (8001750 <MCboot+0x25c>)
 800167a:	6253      	str	r3, [r2, #36]	; 0x24
  MCT[M1].pStateMachine = &STM[M1];
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <MCboot+0x25c>)
 800167e:	4a17      	ldr	r2, [pc, #92]	; (80016dc <MCboot+0x1e8>)
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <MCboot+0x248>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a32      	ldr	r2, [pc, #200]	; (8001750 <MCboot+0x25c>)
 8001688:	62d3      	str	r3, [r2, #44]	; 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <MCboot+0x230>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <MCboot+0x25c>)
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
  MCT[M1].pBrakeDigitalOutput = MC_NULL;   /* brake is defined, oBrakeM1*/
 8001694:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <MCboot+0x25c>)
 8001696:	2200      	movs	r2, #0
 8001698:	635a      	str	r2, [r3, #52]	; 0x34
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 800169a:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <MCboot+0x25c>)
 800169c:	2200      	movs	r2, #0
 800169e:	639a      	str	r2, [r3, #56]	; 0x38
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <MCboot+0x238>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a2a      	ldr	r2, [pc, #168]	; (8001750 <MCboot+0x25c>)
 80016a6:	63d3      	str	r3, [r2, #60]	; 0x3c
  MCT[M1].pFW = MC_NULL;
 80016a8:	4b29      	ldr	r3, [pc, #164]	; (8001750 <MCboot+0x25c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
  MCT[M1].pFF = MC_NULL;
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <MCboot+0x25c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	645a      	str	r2, [r3, #68]	; 0x44

  MCT[M1].pPosCtrl = MC_NULL;
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <MCboot+0x25c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	649a      	str	r2, [r3, #72]	; 0x48

  MCT[M1].pSCC = MC_NULL;
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <MCboot+0x25c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	64da      	str	r2, [r3, #76]	; 0x4c
  MCT[M1].pOTT = MC_NULL;
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <MCboot+0x25c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	651a      	str	r2, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	4a21      	ldr	r2, [pc, #132]	; (8001750 <MCboot+0x25c>)
 80016ca:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MCboot 2 */

  /* USER CODE END MCboot 2 */

  bMCBootCompleted = 1;
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <MCboot+0x1ec>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000b60 	.word	0x20000b60
 80016e0:	2000073a 	.word	0x2000073a
 80016e4:	20000b3c 	.word	0x20000b3c
 80016e8:	20000498 	.word	0x20000498
 80016ec:	20000aac 	.word	0x20000aac
 80016f0:	20000244 	.word	0x20000244
 80016f4:	20000114 	.word	0x20000114
 80016f8:	20000ab0 	.word	0x20000ab0
 80016fc:	20000b74 	.word	0x20000b74
 8001700:	20000198 	.word	0x20000198
 8001704:	200002f4 	.word	0x200002f4
 8001708:	200002bc 	.word	0x200002bc
 800170c:	2000041c 	.word	0x2000041c
 8001710:	200001cc 	.word	0x200001cc
 8001714:	20000140 	.word	0x20000140
 8001718:	2000016c 	.word	0x2000016c
 800171c:	20000ab4 	.word	0x20000ab4
 8001720:	20000b70 	.word	0x20000b70
 8001724:	20000b40 	.word	0x20000b40
 8001728:	20000458 	.word	0x20000458
 800172c:	20000b6c 	.word	0x20000b6c
 8001730:	20000000 	.word	0x20000000
 8001734:	20000ac0 	.word	0x20000ac0
 8001738:	20000430 	.word	0x20000430
 800173c:	20000aa8 	.word	0x20000aa8
 8001740:	20000b68 	.word	0x20000b68
 8001744:	20000480 	.word	0x20000480
 8001748:	20000ab8 	.word	0x20000ab8
 800174c:	20000b44 	.word	0x20000b44
 8001750:	20000ae8 	.word	0x20000ae8

08001754 <MC_RunMotorControlTasks>:
 * - Safety Task
 * - Power Factor Correction Task (if enabled)
 * - User Interface task. 
 */
__weak void MC_RunMotorControlTasks(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  if ( bMCBootCompleted ) {
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <MC_RunMotorControlTasks+0x1c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <MC_RunMotorControlTasks+0x18>
    /* ** Medium Frequency Tasks ** */
    MC_Scheduler();
 8001760:	f000 f808 	bl	8001774 <MC_Scheduler>

    /* Safety task is run after Medium Frequency task so that  
     * it can overcome actions they initiated if needed. */
    TSK_SafetyTask();
 8001764:	f000 fc44 	bl	8001ff0 <TSK_SafetyTask>
    

    /* ** User Interface Task ** */
    UI_Scheduler();
 8001768:	f002 fa60 	bl	8003c2c <UI_Scheduler>
  }
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	2000073a 	.word	0x2000073a

08001774 <MC_Scheduler>:
 * @brief  Executes the Medium Frequency Task functions for each drive instance. 
 *
 * It is to be clocked at the Systick frequency.
 */
__weak void MC_Scheduler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MC_Scheduler 0 */

/* USER CODE END MC_Scheduler 0 */

  if (bMCBootCompleted == 1)
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MC_Scheduler+0x64>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d129      	bne.n	80017d4 <MC_Scheduler+0x60>
  {    
    if(hMFTaskCounterM1 > 0u)
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <MC_Scheduler+0x68>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <MC_Scheduler+0x26>
    {
      hMFTaskCounterM1--;
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MC_Scheduler+0x68>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	b29b      	uxth	r3, r3
 8001790:	3b01      	subs	r3, #1
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MC_Scheduler+0x68>)
 8001796:	801a      	strh	r2, [r3, #0]
 8001798:	e004      	b.n	80017a4 <MC_Scheduler+0x30>
    }
    else
    {
      TSK_MediumFrequencyTaskM1();
 800179a:	f000 f825 	bl	80017e8 <TSK_MediumFrequencyTaskM1>
      /* USER CODE BEGIN MC_Scheduler 1 */

      /* USER CODE END MC_Scheduler 1 */
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MC_Scheduler+0x68>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	801a      	strh	r2, [r3, #0]
    }
    if(hBootCapDelayCounterM1 > 0u)
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MC_Scheduler+0x6c>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <MC_Scheduler+0x48>
    {
      hBootCapDelayCounterM1--;
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MC_Scheduler+0x6c>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MC_Scheduler+0x6c>)
 80017ba:	801a      	strh	r2, [r3, #0]
    }
    if(hStopPermanencyCounterM1 > 0u)
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MC_Scheduler+0x70>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d006      	beq.n	80017d4 <MC_Scheduler+0x60>
    {
      hStopPermanencyCounterM1--;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <MC_Scheduler+0x70>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <MC_Scheduler+0x70>)
 80017d2:	801a      	strh	r2, [r3, #0]
  {
  }
  /* USER CODE BEGIN MC_Scheduler 2 */

  /* USER CODE END MC_Scheduler 2 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000073a 	.word	0x2000073a
 80017dc:	20000734 	.word	0x20000734
 80017e0:	20000736 	.word	0x20000736
 80017e4:	20000738 	.word	0x20000738

080017e8 <TSK_MediumFrequencyTaskM1>:
  * present state of its state machine. In particular, duties requiring a periodic 
  * execution at a medium frequency rate (such as the speed controller for instance) 
  * are executed here.
  */
__weak void TSK_MediumFrequencyTaskM1(void)
{
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MediumFrequencyTask M1 0 */

  /* USER CODE END MediumFrequencyTask M1 0 */

  State_t StateM1;
  int16_t wAux = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	827b      	strh	r3, [r7, #18]

  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80017f2:	f107 0312 	add.w	r3, r7, #18
 80017f6:	4619      	mov	r1, r3
 80017f8:	48c6      	ldr	r0, [pc, #792]	; (8001b14 <TSK_MediumFrequencyTaskM1+0x32c>)
 80017fa:	f00c fb33 	bl	800de64 <STO_PLL_CalcAvrgMecSpeedUnit>
 80017fe:	4603      	mov	r3, r0
 8001800:	75fb      	strb	r3, [r7, #23]
  PQD_CalcElMotorPower( pMPM[M1] );
 8001802:	4bc5      	ldr	r3, [pc, #788]	; (8001b18 <TSK_MediumFrequencyTaskM1+0x330>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f008 fc9a 	bl	800a140 <PQD_CalcElMotorPower>

  StateM1 = STM_GetState( &STM[M1] );
 800180c:	48c3      	ldr	r0, [pc, #780]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x334>)
 800180e:	f00b fcb5 	bl	800d17c <STM_GetState>
 8001812:	4603      	mov	r3, r0
 8001814:	75bb      	strb	r3, [r7, #22]

  switch ( StateM1 )
 8001816:	7dbb      	ldrb	r3, [r7, #22]
 8001818:	3b03      	subs	r3, #3
 800181a:	2b10      	cmp	r3, #16
 800181c:	f200 8190 	bhi.w	8001b40 <TSK_MediumFrequencyTaskM1+0x358>
 8001820:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <TSK_MediumFrequencyTaskM1+0x40>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	0800186d 	.word	0x0800186d
 800182c:	08001917 	.word	0x08001917
 8001830:	08001a59 	.word	0x08001a59
 8001834:	08001a8f 	.word	0x08001a8f
 8001838:	08001ab7 	.word	0x08001ab7
 800183c:	08001ae3 	.word	0x08001ae3
 8001840:	08001af7 	.word	0x08001af7
 8001844:	08001b41 	.word	0x08001b41
 8001848:	08001b41 	.word	0x08001b41
 800184c:	08001b41 	.word	0x08001b41
 8001850:	08001b41 	.word	0x08001b41
 8001854:	08001b41 	.word	0x08001b41
 8001858:	08001b41 	.word	0x08001b41
 800185c:	0800189b 	.word	0x0800189b
 8001860:	080018bd 	.word	0x080018bd
 8001864:	080018db 	.word	0x080018db
 8001868:	080019dd 	.word	0x080019dd
  {
  case IDLE_START:
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 800186c:	4bac      	ldr	r3, [pc, #688]	; (8001b20 <TSK_MediumFrequencyTaskM1+0x338>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fb57 	bl	8000f24 <MCI_GetImposedMotorDirection>
 8001876:	4603      	mov	r3, r0
 8001878:	4619      	mov	r1, r3
 800187a:	48aa      	ldr	r0, [pc, #680]	; (8001b24 <TSK_MediumFrequencyTaskM1+0x33c>)
 800187c:	f00c f952 	bl	800db24 <RUC_Clear>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 8001880:	4ba9      	ldr	r3, [pc, #676]	; (8001b28 <TSK_MediumFrequencyTaskM1+0x340>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f00a f924 	bl	800bad2 <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800188a:	2014      	movs	r0, #20
 800188c:	f000 fa4a 	bl	8001d24 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001890:	2110      	movs	r1, #16
 8001892:	48a2      	ldr	r0, [pc, #648]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x334>)
 8001894:	f00b fad2 	bl	800ce3c <STM_NextState>
    break;
 8001898:	e161      	b.n	8001b5e <TSK_MediumFrequencyTaskM1+0x376>

  case CHARGE_BOOT_CAP:
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800189a:	f000 fa53 	bl	8001d44 <TSK_ChargeBootCapDelayHasElapsedM1>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 814f 	beq.w	8001b44 <TSK_MediumFrequencyTaskM1+0x35c>
    {
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80018a6:	4ba0      	ldr	r3, [pc, #640]	; (8001b28 <TSK_MediumFrequencyTaskM1+0x340>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f008 ffd5 	bl	800a85c <PWMC_CurrentReadingCalibr>

      /* USER CODE BEGIN MediumFrequencyTask M1 Charge BootCap elapsed */

      /* USER CODE END MediumFrequencyTask M1 Charge BootCap elapsed */

      STM_NextState(&STM[M1],OFFSET_CALIB);
 80018b2:	2111      	movs	r1, #17
 80018b4:	4899      	ldr	r0, [pc, #612]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x334>)
 80018b6:	f00b fac1 	bl	800ce3c <STM_NextState>
    }
    break;
 80018ba:	e143      	b.n	8001b44 <TSK_MediumFrequencyTaskM1+0x35c>

  case OFFSET_CALIB:
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80018bc:	4b9a      	ldr	r3, [pc, #616]	; (8001b28 <TSK_MediumFrequencyTaskM1+0x340>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f008 ffca 	bl	800a85c <PWMC_CurrentReadingCalibr>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 813c 	beq.w	8001b48 <TSK_MediumFrequencyTaskM1+0x360>
    {
      STM_NextState( &STM[M1], CLEAR );
 80018d0:	2112      	movs	r1, #18
 80018d2:	4892      	ldr	r0, [pc, #584]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x334>)
 80018d4:	f00b fab2 	bl	800ce3c <STM_NextState>
    }
    break;
 80018d8:	e136      	b.n	8001b48 <TSK_MediumFrequencyTaskM1+0x360>

  case CLEAR:
    /* In a sensorless configuration. Initiate the Revup procedure */
    FOCVars[M1].bDriveInput = EXTERNAL;
 80018da:	4b94      	ldr	r3, [pc, #592]	; (8001b2c <TSK_MediumFrequencyTaskM1+0x344>)
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80018e2:	4b93      	ldr	r3, [pc, #588]	; (8001b30 <TSK_MediumFrequencyTaskM1+0x348>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4993      	ldr	r1, [pc, #588]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x34c>)
 80018e8:	4618      	mov	r0, r3
 80018ea:	f00b f8c9 	bl	800ca80 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 80018ee:	4889      	ldr	r0, [pc, #548]	; (8001b14 <TSK_MediumFrequencyTaskM1+0x32c>)
 80018f0:	f00c fb8a 	bl	800e008 <STO_PLL_Clear>

    if ( STM_NextState( &STM[M1], START ) == true )
 80018f4:	2104      	movs	r1, #4
 80018f6:	4889      	ldr	r0, [pc, #548]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x334>)
 80018f8:	f00b faa0 	bl	800ce3c <STM_NextState>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 8124 	beq.w	8001b4c <TSK_MediumFrequencyTaskM1+0x364>
    {
      FOC_Clear( M1 );
 8001904:	2000      	movs	r0, #0
 8001906:	f000 f92f 	bl	8001b68 <FOC_Clear>

      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 800190a:	4b87      	ldr	r3, [pc, #540]	; (8001b28 <TSK_MediumFrequencyTaskM1+0x340>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f00a f935 	bl	800bb7e <R3_1_SwitchOnPWM>
    }
    break;
 8001914:	e11a      	b.n	8001b4c <TSK_MediumFrequencyTaskM1+0x364>
    {
  
      /* Mechanical speed as imposed by the Virtual Speed Sensor during the Rev Up phase. */
      int16_t hForcedMecSpeedUnit;
      qd_t IqdRef;
      bool ObserverConverged = false;
 8001916:	2300      	movs	r3, #0
 8001918:	753b      	strb	r3, [r7, #20]

      /* Execute the Rev Up procedure */
      if( ! RUC_Exec( &RevUpControlM1 ) )
 800191a:	4882      	ldr	r0, [pc, #520]	; (8001b24 <TSK_MediumFrequencyTaskM1+0x33c>)
 800191c:	f00c f94a 	bl	800dbb4 <RUC_Exec>
 8001920:	4603      	mov	r3, r0
 8001922:	f083 0301 	eor.w	r3, r3, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <TSK_MediumFrequencyTaskM1+0x150>
      {
        /* The time allowed for the startup sequence has expired */
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );  
 800192c:	2200      	movs	r2, #0
 800192e:	2110      	movs	r1, #16
 8001930:	487a      	ldr	r0, [pc, #488]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x334>)
 8001932:	f00b fbe5 	bl	800d100 <STM_FaultProcessing>
 8001936:	e010      	b.n	800195a <TSK_MediumFrequencyTaskM1+0x172>
      }
      else
      {
        /* Execute the torque open loop current start-up ramp:
         * Compute the Iq reference current as configured in the Rev Up sequence */
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8001938:	4b7d      	ldr	r3, [pc, #500]	; (8001b30 <TSK_MediumFrequencyTaskM1+0x348>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f00b f9af 	bl	800cca0 <STC_CalcTorqueReference>
 8001942:	4603      	mov	r3, r0
 8001944:	81bb      	strh	r3, [r7, #12]
        IqdRef.d = FOCVars[M1].UserIdref;
 8001946:	4b79      	ldr	r3, [pc, #484]	; (8001b2c <TSK_MediumFrequencyTaskM1+0x344>)
 8001948:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800194c:	81fb      	strh	r3, [r7, #14]
        /* Iqd reference current used by the High Frequency Loop to generate the PWM output */
        FOCVars[M1].Iqdref = IqdRef;
 800194e:	4b77      	ldr	r3, [pc, #476]	; (8001b2c <TSK_MediumFrequencyTaskM1+0x344>)
 8001950:	3310      	adds	r3, #16
 8001952:	f107 020c 	add.w	r2, r7, #12
 8001956:	6810      	ldr	r0, [r2, #0]
 8001958:	6018      	str	r0, [r3, #0]
      }

      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	4619      	mov	r1, r3
 8001960:	4874      	ldr	r0, [pc, #464]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x34c>)
 8001962:	f00b ff34 	bl	800d7ce <VSS_CalcAvrgMecSpeedUnit>

      ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 8001966:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800196a:	4619      	mov	r1, r3
 800196c:	4869      	ldr	r0, [pc, #420]	; (8001b14 <TSK_MediumFrequencyTaskM1+0x32c>)
 800196e:	f00c fbb3 	bl	800e0d8 <STO_PLL_IsObserverConverged>
 8001972:	4603      	mov	r3, r0
 8001974:	753b      	strb	r3, [r7, #20]
      (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 8001976:	7d3b      	ldrb	r3, [r7, #20]
 8001978:	4619      	mov	r1, r3
 800197a:	486e      	ldr	r0, [pc, #440]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x34c>)
 800197c:	f00c f862 	bl	800da44 <VSS_SetStartTransition>

      if ( ObserverConverged )
 8001980:	7d3b      	ldrb	r3, [r7, #20]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80e4 	beq.w	8001b50 <TSK_MediumFrequencyTaskM1+0x368>
      {
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8001988:	4862      	ldr	r0, [pc, #392]	; (8001b14 <TSK_MediumFrequencyTaskM1+0x32c>)
 800198a:	f00a ff9e 	bl	800c8ca <SPD_GetElAngle>
 800198e:	4603      	mov	r3, r0
 8001990:	4619      	mov	r1, r3
 8001992:	4b66      	ldr	r3, [pc, #408]	; (8001b2c <TSK_MediumFrequencyTaskM1+0x344>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	461a      	mov	r2, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f7ff fc4b 	bl	8001236 <MCM_Park>
 80019a0:	4603      	mov	r3, r0
 80019a2:	60bb      	str	r3, [r7, #8]

        /* Start switch over ramp. This ramp will transition from the revup to the closed loop FOC. */
        REMNG_Init( pREMNG[M1] );
 80019a4:	4b64      	ldr	r3, [pc, #400]	; (8001b38 <TSK_MediumFrequencyTaskM1+0x350>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f00a fe73 	bl	800c694 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 80019ae:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <TSK_MediumFrequencyTaskM1+0x350>)
 80019b0:	6818      	ldr	r0, [r3, #0]
 80019b2:	4b5e      	ldr	r3, [pc, #376]	; (8001b2c <TSK_MediumFrequencyTaskM1+0x344>)
 80019b4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019b8:	2200      	movs	r2, #0
 80019ba:	4619      	mov	r1, r3
 80019bc:	f00a feb8 	bl	800c730 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 80019c0:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <TSK_MediumFrequencyTaskM1+0x350>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80019c8:	4611      	mov	r1, r2
 80019ca:	2219      	movs	r2, #25
 80019cc:	4618      	mov	r0, r3
 80019ce:	f00a feaf 	bl	800c730 <REMNG_ExecRamp>
        
        STM_NextState( &STM[M1], SWITCH_OVER );
 80019d2:	2113      	movs	r1, #19
 80019d4:	4851      	ldr	r0, [pc, #324]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x334>)
 80019d6:	f00b fa31 	bl	800ce3c <STM_NextState>
      }
    }
    break;
 80019da:	e0b9      	b.n	8001b50 <TSK_MediumFrequencyTaskM1+0x368>
    {
      bool LoopClosed;
      int16_t hForcedMecSpeedUnit;
      
       
      if( ! RUC_Exec( &RevUpControlM1 ) )
 80019dc:	4851      	ldr	r0, [pc, #324]	; (8001b24 <TSK_MediumFrequencyTaskM1+0x33c>)
 80019de:	f00c f8e9 	bl	800dbb4 <RUC_Exec>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f083 0301 	eor.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <TSK_MediumFrequencyTaskM1+0x212>
      {
          /* The time allowed for the startup sequence has expired */
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );  
 80019ee:	2200      	movs	r2, #0
 80019f0:	2110      	movs	r1, #16
 80019f2:	484a      	ldr	r0, [pc, #296]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x334>)
 80019f4:	f00b fb84 	bl	800d100 <STM_FaultProcessing>
          STM_NextState( &STM[M1], START_RUN );
        }  
      }
    }

    break;
 80019f8:	e0ac      	b.n	8001b54 <TSK_MediumFrequencyTaskM1+0x36c>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 80019fa:	1dbb      	adds	r3, r7, #6
 80019fc:	4619      	mov	r1, r3
 80019fe:	484d      	ldr	r0, [pc, #308]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x34c>)
 8001a00:	f00b fee5 	bl	800d7ce <VSS_CalcAvrgMecSpeedUnit>
 8001a04:	4603      	mov	r3, r0
 8001a06:	757b      	strb	r3, [r7, #21]
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8001a08:	484a      	ldr	r0, [pc, #296]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x34c>)
 8001a0a:	f00c f83f 	bl	800da8c <VSS_TransitionEnded>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	7d7b      	ldrb	r3, [r7, #21]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf14      	ite	ne
 8001a1c:	2301      	movne	r3, #1
 8001a1e:	2300      	moveq	r3, #0
 8001a20:	757b      	strb	r3, [r7, #21]
        if ( LoopClosed == true ) 
 8001a22:	7d7b      	ldrb	r3, [r7, #21]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8095 	beq.w	8001b54 <TSK_MediumFrequencyTaskM1+0x36c>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8001a2a:	4b44      	ldr	r3, [pc, #272]	; (8001b3c <TSK_MediumFrequencyTaskM1+0x354>)
 8001a2c:	681c      	ldr	r4, [r3, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <TSK_MediumFrequencyTaskM1+0x344>)
 8001a30:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a34:	461d      	mov	r5, r3
 8001a36:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <TSK_MediumFrequencyTaskM1+0x354>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f008 fac5 	bl	8009fca <PID_GetKIDivisor>
 8001a40:	4603      	mov	r3, r0
 8001a42:	fb03 f305 	mul.w	r3, r3, r5
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8001a46:	4619      	mov	r1, r3
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f008 faa4 	bl	8009f96 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 8001a4e:	2105      	movs	r1, #5
 8001a50:	4832      	ldr	r0, [pc, #200]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x334>)
 8001a52:	f00b f9f3 	bl	800ce3c <STM_NextState>
    break;
 8001a56:	e07d      	b.n	8001b54 <TSK_MediumFrequencyTaskM1+0x36c>

  case START_RUN:
 /* only for sensor-less control */
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001a58:	4b35      	ldr	r3, [pc, #212]	; (8001b30 <TSK_MediumFrequencyTaskM1+0x348>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	492d      	ldr	r1, [pc, #180]	; (8001b14 <TSK_MediumFrequencyTaskM1+0x32c>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00b f80e 	bl	800ca80 <STC_SetSpeedSensor>
    {
      /* USER CODE BEGIN MediumFrequencyTask M1 1 */

      /* USER CODE END MediumFrequencyTask M1 1 */      
	  FOC_InitAdditionalMethods(M1);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f000 f915 	bl	8001c94 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f000 f91e 	bl	8001cac <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001a70:	2106      	movs	r1, #6
 8001a72:	482a      	ldr	r0, [pc, #168]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x334>)
 8001a74:	f00b f9e2 	bl	800ce3c <STM_NextState>
    }
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001a78:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <TSK_MediumFrequencyTaskM1+0x348>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00b f9b8 	bl	800cdf2 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <TSK_MediumFrequencyTaskM1+0x338>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f9c0 	bl	8000e0c <MCI_ExecBufferedCommands>
	
    break;
 8001a8c:	e067      	b.n	8001b5e <TSK_MediumFrequencyTaskM1+0x376>
  case RUN:
    /* USER CODE BEGIN MediumFrequencyTask M1 2 */

    /* USER CODE END MediumFrequencyTask M1 2 */

    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <TSK_MediumFrequencyTaskM1+0x338>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f9ba 	bl	8000e0c <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f000 f907 	bl	8001cac <FOC_CalcCurrRef>
 
    if( !IsSpeedReliable )
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	f083 0301 	eor.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d056      	beq.n	8001b58 <TSK_MediumFrequencyTaskM1+0x370>
    {
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2120      	movs	r1, #32
 8001aae:	481b      	ldr	r0, [pc, #108]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x334>)
 8001ab0:	f00b fb26 	bl	800d100 <STM_FaultProcessing>
    }

    /* USER CODE BEGIN MediumFrequencyTask M1 3 */

    /* USER CODE END MediumFrequencyTask M1 3 */
    break;
 8001ab4:	e050      	b.n	8001b58 <TSK_MediumFrequencyTaskM1+0x370>

  case ANY_STOP:
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <TSK_MediumFrequencyTaskM1+0x340>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f00a f900 	bl	800bcc0 <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f000 f851 	bl	8001b68 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <TSK_MediumFrequencyTaskM1+0x330>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f008 f8d5 	bl	8009c7a <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001ad0:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001ad4:	f000 f94c 	bl	8001d70 <TSK_SetStopPermanencyTimeM1>

    /* USER CODE BEGIN MediumFrequencyTask M1 4 */

    /* USER CODE END MediumFrequencyTask M1 4 */

    STM_NextState( &STM[M1], STOP );
 8001ad8:	2108      	movs	r1, #8
 8001ada:	4810      	ldr	r0, [pc, #64]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x334>)
 8001adc:	f00b f9ae 	bl	800ce3c <STM_NextState>
    break;
 8001ae0:	e03d      	b.n	8001b5e <TSK_MediumFrequencyTaskM1+0x376>

  case STOP:
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001ae2:	f000 f955 	bl	8001d90 <TSK_StopPermanencyTimeHasElapsedM1>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d037      	beq.n	8001b5c <TSK_MediumFrequencyTaskM1+0x374>
    {
      STM_NextState( &STM[M1], STOP_IDLE );
 8001aec:	2109      	movs	r1, #9
 8001aee:	480b      	ldr	r0, [pc, #44]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x334>)
 8001af0:	f00b f9a4 	bl	800ce3c <STM_NextState>
    }
    break;
 8001af4:	e032      	b.n	8001b5c <TSK_MediumFrequencyTaskM1+0x374>

  case STOP_IDLE:
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <TSK_MediumFrequencyTaskM1+0x348>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	490e      	ldr	r1, [pc, #56]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x34c>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00a ffbf 	bl	800ca80 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8001b02:	480c      	ldr	r0, [pc, #48]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x34c>)
 8001b04:	f00b fd6d 	bl	800d5e2 <VSS_Clear>

    /* USER CODE BEGIN MediumFrequencyTask M1 5 */

    /* USER CODE END MediumFrequencyTask M1 5 */
    STM_NextState( &STM[M1], IDLE );
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4804      	ldr	r0, [pc, #16]	; (8001b1c <TSK_MediumFrequencyTaskM1+0x334>)
 8001b0c:	f00b f996 	bl	800ce3c <STM_NextState>
    break;
 8001b10:	e025      	b.n	8001b5e <TSK_MediumFrequencyTaskM1+0x376>
 8001b12:	bf00      	nop
 8001b14:	200002f4 	.word	0x200002f4
 8001b18:	20000b6c 	.word	0x20000b6c
 8001b1c:	20000b60 	.word	0x20000b60
 8001b20:	20000ab8 	.word	0x20000ab8
 8001b24:	200001cc 	.word	0x200001cc
 8001b28:	20000aac 	.word	0x20000aac
 8001b2c:	20000ac0 	.word	0x20000ac0
 8001b30:	20000b74 	.word	0x20000b74
 8001b34:	200002bc 	.word	0x200002bc
 8001b38:	20000b68 	.word	0x20000b68
 8001b3c:	20000ab0 	.word	0x20000ab0

  default:
    break;
 8001b40:	bf00      	nop
 8001b42:	e00c      	b.n	8001b5e <TSK_MediumFrequencyTaskM1+0x376>
    break;
 8001b44:	bf00      	nop
 8001b46:	e00a      	b.n	8001b5e <TSK_MediumFrequencyTaskM1+0x376>
    break;
 8001b48:	bf00      	nop
 8001b4a:	e008      	b.n	8001b5e <TSK_MediumFrequencyTaskM1+0x376>
    break;
 8001b4c:	bf00      	nop
 8001b4e:	e006      	b.n	8001b5e <TSK_MediumFrequencyTaskM1+0x376>
    break;
 8001b50:	bf00      	nop
 8001b52:	e004      	b.n	8001b5e <TSK_MediumFrequencyTaskM1+0x376>
    break;
 8001b54:	bf00      	nop
 8001b56:	e002      	b.n	8001b5e <TSK_MediumFrequencyTaskM1+0x376>
    break;
 8001b58:	bf00      	nop
 8001b5a:	e000      	b.n	8001b5e <TSK_MediumFrequencyTaskM1+0x376>
    break;
 8001b5c:	bf00      	nop
  }

  /* USER CODE BEGIN MediumFrequencyTask M1 6 */

  /* USER CODE END MediumFrequencyTask M1 6 */
}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bdb0      	pop	{r4, r5, r7, pc}
 8001b66:	bf00      	nop

08001b68 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_Clear 0 */

  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
 8001b72:	2300      	movs	r3, #0
 8001b74:	82bb      	strh	r3, [r7, #20]
 8001b76:	2300      	movs	r3, #0
 8001b78:	82fb      	strh	r3, [r7, #22]
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	823b      	strh	r3, [r7, #16]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	827b      	strh	r3, [r7, #18]
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};
 8001b82:	2300      	movs	r3, #0
 8001b84:	81bb      	strh	r3, [r7, #12]
 8001b86:	2300      	movs	r3, #0
 8001b88:	81fb      	strh	r3, [r7, #14]
  
  FOCVars[bMotor].Iab = NULL_ab;
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	4a3c      	ldr	r2, [pc, #240]	; (8001c80 <FOC_Clear+0x118>)
 8001b8e:	2126      	movs	r1, #38	; 0x26
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	461a      	mov	r2, r3
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	4a37      	ldr	r2, [pc, #220]	; (8001c80 <FOC_Clear+0x118>)
 8001ba4:	2126      	movs	r1, #38	; 0x26
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	3304      	adds	r3, #4
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	4a31      	ldr	r2, [pc, #196]	; (8001c80 <FOC_Clear+0x118>)
 8001bbc:	2126      	movs	r1, #38	; 0x26
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	330c      	adds	r3, #12
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqdref = NULL_qd;
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <FOC_Clear+0x118>)
 8001bd4:	2126      	movs	r1, #38	; 0x26
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	3310      	adds	r3, #16
 8001bde:	461a      	mov	r2, r3
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	4a25      	ldr	r2, [pc, #148]	; (8001c80 <FOC_Clear+0x118>)
 8001bec:	2126      	movs	r1, #38	; 0x26
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	331e      	adds	r3, #30
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	801a      	strh	r2, [r3, #0]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	4a20      	ldr	r2, [pc, #128]	; (8001c80 <FOC_Clear+0x118>)
 8001bfe:	2126      	movs	r1, #38	; 0x26
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	3310      	adds	r3, #16
 8001c08:	3306      	adds	r3, #6
 8001c0a:	f107 0210 	add.w	r2, r7, #16
 8001c0e:	6810      	ldr	r0, [r2, #0]
 8001c10:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <FOC_Clear+0x118>)
 8001c16:	2126      	movs	r1, #38	; 0x26
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3318      	adds	r3, #24
 8001c20:	3302      	adds	r3, #2
 8001c22:	f107 020c 	add.w	r2, r7, #12
 8001c26:	6810      	ldr	r0, [r2, #0]
 8001c28:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <FOC_Clear+0x118>)
 8001c2e:	2126      	movs	r1, #38	; 0x26
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	3320      	adds	r3, #32
 8001c38:	2200      	movs	r2, #0
 8001c3a:	801a      	strh	r2, [r3, #0]

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <FOC_Clear+0x11c>)
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f008 f9a5 	bl	8009f96 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <FOC_Clear+0x120>)
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f008 f99d 	bl	8009f96 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <FOC_Clear+0x124>)
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f00a ff25 	bl	800cab4 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <FOC_Clear+0x128>)
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f008 fde6 	bl	800a844 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000ac0 	.word	0x20000ac0
 8001c84:	20000ab4 	.word	0x20000ab4
 8001c88:	20000b70 	.word	0x20000b70
 8001c8c:	20000b74 	.word	0x20000b74
 8001c90:	20000aac 	.word	0x20000aac

08001c94 <FOC_InitAdditionalMethods>:
  *         START_TO_RUN state
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
    
  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <FOC_CalcCurrRef+0x70>)
 8001cba:	2126      	movs	r1, #38	; 0x26
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3324      	adds	r3, #36	; 0x24
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d123      	bne.n	8001d12 <FOC_CalcCurrRef+0x66>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <FOC_CalcCurrRef+0x74>)
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	79fc      	ldrb	r4, [r7, #7]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00a ffe3 	bl	800cca0 <STC_CalcTorqueReference>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <FOC_CalcCurrRef+0x70>)
 8001ce0:	2326      	movs	r3, #38	; 0x26
 8001ce2:	fb03 f304 	mul.w	r3, r3, r4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	331e      	adds	r3, #30
 8001cea:	460a      	mov	r2, r1
 8001cec:	801a      	strh	r2, [r3, #0]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001cee:	79fa      	ldrb	r2, [r7, #7]
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	490a      	ldr	r1, [pc, #40]	; (8001d1c <FOC_CalcCurrRef+0x70>)
 8001cf4:	2026      	movs	r0, #38	; 0x26
 8001cf6:	fb00 f202 	mul.w	r2, r0, r2
 8001cfa:	440a      	add	r2, r1
 8001cfc:	321e      	adds	r2, #30
 8001cfe:	f9b2 0000 	ldrsh.w	r0, [r2]
 8001d02:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <FOC_CalcCurrRef+0x70>)
 8001d04:	2126      	movs	r1, #38	; 0x26
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3310      	adds	r3, #16
 8001d0e:	4602      	mov	r2, r0
 8001d10:	801a      	strh	r2, [r3, #0]

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000ac0 	.word	0x20000ac0
 8001d20:	20000b74 	.word	0x20000b74

08001d24 <TSK_SetChargeBootCapDelayM1>:
  *         for drivers boot capacitors charging of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
   hBootCapDelayCounterM1 = hTickCount;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <TSK_SetChargeBootCapDelayM1+0x1c>)
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	8013      	strh	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	20000736 	.word	0x20000736

08001d44 <TSK_ChargeBootCapDelayHasElapsedM1>:
  *         capacitors of motor 1 has elapsed
  * @param  none
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
  bool retVal = false;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if (hBootCapDelayCounterM1 == 0)
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <TSK_ChargeBootCapDelayHasElapsedM1+0x28>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <TSK_ChargeBootCapDelayHasElapsedM1+0x18>
  {
    retVal = true;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000736 	.word	0x20000736

08001d70 <TSK_SetStopPermanencyTimeM1>:
  *         time in STOP state of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	80fb      	strh	r3, [r7, #6]
  hStopPermanencyCounterM1 = hTickCount;
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <TSK_SetStopPermanencyTimeM1+0x1c>)
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	8013      	strh	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	20000738 	.word	0x20000738

08001d90 <TSK_StopPermanencyTimeHasElapsedM1>:
  *         of motor 1 has elapsed
  * @param  none
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
  bool retVal = false;
 8001d96:	2300      	movs	r3, #0
 8001d98:	71fb      	strb	r3, [r7, #7]
  if (hStopPermanencyCounterM1 == 0)
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <TSK_StopPermanencyTimeHasElapsedM1+0x28>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <TSK_StopPermanencyTimeHasElapsedM1+0x18>
  {
    retVal = true;
 8001da4:	2301      	movs	r3, #1
 8001da6:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 8001da8:	79fb      	ldrb	r3, [r7, #7]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000738 	.word	0x20000738

08001dbc <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  
  uint8_t bMotorNbr = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	75fb      	strb	r3, [r7, #23]
 

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001dc6:	4a35      	ldr	r2, [pc, #212]	; (8001e9c <TSK_HighFrequencyTask+0xe0>)
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	321a      	adds	r2, #26
 8001dcc:	6810      	ldr	r0, [r2, #0]
 8001dce:	6018      	str	r0, [r3, #0]
  if ( STM[M1].bState == SWITCH_OVER )
 8001dd0:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <TSK_HighFrequencyTask+0xe4>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b13      	cmp	r3, #19
 8001dd6:	d113      	bne.n	8001e00 <TSK_HighFrequencyTask+0x44>
  {
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001dd8:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <TSK_HighFrequencyTask+0xe8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f00a fd31 	bl	800c844 <REMNG_RampCompleted>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f083 0301 	eor.w	r3, r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d008      	beq.n	8001e00 <TSK_HighFrequencyTask+0x44>
    {
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8001dee:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <TSK_HighFrequencyTask+0xe8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f00a fc67 	bl	800c6c6 <REMNG_Calc>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	b21a      	sxth	r2, r3
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <TSK_HighFrequencyTask+0xe0>)
 8001dfe:	821a      	strh	r2, [r3, #16]
    }
  }
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_1 */
  hFOCreturn = FOC_CurrControllerM1();
 8001e00:	f000 f85a 	bl	8001eb8 <FOC_CurrControllerM1>
 8001e04:	4603      	mov	r3, r0
 8001e06:	82bb      	strh	r3, [r7, #20]
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_2 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_2 */
  if(hFOCreturn == MC_FOC_DURATION)
 8001e08:	8abb      	ldrh	r3, [r7, #20]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d105      	bne.n	8001e1a <TSK_HighFrequencyTask+0x5e>
  {
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2101      	movs	r1, #1
 8001e12:	4823      	ldr	r0, [pc, #140]	; (8001ea0 <TSK_HighFrequencyTask+0xe4>)
 8001e14:	f00b f974 	bl	800d100 <STM_FaultProcessing>
 8001e18:	e03a      	b.n	8001e90 <TSK_HighFrequencyTask+0xd4>
  }
  else
  {
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1); 
 8001e1a:	4823      	ldr	r0, [pc, #140]	; (8001ea8 <TSK_HighFrequencyTask+0xec>)
 8001e1c:	f00b ff02 	bl	800dc24 <RUC_FirstAccelerationStageReached>
 8001e20:	4603      	mov	r3, r0
 8001e22:	74fb      	strb	r3, [r7, #19]
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001e24:	4a1d      	ldr	r2, [pc, #116]	; (8001e9c <TSK_HighFrequencyTask+0xe0>)
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	3204      	adds	r2, #4
 8001e2c:	6810      	ldr	r0, [r2, #0]
 8001e2e:	6018      	str	r0, [r3, #0]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <TSK_HighFrequencyTask+0xf0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f007 fe11 	bl	8009a5c <VBS_GetAvBusVoltage_d>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	81bb      	strh	r3, [r7, #12]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	481b      	ldr	r0, [pc, #108]	; (8001eb0 <TSK_HighFrequencyTask+0xf4>)
 8001e44:	f00b ff24 	bl	800dc90 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001e48:	4819      	ldr	r0, [pc, #100]	; (8001eb0 <TSK_HighFrequencyTask+0xf4>)
 8001e4a:	f00c f8ad 	bl	800dfa8 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 8001e4e:	7cfb      	ldrb	r3, [r7, #19]
 8001e50:	f083 0301 	eor.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <TSK_HighFrequencyTask+0xa4>
    {
      STO_ResetPLL(&STO_PLL_M1);
 8001e5a:	4815      	ldr	r0, [pc, #84]	; (8001eb0 <TSK_HighFrequencyTask+0xf4>)
 8001e5c:	f00c f9e0 	bl	800e220 <STO_ResetPLL>
    }  
    hState = STM_GetState(&STM[M1]);
 8001e60:	480f      	ldr	r0, [pc, #60]	; (8001ea0 <TSK_HighFrequencyTask+0xe4>)
 8001e62:	f00b f98b 	bl	800d17c <STM_GetState>
 8001e66:	4603      	mov	r3, r0
 8001e68:	823b      	strh	r3, [r7, #16]
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8001e6a:	8a3b      	ldrh	r3, [r7, #16]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d005      	beq.n	8001e7c <TSK_HighFrequencyTask+0xc0>
 8001e70:	8a3b      	ldrh	r3, [r7, #16]
 8001e72:	2b13      	cmp	r3, #19
 8001e74:	d002      	beq.n	8001e7c <TSK_HighFrequencyTask+0xc0>
 8001e76:	8a3b      	ldrh	r3, [r7, #16]
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d109      	bne.n	8001e90 <TSK_HighFrequencyTask+0xd4>
    {
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);      
 8001e7c:	480c      	ldr	r0, [pc, #48]	; (8001eb0 <TSK_HighFrequencyTask+0xf4>)
 8001e7e:	f00a fd24 	bl	800c8ca <SPD_GetElAngle>
 8001e82:	4603      	mov	r3, r0
 8001e84:	807b      	strh	r3, [r7, #2]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);  
 8001e86:	1cbb      	adds	r3, r7, #2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	480a      	ldr	r0, [pc, #40]	; (8001eb4 <TSK_HighFrequencyTask+0xf8>)
 8001e8c:	f00b fbe9 	bl	800d662 <VSS_CalcElAngle>
  }
  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  return bMotorNbr;
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000ac0 	.word	0x20000ac0
 8001ea0:	20000b60 	.word	0x20000b60
 8001ea4:	20000b68 	.word	0x20000b68
 8001ea8:	200001cc 	.word	0x200001cc
 8001eac:	20000b40 	.word	0x20000b40
 8001eb0:	200002f4 	.word	0x200002f4
 8001eb4:	200002bc 	.word	0x200002bc

08001eb8 <FOC_CurrControllerM1>:
  * @param this related object of class CFOC.
  * @retval int16_t It returns MC_NO_FAULTS if the FOC has been ended before
  *         next PWM Update event, MC_FOC_DURATION otherwise
  */
inline uint16_t FOC_CurrControllerM1(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001ebe:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <FOC_CurrControllerM1+0x120>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f00a fdea 	bl	800ca9c <STC_GetSpeedSensor>
 8001ec8:	61f8      	str	r0, [r7, #28]
  hElAngle = SPD_GetElAngle(speedHandle);
 8001eca:	69f8      	ldr	r0, [r7, #28]
 8001ecc:	f00a fcfd 	bl	800c8ca <SPD_GetElAngle>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	837b      	strh	r3, [r7, #26]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001ed4:	69f8      	ldr	r0, [r7, #28]
 8001ed6:	f00a fd12 	bl	800c8fe <SPD_GetInstElSpeedDpp>
 8001eda:	2300      	movs	r3, #0
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	8b7b      	ldrh	r3, [r7, #26]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	837b      	strh	r3, [r7, #26]
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	; (8001fdc <FOC_CurrControllerM1+0x124>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f107 020c 	add.w	r2, r7, #12
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f008 fa90 	bl	800a416 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f7ff f953 	bl	80011a2 <MCM_Clarke>
 8001efc:	4603      	mov	r3, r0
 8001efe:	60bb      	str	r3, [r7, #8]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001f00:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f04:	4619      	mov	r1, r3
 8001f06:	68b8      	ldr	r0, [r7, #8]
 8001f08:	f7ff f995 	bl	8001236 <MCM_Park>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	617b      	str	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001f10:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <FOC_CurrControllerM1+0x128>)
 8001f12:	681a      	ldr	r2, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001f14:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <FOC_CurrControllerM1+0x12c>)
 8001f16:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001f20:	1acb      	subs	r3, r1, r3
 8001f22:	4619      	mov	r1, r3
 8001f24:	4610      	mov	r0, r2
 8001f26:	f008 f879 	bl	800a01c <PI_Controller>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	823b      	strh	r3, [r7, #16]

  Vqd.d = PI_Controller(pPIDId[M1],
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <FOC_CurrControllerM1+0x130>)
 8001f30:	681a      	ldr	r2, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001f32:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <FOC_CurrControllerM1+0x12c>)
 8001f34:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001f3e:	1acb      	subs	r3, r1, r3
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f008 f86a 	bl	800a01c <PI_Controller>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	827b      	strh	r3, [r7, #18]
  
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <FOC_CurrControllerM1+0x134>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6939      	ldr	r1, [r7, #16]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f007 fda7 	bl	8009aa6 <Circle_Limitation>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	613b      	str	r3, [r7, #16]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001f5c:	69f8      	ldr	r0, [r7, #28]
 8001f5e:	f00a fcce 	bl	800c8fe <SPD_GetInstElSpeedDpp>
 8001f62:	2300      	movs	r3, #0
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	8b7b      	ldrh	r3, [r7, #26]
 8001f68:	4413      	add	r3, r2
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	837b      	strh	r3, [r7, #26]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001f6e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f72:	4619      	mov	r1, r3
 8001f74:	6938      	ldr	r0, [r7, #16]
 8001f76:	f7ff f9d6 	bl	8001326 <MCM_Rev_Park>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	607b      	str	r3, [r7, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <FOC_CurrControllerM1+0x124>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f008 fa54 	bl	800a432 <PWMC_SetPhaseVoltage>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	833b      	strh	r3, [r7, #24]
  FOCVars[M1].Vqd = Vqd;
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <FOC_CurrControllerM1+0x12c>)
 8001f90:	3316      	adds	r3, #22
 8001f92:	f107 0210 	add.w	r2, r7, #16
 8001f96:	6810      	ldr	r0, [r2, #0]
 8001f98:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iab = Iab;
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <FOC_CurrControllerM1+0x12c>)
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	6818      	ldr	r0, [r3, #0]
 8001fa4:	6010      	str	r0, [r2, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <FOC_CurrControllerM1+0x12c>)
 8001fa8:	3304      	adds	r3, #4
 8001faa:	f107 0208 	add.w	r2, r7, #8
 8001fae:	6810      	ldr	r0, [r2, #0]
 8001fb0:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iqd = Iqd;
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <FOC_CurrControllerM1+0x12c>)
 8001fb4:	330c      	adds	r3, #12
 8001fb6:	f107 0214 	add.w	r2, r7, #20
 8001fba:	6810      	ldr	r0, [r2, #0]
 8001fbc:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <FOC_CurrControllerM1+0x12c>)
 8001fc0:	331a      	adds	r3, #26
 8001fc2:	1d3a      	adds	r2, r7, #4
 8001fc4:	6810      	ldr	r0, [r2, #0]
 8001fc6:	6018      	str	r0, [r3, #0]
  FOCVars[M1].hElAngle = hElAngle;
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <FOC_CurrControllerM1+0x12c>)
 8001fca:	8b7b      	ldrh	r3, [r7, #26]
 8001fcc:	8413      	strh	r3, [r2, #32]
  return(hCodeError);
 8001fce:	8b3b      	ldrh	r3, [r7, #24]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000b74 	.word	0x20000b74
 8001fdc:	20000aac 	.word	0x20000aac
 8001fe0:	20000ab4 	.word	0x20000ab4
 8001fe4:	20000ac0 	.word	0x20000ac0
 8001fe8:	20000b70 	.word	0x20000b70
 8001fec:	20000b3c 	.word	0x20000b3c

08001ff0 <TSK_SafetyTask>:
  * @brief  Executes safety checks (e.g. bus voltage and temperature) for all drive instances. 
  *
  * Faults flags are updated here.
  */
__weak void TSK_SafetyTask(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_SafetyTask 0 */

  /* USER CODE END TSK_SafetyTask 0 */
  if (bMCBootCompleted == 1)
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <TSK_SafetyTask+0x1c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d104      	bne.n	8002006 <TSK_SafetyTask+0x16>
  {  
    TSK_SafetyTask_PWMOFF(M1);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f000 f807 	bl	8002010 <TSK_SafetyTask_PWMOFF>
    /* User conversion execution */
    RCM_ExecUserConv ();
 8002002:	f001 f9a3 	bl	800334c <RCM_ExecUserConv>
  /* USER CODE BEGIN TSK_SafetyTask 1 */

  /* USER CODE END TSK_SafetyTask 1 */
  }
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	2000073a 	.word	0x2000073a

08002010 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  
  uint16_t CodeReturn = MC_NO_ERROR;
 800201a:	2300      	movs	r3, #0
 800201c:	81fb      	strh	r3, [r7, #14]
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
 800201e:	230e      	movs	r3, #14
 8002020:	81bb      	strh	r3, [r7, #12]

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	f107 0210 	add.w	r2, r7, #16
 800202a:	4413      	add	r3, r2
 800202c:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	4a38      	ldr	r2, [pc, #224]	; (8002114 <TSK_SafetyTask_PWMOFF+0x104>)
 8002034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002038:	4618      	mov	r0, r3
 800203a:	f007 fee4 	bl	8009e06 <NTC_CalcAvTemp>
 800203e:	4603      	mov	r3, r0
 8002040:	4023      	ands	r3, r4
 8002042:	b29b      	uxth	r3, r3
 8002044:	b21a      	sxth	r2, r3
 8002046:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800204a:	4313      	orrs	r3, r2
 800204c:	b21b      	sxth	r3, r3
 800204e:	81fb      	strh	r3, [r7, #14]
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	4a31      	ldr	r2, [pc, #196]	; (8002118 <TSK_SafetyTask_PWMOFF+0x108>)
 8002054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002058:	4618      	mov	r0, r3
 800205a:	f008 fc42 	bl	800a8e2 <PWMC_CheckOverCurrent>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	89fb      	ldrh	r3, [r7, #14]
 8002064:	4313      	orrs	r3, r2
 8002066:	81fb      	strh	r3, [r7, #14]
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d114      	bne.n	8002098 <TSK_SafetyTask_PWMOFF+0x88>
  {
    CodeReturn |=  errMask[bMotor] & RVBS_CalcAvVbusFilt(pBusSensorM1);
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	f107 0210 	add.w	r2, r7, #16
 8002076:	4413      	add	r3, r2
 8002078:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <TSK_SafetyTask_PWMOFF+0x10c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f00a fa88 	bl	800c596 <RVBS_CalcAvVbusFilt>
 8002086:	4603      	mov	r3, r0
 8002088:	4023      	ands	r3, r4
 800208a:	b29b      	uxth	r3, r3
 800208c:	b21a      	sxth	r2, r3
 800208e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002092:	4313      	orrs	r3, r2
 8002094:	b21b      	sxth	r3, r3
 8002096:	81fb      	strh	r3, [r7, #14]
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8002098:	79fa      	ldrb	r2, [r7, #7]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <TSK_SafetyTask_PWMOFF+0x110>)
 80020a4:	1898      	adds	r0, r3, r2
 80020a6:	89fb      	ldrh	r3, [r7, #14]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	89fb      	ldrh	r3, [r7, #14]
 80020ae:	4619      	mov	r1, r3
 80020b0:	f00b f826 	bl	800d100 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80020b4:	79fa      	ldrb	r2, [r7, #7]
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4a18      	ldr	r2, [pc, #96]	; (8002120 <TSK_SafetyTask_PWMOFF+0x110>)
 80020c0:	4413      	add	r3, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f00b f85a 	bl	800d17c <STM_GetState>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b0a      	cmp	r3, #10
 80020cc:	d002      	beq.n	80020d4 <TSK_SafetyTask_PWMOFF+0xc4>
 80020ce:	2b0b      	cmp	r3, #11
 80020d0:	d013      	beq.n	80020fa <TSK_SafetyTask_PWMOFF+0xea>
	/* USER CODE BEGIN TSK_SafetyTask_PWMOFF 2 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 2 */
    break;
  default:
    break;
 80020d2:	e01a      	b.n	800210a <TSK_SafetyTask_PWMOFF+0xfa>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <TSK_SafetyTask_PWMOFF+0x108>)
 80020d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020dc:	4618      	mov	r0, r3
 80020de:	f008 fbb1 	bl	800a844 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fd3f 	bl	8001b68 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <TSK_SafetyTask_PWMOFF+0x114>)
 80020ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f007 fdc1 	bl	8009c7a <MPM_Clear>
    break;
 80020f8:	e007      	b.n	800210a <TSK_SafetyTask_PWMOFF+0xfa>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	4a06      	ldr	r2, [pc, #24]	; (8002118 <TSK_SafetyTask_PWMOFF+0x108>)
 80020fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002102:	4618      	mov	r0, r3
 8002104:	f008 fb9e 	bl	800a844 <PWMC_SwitchOffPWM>
    break;
 8002108:	bf00      	nop
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}
 8002112:	bf00      	nop
 8002114:	20000aa8 	.word	0x20000aa8
 8002118:	20000aac 	.word	0x20000aac
 800211c:	20000b40 	.word	0x20000b40
 8002120:	20000b60 	.word	0x20000b60
 8002124:	20000b6c 	.word	0x20000b6c

08002128 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected  
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <TSK_HardwareFaultTask+0x1c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f009 fdc5 	bl	800bcc0 <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	4803      	ldr	r0, [pc, #12]	; (8002148 <TSK_HardwareFaultTask+0x20>)
 800213c:	f00a ffe0 	bl	800d100 <STM_FaultProcessing>
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000aac 	.word	0x20000aac
 8002148:	20000b60 	.word	0x20000b60

0800214c <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration 
  */
__weak void mc_lock_pins (void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 8002150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002154:	4824      	ldr	r0, [pc, #144]	; (80021e8 <mc_lock_pins+0x9c>)
 8002156:	f7ff f9b1 	bl	80014bc <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
 800215a:	2108      	movs	r1, #8
 800215c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002160:	f7ff f9ac 	bl	80014bc <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
 8002164:	2104      	movs	r1, #4
 8002166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216a:	f7ff f9a7 	bl	80014bc <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
 800216e:	2102      	movs	r1, #2
 8002170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002174:	f7ff f9a2 	bl	80014bc <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
 8002178:	2101      	movs	r1, #1
 800217a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217e:	f7ff f99d 	bl	80014bc <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_V_GPIO_Port, M1_CURR_SHUNT_V_Pin);
 8002182:	2101      	movs	r1, #1
 8002184:	4818      	ldr	r0, [pc, #96]	; (80021e8 <mc_lock_pins+0x9c>)
 8002186:	f7ff f999 	bl	80014bc <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_W_GPIO_Port, M1_CURR_SHUNT_W_Pin);
 800218a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800218e:	4816      	ldr	r0, [pc, #88]	; (80021e8 <mc_lock_pins+0x9c>)
 8002190:	f7ff f994 	bl	80014bc <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_U_GPIO_Port, M1_CURR_SHUNT_U_Pin);
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219a:	f7ff f98f 	bl	80014bc <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 800219e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a6:	f7ff f989 	bl	80014bc <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 80021aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b2:	f7ff f983 	bl	80014bc <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 80021b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021be:	f7ff f97d 	bl	80014bc <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 80021c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ca:	f7ff f977 	bl	80014bc <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 80021ce:	2102      	movs	r1, #2
 80021d0:	4805      	ldr	r0, [pc, #20]	; (80021e8 <mc_lock_pins+0x9c>)
 80021d2:	f7ff f973 	bl	80014bc <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 80021d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021de:	f7ff f96d 	bl	80014bc <LL_GPIO_LockPin>
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	48000400 	.word	0x48000400

080021ec <MCP_Init>:
               FCP_Handle_t * pFCP,
               FCP_SendFct_t fFcpSend, 
               FCP_ReceiveFct_t fFcpReceive, 
               FCP_AbortReceiveFct_t fFcpAbortReceive, 
               const char* s_fwVer )
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  pHandle->pFCP = pFCP;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	619a      	str	r2, [r3, #24]
  pHandle->s_fwVer = s_fwVer;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <MCP_Init+0x4c>)
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <MCP_Init+0x50>)
 800220e:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <MCP_Init+0x54>)
 8002210:	68f9      	ldr	r1, [r7, #12]
 8002212:	68b8      	ldr	r0, [r7, #8]
 8002214:	f007 fcdb 	bl	8009bce <FCP_SetClient>
                 (FCP_SentFrameCallback_t) & MCP_SentFrame,
                 (FCP_ReceivedFrameCallback_t) & MCP_ReceivedFrame,
                 (FCP_RxTimeoutCallback_t) & MCP_OnTimeOut );
  pHandle->fFcpSend = fFcpSend;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	61da      	str	r2, [r3, #28]
  pHandle->fFcpReceive = fFcpReceive;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	621a      	str	r2, [r3, #32]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

  MCP_WaitNextFrame(pHandle);
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f815 	bl	800225a <MCP_WaitNextFrame>
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	08002245 	.word	0x08002245
 800223c:	080022ad 	.word	0x080022ad
 8002240:	0800228b 	.word	0x0800228b

08002244 <MCP_OnTimeOut>:
* @brief  Function used to set and report the Time Out.
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_OnTimeOut(MCP_Handle_t *pHandle)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
     MCP_WaitNextFrame(pHandle);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f804 	bl	800225a <MCP_WaitNextFrame>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <MCP_WaitNextFrame>:
* @brief  Function used to check next reception frame
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_WaitNextFrame(MCP_Handle_t *pHandle)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6992      	ldr	r2, [r2, #24]
 800226a:	4610      	mov	r0, r2
 800226c:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6992      	ldr	r2, [r2, #24]
 800227e:	4610      	mov	r0, r2
 8002280:	4798      	blx	r3
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <MCP_SentFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_SentFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	461a      	mov	r2, r3
 8002296:	460b      	mov	r3, r1
 8002298:	72fb      	strb	r3, [r7, #11]
 800229a:	4613      	mov	r3, r2
 800229c:	72bb      	strb	r3, [r7, #10]
    MCP_WaitNextFrame(pHandle);
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f7ff ffdb 	bl	800225a <MCP_WaitNextFrame>
}
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b0a9      	sub	sp, #164	; 0xa4
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	461a      	mov	r2, r3
 80022b8:	460b      	mov	r3, r1
 80022ba:	72fb      	strb	r3, [r7, #11]
 80022bc:	4613      	mov	r3, r2
 80022be:	72bb      	strb	r3, [r7, #10]
  bool RequireAck = true;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  bool bNoError = false; // Default is error
 80022c6:	2300      	movs	r3, #0
 80022c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  if (bMotorSelection != 0)
 80022d4:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d014      	beq.n	8002306 <MCP_ReceivedFrame+0x5a>
  {
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80022e2:	3b01      	subs	r3, #1
 80022e4:	461a      	mov	r2, r3
 80022e6:	2100      	movs	r1, #0
 80022e8:	f001 fd2e 	bl	8003d48 <UI_SetReg>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d004      	beq.n	80022fc <MCP_ReceivedFrame+0x50>
    {
      Code &= 0x1F; /* Mask: 0001|1111 */
 80022f2:	7afb      	ldrb	r3, [r7, #11]
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	72fb      	strb	r3, [r7, #11]
 80022fa:	e004      	b.n	8002306 <MCP_ReceivedFrame+0x5a>

    }
    else
    {
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
 80022fc:	2300      	movs	r3, #0
 80022fe:	72fb      	strb	r3, [r7, #11]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8002300:	230b      	movs	r3, #11
 8002302:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }
  }

  switch (Code)
 8002306:	7afb      	ldrb	r3, [r7, #11]
 8002308:	2b12      	cmp	r3, #18
 800230a:	f200 8543 	bhi.w	8002d94 <MCP_ReceivedFrame+0xae8>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <MCP_ReceivedFrame+0x68>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002d9d 	.word	0x08002d9d
 8002318:	08002361 	.word	0x08002361
 800231c:	08002661 	.word	0x08002661
 8002320:	08002999 	.word	0x08002999
 8002324:	08002d95 	.word	0x08002d95
 8002328:	08002d95 	.word	0x08002d95
 800232c:	080029bd 	.word	0x080029bd
 8002330:	08002a81 	.word	0x08002a81
 8002334:	08002b33 	.word	0x08002b33
 8002338:	08002bd3 	.word	0x08002bd3
 800233c:	08002c7b 	.word	0x08002c7b
 8002340:	08002cc9 	.word	0x08002cc9
 8002344:	08002d0f 	.word	0x08002d0f
 8002348:	08002ad7 	.word	0x08002ad7
 800234c:	08002d95 	.word	0x08002d95
 8002350:	08002d95 	.word	0x08002d95
 8002354:	08002d95 	.word	0x08002d95
 8002358:	08002d95 	.word	0x08002d95
 800235c:	08002d9d 	.word	0x08002d9d
  {
  case MC_PROTOCOL_CODE_SET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
      bErrorCode = ERROR_CODE_WRONG_SET;
 8002368:	2305      	movs	r3, #5
 800236a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

      switch (bRegID)
 800236e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002372:	2b88      	cmp	r3, #136	; 0x88
 8002374:	f200 816f 	bhi.w	8002656 <MCP_ReceivedFrame+0x3aa>
 8002378:	a201      	add	r2, pc, #4	; (adr r2, 8002380 <MCP_ReceivedFrame+0xd4>)
 800237a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237e:	bf00      	nop
 8002380:	080025a5 	.word	0x080025a5
 8002384:	08002657 	.word	0x08002657
 8002388:	08002657 	.word	0x08002657
 800238c:	080025c3 	.word	0x080025c3
 8002390:	08002657 	.word	0x08002657
 8002394:	080025ef 	.word	0x080025ef
 8002398:	080025ef 	.word	0x080025ef
 800239c:	080025ef 	.word	0x080025ef
 80023a0:	080025ef 	.word	0x080025ef
 80023a4:	080025ef 	.word	0x080025ef
 80023a8:	080025ef 	.word	0x080025ef
 80023ac:	080025ef 	.word	0x080025ef
 80023b0:	080025ef 	.word	0x080025ef
 80023b4:	080025ef 	.word	0x080025ef
 80023b8:	080025ef 	.word	0x080025ef
 80023bc:	080025ef 	.word	0x080025ef
 80023c0:	08002619 	.word	0x08002619
 80023c4:	08002619 	.word	0x08002619
 80023c8:	08002657 	.word	0x08002657
 80023cc:	08002657 	.word	0x08002657
 80023d0:	080025ef 	.word	0x080025ef
 80023d4:	080025ef 	.word	0x080025ef
 80023d8:	080025ef 	.word	0x080025ef
 80023dc:	080025ef 	.word	0x080025ef
 80023e0:	080025ef 	.word	0x080025ef
 80023e4:	08002657 	.word	0x08002657
 80023e8:	08002657 	.word	0x08002657
 80023ec:	08002657 	.word	0x08002657
 80023f0:	080025df 	.word	0x080025df
 80023f4:	080025e7 	.word	0x080025e7
 80023f8:	08002657 	.word	0x08002657
 80023fc:	08002657 	.word	0x08002657
 8002400:	08002657 	.word	0x08002657
 8002404:	08002657 	.word	0x08002657
 8002408:	08002657 	.word	0x08002657
 800240c:	08002657 	.word	0x08002657
 8002410:	08002657 	.word	0x08002657
 8002414:	08002657 	.word	0x08002657
 8002418:	08002657 	.word	0x08002657
 800241c:	08002657 	.word	0x08002657
 8002420:	08002657 	.word	0x08002657
 8002424:	08002657 	.word	0x08002657
 8002428:	08002657 	.word	0x08002657
 800242c:	08002657 	.word	0x08002657
 8002430:	08002657 	.word	0x08002657
 8002434:	08002657 	.word	0x08002657
 8002438:	08002657 	.word	0x08002657
 800243c:	08002657 	.word	0x08002657
 8002440:	08002657 	.word	0x08002657
 8002444:	08002657 	.word	0x08002657
 8002448:	08002657 	.word	0x08002657
 800244c:	08002657 	.word	0x08002657
 8002450:	08002657 	.word	0x08002657
 8002454:	08002657 	.word	0x08002657
 8002458:	08002657 	.word	0x08002657
 800245c:	08002657 	.word	0x08002657
 8002460:	08002657 	.word	0x08002657
 8002464:	08002657 	.word	0x08002657
 8002468:	08002657 	.word	0x08002657
 800246c:	08002657 	.word	0x08002657
 8002470:	08002657 	.word	0x08002657
 8002474:	08002657 	.word	0x08002657
 8002478:	08002657 	.word	0x08002657
 800247c:	08002657 	.word	0x08002657
 8002480:	08002657 	.word	0x08002657
 8002484:	080025ef 	.word	0x080025ef
 8002488:	08002657 	.word	0x08002657
 800248c:	08002657 	.word	0x08002657
 8002490:	08002657 	.word	0x08002657
 8002494:	08002657 	.word	0x08002657
 8002498:	08002619 	.word	0x08002619
 800249c:	08002619 	.word	0x08002619
 80024a0:	08002619 	.word	0x08002619
 80024a4:	08002657 	.word	0x08002657
 80024a8:	08002657 	.word	0x08002657
 80024ac:	08002657 	.word	0x08002657
 80024b0:	08002657 	.word	0x08002657
 80024b4:	08002657 	.word	0x08002657
 80024b8:	08002657 	.word	0x08002657
 80024bc:	080025ef 	.word	0x080025ef
 80024c0:	08002657 	.word	0x08002657
 80024c4:	08002657 	.word	0x08002657
 80024c8:	08002657 	.word	0x08002657
 80024cc:	080025ef 	.word	0x080025ef
 80024d0:	080025ef 	.word	0x080025ef
 80024d4:	080025ef 	.word	0x080025ef
 80024d8:	080025ef 	.word	0x080025ef
 80024dc:	080025ef 	.word	0x080025ef
 80024e0:	080025ef 	.word	0x080025ef
 80024e4:	080025ef 	.word	0x080025ef
 80024e8:	08002657 	.word	0x08002657
 80024ec:	08002619 	.word	0x08002619
 80024f0:	08002657 	.word	0x08002657
 80024f4:	08002657 	.word	0x08002657
 80024f8:	08002657 	.word	0x08002657
 80024fc:	08002657 	.word	0x08002657
 8002500:	08002657 	.word	0x08002657
 8002504:	080025ef 	.word	0x080025ef
 8002508:	08002657 	.word	0x08002657
 800250c:	08002657 	.word	0x08002657
 8002510:	080025ef 	.word	0x080025ef
 8002514:	080025ef 	.word	0x080025ef
 8002518:	08002657 	.word	0x08002657
 800251c:	08002657 	.word	0x08002657
 8002520:	08002657 	.word	0x08002657
 8002524:	08002657 	.word	0x08002657
 8002528:	08002657 	.word	0x08002657
 800252c:	08002657 	.word	0x08002657
 8002530:	08002657 	.word	0x08002657
 8002534:	08002657 	.word	0x08002657
 8002538:	08002657 	.word	0x08002657
 800253c:	08002657 	.word	0x08002657
 8002540:	08002657 	.word	0x08002657
 8002544:	08002657 	.word	0x08002657
 8002548:	08002657 	.word	0x08002657
 800254c:	08002657 	.word	0x08002657
 8002550:	080025c3 	.word	0x080025c3
 8002554:	08002619 	.word	0x08002619
 8002558:	08002619 	.word	0x08002619
 800255c:	08002619 	.word	0x08002619
 8002560:	08002619 	.word	0x08002619
 8002564:	08002619 	.word	0x08002619
 8002568:	08002657 	.word	0x08002657
 800256c:	08002657 	.word	0x08002657
 8002570:	08002657 	.word	0x08002657
 8002574:	08002619 	.word	0x08002619
 8002578:	08002619 	.word	0x08002619
 800257c:	08002657 	.word	0x08002657
 8002580:	08002657 	.word	0x08002657
 8002584:	08002657 	.word	0x08002657
 8002588:	08002657 	.word	0x08002657
 800258c:	08002657 	.word	0x08002657
 8002590:	08002657 	.word	0x08002657
 8002594:	08002657 	.word	0x08002657
 8002598:	080025ef 	.word	0x080025ef
 800259c:	080025ef 	.word	0x080025ef
 80025a0:	080025ef 	.word	0x080025ef
      {
      case MC_PROTOCOL_REG_TARGET_MOTOR:
        {
          /* Deprecated */
          int32_t wValue = (int32_t)(buffer[1]);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3301      	adds	r3, #1
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	663b      	str	r3, [r7, #96]	; 0x60

          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 80025b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 fbc7 	bl	8003d48 <UI_SetReg>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 80025c0:	e04d      	b.n	800265e <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_CONTROL_MODE:
      case MC_PROTOCOL_REG_SC_PP:
        {
          /* 8bit variables */
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3301      	adds	r3, #1
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025d0:	4619      	mov	r1, r3
 80025d2:	f001 fbb9 	bl	8003d48 <UI_SetReg>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 80025dc:	e03f      	b.n	800265e <MCP_ReceivedFrame+0x3b2>

      case MC_PROTOCOL_REG_DAC_OUT1:
        {
          bNoError = true; /* No check inside class return always true*/
 80025de:	2301      	movs	r3, #1
 80025e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 80025e4:	e03b      	b.n	800265e <MCP_ReceivedFrame+0x3b2>

      case MC_PROTOCOL_REG_DAC_OUT2:
        {
          bNoError = true; /* No check inside class return always true*/
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 80025ec:	e037      	b.n	800265e <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          /* 16bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3301      	adds	r3, #1
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3302      	adds	r3, #2
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	4413      	add	r3, r2
 8002600:	667b      	str	r3, [r7, #100]	; 0x64
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8002608:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800260a:	4618      	mov	r0, r3
 800260c:	f001 fb9c 	bl	8003d48 <UI_SetReg>
 8002610:	4603      	mov	r3, r0
 8002612:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002616:	e022      	b.n	800265e <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_SC_CURRBANDWIDTH:
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
        {
          /* 32bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3301      	adds	r3, #1
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3302      	adds	r3, #2
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	441a      	add	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3303      	adds	r3, #3
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	041b      	lsls	r3, r3, #16
 8002632:	441a      	add	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	061b      	lsls	r3, r3, #24
 800263c:	4413      	add	r3, r2
 800263e:	66bb      	str	r3, [r7, #104]	; 0x68
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8002646:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002648:	4618      	mov	r0, r3
 800264a:	f001 fb7d 	bl	8003d48 <UI_SetReg>
 800264e:	4603      	mov	r3, r0
 8002650:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002654:	e003      	b.n	800265e <MCP_ReceivedFrame+0x3b2>

      default:
        {
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8002656:	2302      	movs	r3, #2
 8002658:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        }
        break;
 800265c:	bf00      	nop
      }
    }
    break;
 800265e:	e3a0      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_GET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8002668:	2303      	movs	r3, #3
 800266a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

      switch (bRegID)
 800266e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002672:	2b88      	cmp	r3, #136	; 0x88
 8002674:	f200 8182 	bhi.w	800297c <MCP_ReceivedFrame+0x6d0>
 8002678:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <MCP_ReceivedFrame+0x3d4>)
 800267a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267e:	bf00      	nop
 8002680:	080028a5 	.word	0x080028a5
 8002684:	08002911 	.word	0x08002911
 8002688:	080028a5 	.word	0x080028a5
 800268c:	080028a5 	.word	0x080028a5
 8002690:	08002911 	.word	0x08002911
 8002694:	080028db 	.word	0x080028db
 8002698:	080028db 	.word	0x080028db
 800269c:	080028db 	.word	0x080028db
 80026a0:	080028db 	.word	0x080028db
 80026a4:	080028db 	.word	0x080028db
 80026a8:	080028db 	.word	0x080028db
 80026ac:	080028db 	.word	0x080028db
 80026b0:	080028db 	.word	0x080028db
 80026b4:	080028db 	.word	0x080028db
 80026b8:	080028db 	.word	0x080028db
 80026bc:	080028db 	.word	0x080028db
 80026c0:	080028db 	.word	0x080028db
 80026c4:	080028db 	.word	0x080028db
 80026c8:	080028db 	.word	0x080028db
 80026cc:	080028db 	.word	0x080028db
 80026d0:	080028db 	.word	0x080028db
 80026d4:	080028db 	.word	0x080028db
 80026d8:	080028db 	.word	0x080028db
 80026dc:	080028db 	.word	0x080028db
 80026e0:	080028db 	.word	0x080028db
 80026e4:	080028db 	.word	0x080028db
 80026e8:	080028db 	.word	0x080028db
 80026ec:	080028db 	.word	0x080028db
 80026f0:	08002985 	.word	0x08002985
 80026f4:	08002985 	.word	0x08002985
 80026f8:	08002911 	.word	0x08002911
 80026fc:	080028db 	.word	0x080028db
 8002700:	080028db 	.word	0x080028db
 8002704:	080028db 	.word	0x080028db
 8002708:	080028a5 	.word	0x080028a5
 800270c:	0800297d 	.word	0x0800297d
 8002710:	0800297d 	.word	0x0800297d
 8002714:	0800297d 	.word	0x0800297d
 8002718:	0800297d 	.word	0x0800297d
 800271c:	0800297d 	.word	0x0800297d
 8002720:	0800297d 	.word	0x0800297d
 8002724:	0800297d 	.word	0x0800297d
 8002728:	0800297d 	.word	0x0800297d
 800272c:	0800297d 	.word	0x0800297d
 8002730:	0800297d 	.word	0x0800297d
 8002734:	0800297d 	.word	0x0800297d
 8002738:	0800297d 	.word	0x0800297d
 800273c:	0800297d 	.word	0x0800297d
 8002740:	0800297d 	.word	0x0800297d
 8002744:	0800297d 	.word	0x0800297d
 8002748:	0800297d 	.word	0x0800297d
 800274c:	0800297d 	.word	0x0800297d
 8002750:	0800297d 	.word	0x0800297d
 8002754:	0800297d 	.word	0x0800297d
 8002758:	0800297d 	.word	0x0800297d
 800275c:	0800297d 	.word	0x0800297d
 8002760:	0800297d 	.word	0x0800297d
 8002764:	0800297d 	.word	0x0800297d
 8002768:	0800297d 	.word	0x0800297d
 800276c:	0800297d 	.word	0x0800297d
 8002770:	0800297d 	.word	0x0800297d
 8002774:	0800297d 	.word	0x0800297d
 8002778:	0800297d 	.word	0x0800297d
 800277c:	0800297d 	.word	0x0800297d
 8002780:	0800297d 	.word	0x0800297d
 8002784:	080028db 	.word	0x080028db
 8002788:	0800297d 	.word	0x0800297d
 800278c:	0800297d 	.word	0x0800297d
 8002790:	0800297d 	.word	0x0800297d
 8002794:	0800297d 	.word	0x0800297d
 8002798:	08002911 	.word	0x08002911
 800279c:	08002911 	.word	0x08002911
 80027a0:	08002911 	.word	0x08002911
 80027a4:	080028db 	.word	0x080028db
 80027a8:	080028db 	.word	0x080028db
 80027ac:	080028db 	.word	0x080028db
 80027b0:	080028db 	.word	0x080028db
 80027b4:	080028a5 	.word	0x080028a5
 80027b8:	08002911 	.word	0x08002911
 80027bc:	080028db 	.word	0x080028db
 80027c0:	080028db 	.word	0x080028db
 80027c4:	080028db 	.word	0x080028db
 80027c8:	080028db 	.word	0x080028db
 80027cc:	080028db 	.word	0x080028db
 80027d0:	080028db 	.word	0x080028db
 80027d4:	080028db 	.word	0x080028db
 80027d8:	080028db 	.word	0x080028db
 80027dc:	080028db 	.word	0x080028db
 80027e0:	080028db 	.word	0x080028db
 80027e4:	080028db 	.word	0x080028db
 80027e8:	080028a5 	.word	0x080028a5
 80027ec:	08002911 	.word	0x08002911
 80027f0:	0800297d 	.word	0x0800297d
 80027f4:	080028db 	.word	0x080028db
 80027f8:	080028db 	.word	0x080028db
 80027fc:	080028db 	.word	0x080028db
 8002800:	080028db 	.word	0x080028db
 8002804:	080028db 	.word	0x080028db
 8002808:	0800297d 	.word	0x0800297d
 800280c:	0800297d 	.word	0x0800297d
 8002810:	080028db 	.word	0x080028db
 8002814:	080028db 	.word	0x080028db
 8002818:	080028a5 	.word	0x080028a5
 800281c:	080028a5 	.word	0x080028a5
 8002820:	08002911 	.word	0x08002911
 8002824:	08002911 	.word	0x08002911
 8002828:	08002911 	.word	0x08002911
 800282c:	08002911 	.word	0x08002911
 8002830:	08002911 	.word	0x08002911
 8002834:	080028a5 	.word	0x080028a5
 8002838:	080028db 	.word	0x080028db
 800283c:	080028db 	.word	0x080028db
 8002840:	08002911 	.word	0x08002911
 8002844:	0800297d 	.word	0x0800297d
 8002848:	080028db 	.word	0x080028db
 800284c:	080028db 	.word	0x080028db
 8002850:	080028a5 	.word	0x080028a5
 8002854:	08002911 	.word	0x08002911
 8002858:	08002911 	.word	0x08002911
 800285c:	08002911 	.word	0x08002911
 8002860:	08002911 	.word	0x08002911
 8002864:	08002911 	.word	0x08002911
 8002868:	08002911 	.word	0x08002911
 800286c:	08002911 	.word	0x08002911
 8002870:	08002911 	.word	0x08002911
 8002874:	08002911 	.word	0x08002911
 8002878:	08002911 	.word	0x08002911
 800287c:	08002911 	.word	0x08002911
 8002880:	080028a5 	.word	0x080028a5
 8002884:	0800297d 	.word	0x0800297d
 8002888:	080028a5 	.word	0x080028a5
 800288c:	08002947 	.word	0x08002947
 8002890:	08002947 	.word	0x08002947
 8002894:	08002947 	.word	0x08002947
 8002898:	080028db 	.word	0x080028db
 800289c:	080028db 	.word	0x080028db
 80028a0:	080028db 	.word	0x080028db
      case MC_PROTOCOL_REG_SC_PP:
      case MC_PROTOCOL_REG_SC_FOC_REP_RATE:
      case MC_PROTOCOL_REG_SC_COMPLETED:
        {
          /* 8bit variables */
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 80028aa:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 80028ae:	4618      	mov	r0, r3
 80028b0:	f001 fc9e 	bl	80041f0 <UI_GetReg>
 80028b4:	4603      	mov	r3, r0
 80028b6:	65bb      	str	r3, [r7, #88]	; 0x58
           if ( bNoError == true )
 80028b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d063      	beq.n	8002988 <MCP_ReceivedFrame+0x6dc>
          {
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	69dc      	ldr	r4, [r3, #28]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6998      	ldr	r0, [r3, #24]
 80028c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80028cc:	2301      	movs	r3, #1
 80028ce:	21f0      	movs	r1, #240	; 0xf0
 80028d0:	47a0      	blx	r4
            RequireAck = false;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 80028d8:	e056      	b.n	8002988 <MCP_ReceivedFrame+0x6dc>
      case MC_PROTOCOL_REG_PWBDID:
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 80028e0:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 80028e4:	4618      	mov	r0, r3
 80028e6:	f001 fc83 	bl	80041f0 <UI_GetReg>
 80028ea:	4603      	mov	r3, r0
 80028ec:	657b      	str	r3, [r7, #84]	; 0x54
          if ( bNoError == true )
 80028ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d04a      	beq.n	800298c <MCP_ReceivedFrame+0x6e0>
          {
            /* 16bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	69dc      	ldr	r4, [r3, #28]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6998      	ldr	r0, [r3, #24]
 80028fe:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002902:	2302      	movs	r3, #2
 8002904:	21f0      	movs	r1, #240	; 0xf0
 8002906:	47a0      	blx	r4
            RequireAck = false;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 800290e:	e03d      	b.n	800298c <MCP_ReceivedFrame+0x6e0>
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
      case MC_PROTOCOL_REG_SC_PWM_FREQUENCY:
      case MC_PROTOCOL_REG_UID:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8002916:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800291a:	4618      	mov	r0, r3
 800291c:	f001 fc68 	bl	80041f0 <UI_GetReg>
 8002920:	4603      	mov	r3, r0
 8002922:	653b      	str	r3, [r7, #80]	; 0x50
          if ( bNoError == true )
 8002924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002928:	2b00      	cmp	r3, #0
 800292a:	d031      	beq.n	8002990 <MCP_ReceivedFrame+0x6e4>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	69dc      	ldr	r4, [r3, #28]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6998      	ldr	r0, [r3, #24]
 8002934:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002938:	2304      	movs	r3, #4
 800293a:	21f0      	movs	r1, #240	; 0xf0
 800293c:	47a0      	blx	r4
            RequireAck = false;
 800293e:	2300      	movs	r3, #0
 8002940:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 8002944:	e024      	b.n	8002990 <MCP_ReceivedFrame+0x6e4>

      case MC_PROTOCOL_REG_CURRENT_POSITION:
      case MC_PROTOCOL_REG_TARGET_POSITION:
      case MC_PROTOCOL_REG_MOVE_DURATION:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 800294c:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8002950:	4618      	mov	r0, r3
 8002952:	f001 fc4d 	bl	80041f0 <UI_GetReg>
 8002956:	4603      	mov	r3, r0
 8002958:	64fb      	str	r3, [r7, #76]	; 0x4c
          if ( bNoError == true )
 800295a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800295e:	2b00      	cmp	r3, #0
 8002960:	d018      	beq.n	8002994 <MCP_ReceivedFrame+0x6e8>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	69dc      	ldr	r4, [r3, #28]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6998      	ldr	r0, [r3, #24]
 800296a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800296e:	2304      	movs	r3, #4
 8002970:	21f0      	movs	r1, #240	; 0xf0
 8002972:	47a0      	blx	r4
            RequireAck = false;
 8002974:	2300      	movs	r3, #0
 8002976:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 800297a:	e00b      	b.n	8002994 <MCP_ReceivedFrame+0x6e8>

      default:
        bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 800297c:	2303      	movs	r3, #3
 800297e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        break;
 8002982:	e008      	b.n	8002996 <MCP_ReceivedFrame+0x6ea>
        break;
 8002984:	bf00      	nop
 8002986:	e20c      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>
        break;
 8002988:	bf00      	nop
 800298a:	e20a      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>
        break;
 800298c:	bf00      	nop
 800298e:	e208      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>
        break;
 8002990:	bf00      	nop
 8002992:	e206      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>
        break;
 8002994:	bf00      	nop
      }
    }
    break;
 8002996:	e204      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_EXECUTE_CMD:
    {
      uint8_t bCmdID = buffer[0];
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80029a0:	2307      	movs	r3, #7
 80029a2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f002 f9b6 	bl	8004d20 <UI_ExecCmd>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 80029ba:	e1f2      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>
  case MC_PROTOCOL_CODE_GET_BOARD_INFO:
    {
      /* GetBoardInfo */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; i < 32; i++)
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80029c2:	e00c      	b.n	80029de <MCP_ReceivedFrame+0x732>
      {
        outBuff[i] = 0;
 80029c4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80029c8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80029cc:	4413      	add	r3, r2
 80029ce:	2200      	movs	r2, #0
 80029d0:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; i < 32; i++)
 80029d4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80029d8:	3301      	adds	r3, #1
 80029da:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80029de:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80029e2:	2b1f      	cmp	r3, #31
 80029e4:	d9ee      	bls.n	80029c4 <MCP_ReceivedFrame+0x718>
      }
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80029ec:	e013      	b.n	8002a16 <MCP_ReceivedFrame+0x76a>
      {
        outBuff[3+i] = pHandle->s_fwVer[i];
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80029f4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80029f8:	441a      	add	r2, r3
 80029fa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80029fe:	3303      	adds	r3, #3
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002a06:	440b      	add	r3, r1
 8002a08:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002a0c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002a10:	3301      	adds	r3, #1
 8002a12:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002a16:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	d808      	bhi.n	8002a30 <MCP_ReceivedFrame+0x784>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002a24:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b09      	cmp	r3, #9
 8002a2e:	d1de      	bne.n	80029ee <MCP_ReceivedFrame+0x742>
      }
      outBuff[0] = pHandle->s_fwVer[i+5];
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002a36:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002a3a:	3305      	adds	r3, #5
 8002a3c:	4413      	add	r3, r2
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	753b      	strb	r3, [r7, #20]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002a48:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002a4c:	3307      	adds	r3, #7
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	757b      	strb	r3, [r7, #21]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002a5a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002a5e:	3309      	adds	r3, #9
 8002a60:	4413      	add	r3, r2
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	75bb      	strb	r3, [r7, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	69dc      	ldr	r4, [r3, #28]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6998      	ldr	r0, [r3, #24]
 8002a6e:	f107 0214 	add.w	r2, r7, #20
 8002a72:	2320      	movs	r3, #32
 8002a74:	21f0      	movs	r1, #240	; 0xf0
 8002a76:	47a0      	blx	r4
      bNoError = true;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002a7e:	e190      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_SET_SPEED_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3304      	adds	r3, #4
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3305      	adds	r3, #5
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	441a      	add	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3302      	adds	r3, #2
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	441a      	add	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3303      	adds	r3, #3
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	061b      	lsls	r3, r3, #24
 8002abc:	4413      	add	r3, r2
 8002abe:	673b      	str	r3, [r7, #112]	; 0x70
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8002ac6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f002 f995 	bl	8004df8 <UI_ExecSpeedRamp>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002ad4:	e165      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>
    }
    break;

  case MC_PROTOCOL_CODE_SET_TORQUE_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3305      	adds	r3, #5
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3301      	adds	r3, #1
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	441a      	add	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3302      	adds	r3, #2
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	041b      	lsls	r3, r3, #16
 8002b08:	441a      	add	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3303      	adds	r3, #3
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	061b      	lsls	r3, r3, #24
 8002b12:	4413      	add	r3, r2
 8002b14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002b1e:	b211      	sxth	r1, r2
 8002b20:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 f98f 	bl	8004e48 <UI_ExecTorqueRamp>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002b30:	e137      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>
      uint8_t outBuff[8];
      uint16_t Durationms;
      int16_t FinalMecSpeedUnit;
      int16_t FinalTorque;
      int32_t rpm;
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7819      	ldrb	r1, [r3, #0]
 8002b38:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002b3c:	f107 0242 	add.w	r2, r7, #66	; 0x42
 8002b40:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	4623      	mov	r3, r4
 8002b48:	f002 f99a 	bl	8004e80 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8002b4c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8002b50:	461a      	mov	r2, r3
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4aa1      	ldr	r2, [pc, #644]	; (8002de0 <MCP_ReceivedFrame+0xb34>)
 8002b5c:	fb82 1203 	smull	r1, r2, r2, r3
 8002b60:	1092      	asrs	r2, r2, #2
 8002b62:	17db      	asrs	r3, r3, #31
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	67bb      	str	r3, [r7, #120]	; 0x78
      outBuff[0] = (uint8_t)(rpm);
 8002b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      outBuff[1] = (uint8_t)(rpm >> 8);
 8002b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b72:	121b      	asrs	r3, r3, #8
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
      outBuff[2] = (uint8_t)(rpm >> 16);
 8002b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b7c:	141b      	asrs	r3, r3, #16
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      outBuff[3] = (uint8_t)(rpm >> 24);
 8002b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b86:	161b      	asrs	r3, r3, #24
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      outBuff[4] = (uint8_t)(FinalTorque);
 8002b8e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8002b98:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8002b9c:	121b      	asrs	r3, r3, #8
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
      outBuff[6] = (uint8_t)(Durationms);
 8002ba6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8002bb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	69dc      	ldr	r4, [r3, #28]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6998      	ldr	r0, [r3, #24]
 8002bc6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002bca:	2308      	movs	r3, #8
 8002bcc:	21f0      	movs	r1, #240	; 0xf0
 8002bce:	47a0      	blx	r4
    }
    break;
 8002bd0:	e0e7      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>
      uint8_t bStage;
      uint16_t hDurationms;
      int16_t hFinalMecSpeedUnit;
      int16_t hFinalTorque;
      int32_t rpm;
      bStage = buffer[0];
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      hDurationms = buffer[7] + (buffer[8] << 8);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3307      	adds	r3, #7
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3308      	adds	r3, #8
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3302      	adds	r3, #2
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	441a      	add	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3303      	adds	r3, #3
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	441a      	add	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3304      	adds	r3, #4
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	061b      	lsls	r3, r3, #24
 8002c18:	4413      	add	r3, r2
 8002c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8002c1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4a6e      	ldr	r2, [pc, #440]	; (8002de4 <MCP_ReceivedFrame+0xb38>)
 8002c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8002c30:	441a      	add	r2, r3
 8002c32:	1152      	asrs	r2, r2, #5
 8002c34:	17db      	asrs	r3, r3, #31
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3305      	adds	r3, #5
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3306      	adds	r3, #6
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f9b7 407e 	ldrsh.w	r4, [r7, #126]	; 0x7e
 8002c5e:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8002c62:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 8002c66:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	4623      	mov	r3, r4
 8002c6e:	f002 f940 	bl	8004ef2 <UI_SetRevupData>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002c78:	e093      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_SET_CURRENT_REF:
    {
      int16_t hIqRef;
      int16_t hIdRef;
      hIqRef = buffer[0] + (buffer[1] << 8);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3301      	adds	r3, #1
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3302      	adds	r3, #2
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3303      	adds	r3, #3
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 8002cb6:	f9b7 108a 	ldrsh.w	r1, [r7, #138]	; 0x8a
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 f948 	bl	8004f50 <UI_SetCurrentReferences>
      bNoError = true;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002cc6:	e06c      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_GET_MP_INFO:
    {
      MPInfo_t stepList;
      stepList.data = buffer;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
      stepList.len = Size;
 8002ccc:	7abb      	ldrb	r3, [r7, #10]
 8002cce:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8002cd2:	230c      	movs	r3, #12
 8002cd4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002cd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cdc:	4942      	ldr	r1, [pc, #264]	; (8002de8 <MCP_ReceivedFrame+0xb3c>)
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 f952 	bl	8004f88 <UI_GetMPInfo>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      if (bNoError)
 8002cea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d056      	beq.n	8002da0 <MCP_ReceivedFrame+0xaf4>
      {
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	69dc      	ldr	r4, [r3, #28]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6998      	ldr	r0, [r3, #24]
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <MCP_ReceivedFrame+0xb3c>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4b3a      	ldr	r3, [pc, #232]	; (8002de8 <MCP_ReceivedFrame+0xb3c>)
 8002d00:	791b      	ldrb	r3, [r3, #4]
 8002d02:	21f0      	movs	r1, #240	; 0xf0
 8002d04:	47a0      	blx	r4
        RequireAck = false;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      }
    }
    break;
 8002d0c:	e048      	b.n	8002da0 <MCP_ReceivedFrame+0xaf4>
    case MC_PROTOCOL_CODE_GET_FW_VERSION:
    {
      /* Get Firmware Version */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8002d14:	e012      	b.n	8002d3c <MCP_ReceivedFrame+0xa90>
      {
        outBuff[i] = pHandle->s_fwVer[i];
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002d1c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002d20:	441a      	add	r2, r3
 8002d22:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002d2c:	440b      	add	r3, r1
 8002d2e:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002d32:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002d36:	3301      	adds	r3, #1
 8002d38:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8002d3c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002d40:	2b1f      	cmp	r3, #31
 8002d42:	d816      	bhi.n	8002d72 <MCP_ReceivedFrame+0xac6>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002d4a:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002d4e:	4413      	add	r3, r2
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1df      	bne.n	8002d16 <MCP_ReceivedFrame+0xa6a>
      }
      
      for (; i < 32; i++)
 8002d56:	e00c      	b.n	8002d72 <MCP_ReceivedFrame+0xac6>
      {
        outBuff[i] = 0;
 8002d58:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002d5c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002d60:	4413      	add	r3, r2
 8002d62:	2200      	movs	r2, #0
 8002d64:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (; i < 32; i++)
 8002d68:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8002d72:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002d76:	2b1f      	cmp	r3, #31
 8002d78:	d9ee      	bls.n	8002d58 <MCP_ReceivedFrame+0xaac>
      }

      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	69dc      	ldr	r4, [r3, #28]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6998      	ldr	r0, [r3, #24]
 8002d82:	f107 0214 	add.w	r2, r7, #20
 8002d86:	2320      	movs	r3, #32
 8002d88:	21f0      	movs	r1, #240	; 0xf0
 8002d8a:	47a0      	blx	r4
      bNoError = true;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002d92:	e006      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8002d94:	2301      	movs	r3, #1
 8002d96:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }
    break;
 8002d9a:	e002      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>
    break;
 8002d9c:	bf00      	nop
 8002d9e:	e000      	b.n	8002da2 <MCP_ReceivedFrame+0xaf6>
    break;
 8002da0:	bf00      	nop
  }

  if (RequireAck)
 8002da2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d015      	beq.n	8002dd6 <MCP_ReceivedFrame+0xb2a>
  {
    if (bNoError)
 8002daa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <MCP_ReceivedFrame+0xb18>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	69dc      	ldr	r4, [r3, #28]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6998      	ldr	r0, [r3, #24]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	21f0      	movs	r1, #240	; 0xf0
 8002dc0:	47a0      	blx	r4
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
    }
  }
}
 8002dc2:	e008      	b.n	8002dd6 <MCP_ReceivedFrame+0xb2a>
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	69dc      	ldr	r4, [r3, #28]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6998      	ldr	r0, [r3, #24]
 8002dcc:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	21ff      	movs	r1, #255	; 0xff
 8002dd4:	47a0      	blx	r4
}
 8002dd6:	bf00      	nop
 8002dd8:	379c      	adds	r7, #156	; 0x9c
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd90      	pop	{r4, r7, pc}
 8002dde:	bf00      	nop
 8002de0:	66666667 	.word	0x66666667
 8002de4:	88888889 	.word	0x88888889
 8002de8:	2000073c 	.word	0x2000073c

08002dec <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and 
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void) 
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af02      	add	r7, sp, #8
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002df2:	f004 ff1f 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <MX_MotorControl_Init+0x3c>)
 8002dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8002dfe:	09db      	lsrs	r3, r3, #7
 8002e00:	4618      	mov	r0, r3
 8002e02:	f003 fc96 	bl	8006732 <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8002e06:	4909      	ldr	r1, [pc, #36]	; (8002e2c <MX_MotorControl_Init+0x40>)
 8002e08:	4809      	ldr	r0, [pc, #36]	; (8002e30 <MX_MotorControl_Init+0x44>)
 8002e0a:	f7fe fb73 	bl	80014f4 <MCboot>
  mc_lock_pins();
 8002e0e:	f7ff f99d 	bl	800214c <mc_lock_pins>
  
  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <MX_MotorControl_Init+0x48>)
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <MX_MotorControl_Init+0x40>)
 8002e18:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <MX_MotorControl_Init+0x44>)
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	4806      	ldr	r0, [pc, #24]	; (8002e38 <MX_MotorControl_Init+0x4c>)
 8002e1e:	f000 fec5 	bl	8003bac <UI_TaskInit>
}
 8002e22:	bf00      	nop
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	10624dd3 	.word	0x10624dd3
 8002e2c:	20000b7c 	.word	0x20000b7c
 8002e30:	20000b78 	.word	0x20000b78
 8002e34:	0800ed7c 	.word	0x0800ed7c
 8002e38:	20000688 	.word	0x20000688

08002e3c <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f023 020f 	bic.w	r2, r3, #15
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e62:	b490      	push	{r4, r7}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	3330      	adds	r3, #48	; 0x30
 8002e72:	4619      	mov	r1, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e7e:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	fa92 f2a2 	rbit	r2, r2
 8002e86:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	fab2 f282 	clz	r2, r2
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	40d3      	lsrs	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	211f      	movs	r1, #31
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	f1c3 031a 	rsb	r3, r3, #26
 8002eba:	fa21 f303 	lsr.w	r3, r1, r3
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS - (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc90      	pop	{r4, r7}
 8002eca:	4770      	bx	lr

08002ecc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ecc:	b490      	push	{r4, r7}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3314      	adds	r3, #20
 8002edc:	4619      	mov	r1, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	fa92 f2a2 	rbit	r2, r2
 8002ef0:	613a      	str	r2, [r7, #16]
  return result;
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	fab2 f282 	clz	r2, r2
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	40d3      	lsrs	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8002f02:	6822      	ldr	r2, [r4, #0]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8002f0a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8002f0e:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	69f9      	ldr	r1, [r7, #28]
 8002f12:	fa91 f1a1 	rbit	r1, r1
 8002f16:	61b9      	str	r1, [r7, #24]
  return result;
 8002f18:	69b9      	ldr	r1, [r7, #24]
 8002f1a:	fab1 f181 	clz	r1, r1
 8002f1e:	b2c9      	uxtb	r1, r1
 8002f20:	40cb      	lsrs	r3, r1
 8002f22:	2107      	movs	r1, #7
 8002f24:	fa01 f303 	lsl.w	r3, r1, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8002f32:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8002f36:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f3a:	fa91 f1a1 	rbit	r1, r1
 8002f3e:	6239      	str	r1, [r7, #32]
  return result;
 8002f40:	6a39      	ldr	r1, [r7, #32]
 8002f42:	fab1 f181 	clz	r1, r1
 8002f46:	b2c9      	uxtb	r1, r1
 8002f48:	40cb      	lsrs	r3, r1
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	4313      	orrs	r3, r2
 8002f52:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8002f54:	bf00      	nop
 8002f56:	3728      	adds	r7, #40	; 0x28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc90      	pop	{r4, r7}
 8002f5c:	4770      	bx	lr

08002f5e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f72:	f043 0201 	orr.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002fbe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003016:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800301a:	f043 0204 	orr.w	r2, r3, #4
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	b29b      	uxth	r3, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b04      	cmp	r3, #4
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2204      	movs	r2, #4
 800307a:	601a      	str	r2, [r3, #0]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_ClearFlag_JEOC>:
  * @rmtoll ISR      JEOC           LL_ADC_ClearFlag_JEOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_JEOC(ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	601a      	str	r2, [r3, #0]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f023 0204 	bic.w	r2, r3, #4
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	605a      	str	r2, [r3, #4]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <LL_ADC_DisableIT_JEOC>:
  * @rmtoll IER      JEOCIE         LL_ADC_DisableIT_JEOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f023 0220 	bic.w	r2, r3, #32
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	605a      	str	r2, [r3, #4]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t * regConv)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint8_t handle=255;
 80030ec:	23ff      	movs	r3, #255	; 0xff
 80030ee:	73fb      	strb	r3, [r7, #15]
  uint8_t i=0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	73bb      	strb	r3, [r7, #14]
  
    /* Parse the array to be sure that same 
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
 80030f4:	e029      	b.n	800314a <RCM_RegisterRegConv+0x66>
    { 
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 80030f6:	7bbb      	ldrb	r3, [r7, #14]
 80030f8:	4a53      	ldr	r2, [pc, #332]	; (8003248 <RCM_RegisterRegConv+0x164>)
 80030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d104      	bne.n	800310c <RCM_RegisterRegConv+0x28>
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d901      	bls.n	800310c <RCM_RegisterRegConv+0x28>
      {
        handle = i; /* First location available, but still looping to check that this config does not already exist*/ 
 8003108:	7bbb      	ldrb	r3, [r7, #14]
 800310a:	73fb      	strb	r3, [r7, #15]
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
 800310c:	7bbb      	ldrb	r3, [r7, #14]
 800310e:	4a4e      	ldr	r2, [pc, #312]	; (8003248 <RCM_RegisterRegConv+0x164>)
 8003110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d015      	beq.n	8003144 <RCM_RegisterRegConv+0x60>
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8003118:	7bbb      	ldrb	r3, [r7, #14]
 800311a:	4a4b      	ldr	r2, [pc, #300]	; (8003248 <RCM_RegisterRegConv+0x164>)
 800311c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003120:	791a      	ldrb	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	791b      	ldrb	r3, [r3, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	d10c      	bne.n	8003144 <RCM_RegisterRegConv+0x60>
            (RCM_handle_array [i]->regADC == regConv->regADC))
 800312a:	7bbb      	ldrb	r3, [r7, #14]
 800312c:	4a46      	ldr	r2, [pc, #280]	; (8003248 <RCM_RegisterRegConv+0x164>)
 800312e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8003138:	429a      	cmp	r2, r3
 800313a:	d103      	bne.n	8003144 <RCM_RegisterRegConv+0x60>
          {
           handle =i; /* Reuse the same handle */
 800313c:	7bbb      	ldrb	r3, [r7, #14]
 800313e:	73fb      	strb	r3, [r7, #15]
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
 8003140:	2304      	movs	r3, #4
 8003142:	73bb      	strb	r3, [r7, #14]
          }
      }
      i++;
 8003144:	7bbb      	ldrb	r3, [r7, #14]
 8003146:	3301      	adds	r3, #1
 8003148:	73bb      	strb	r3, [r7, #14]
    while (i < RCM_MAX_CONV)
 800314a:	7bbb      	ldrb	r3, [r7, #14]
 800314c:	2b03      	cmp	r3, #3
 800314e:	d9d2      	bls.n	80030f6 <RCM_RegisterRegConv+0x12>
    }    
    if (handle < RCM_MAX_CONV )
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d872      	bhi.n	800323c <RCM_RegisterRegConv+0x158>
    {    
      RCM_handle_array [handle] = regConv;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	493b      	ldr	r1, [pc, #236]	; (8003248 <RCM_RegisterRegConv+0x164>)
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	4a3a      	ldr	r2, [pc, #232]	; (800324c <RCM_RegisterRegConv+0x168>)
 8003164:	2100      	movs	r1, #0
 8003166:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff ff09 	bl	8002f86 <LL_ADC_IsEnabled>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d127      	bne.n	80031ca <RCM_RegisterRegConv+0xe6>
      {
       LL_ADC_DisableIT_EOC(regConv->regADC);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ff8f 	bl	80030a2 <LL_ADC_DisableIT_EOC>
       LL_ADC_ClearFlag_EOC(regConv->regADC);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff70 	bl	800306e <LL_ADC_ClearFlag_EOC>
       LL_ADC_DisableIT_JEOC(regConv->regADC);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ff95 	bl	80030c2 <LL_ADC_DisableIT_JEOC>
       LL_ADC_ClearFlag_JEOC(regConv->regADC);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff ff73 	bl	8003088 <LL_ADC_ClearFlag_JEOC>

        LL_ADC_StartCalibration( regConv->regADC, LL_ADC_SINGLE_ENDED );
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	217f      	movs	r1, #127	; 0x7f
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff feff 	bl	8002fac <LL_ADC_StartCalibration>
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )  
 80031ae:	bf00      	nop
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff12 	bl	8002fde <LL_ADC_IsCalibrationOnGoing>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f7      	bne.n	80031b0 <RCM_RegisterRegConv+0xcc>
        { }
        LL_ADC_Enable( regConv->regADC );
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff feca 	bl	8002f5e <LL_ADC_Enable>
      }
      else 
      {
      }
      /* reset regular conversion sequencer length set by cubeMX */
      LL_ADC_REG_SetSequencerLength( regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE );
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fe33 	bl	8002e3c <LL_ADC_REG_SetSequencerLength>
      /* configure the sampling time (should already be configured by for non user conversions)*/
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	791b      	ldrb	r3, [r3, #4]
 80031de:	2b09      	cmp	r3, #9
 80031e0:	d812      	bhi.n	8003208 <RCM_RegisterRegConv+0x124>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	791b      	ldrb	r3, [r3, #4]
 80031e6:	069b      	lsls	r3, r3, #26
 80031e8:	461a      	mov	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	791b      	ldrb	r3, [r3, #4]
 80031ee:	4619      	mov	r1, r3
 80031f0:	2302      	movs	r3, #2
 80031f2:	408b      	lsls	r3, r1
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	791b      	ldrb	r3, [r3, #4]
 80031fa:	4619      	mov	r1, r3
 80031fc:	460b      	mov	r3, r1
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	440b      	add	r3, r1
 8003202:	051b      	lsls	r3, r3, #20
 8003204:	4313      	orrs	r3, r2
 8003206:	e014      	b.n	8003232 <RCM_RegisterRegConv+0x14e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	791b      	ldrb	r3, [r3, #4]
 800320c:	069b      	lsls	r3, r3, #26
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	791b      	ldrb	r3, [r3, #4]
 8003214:	4619      	mov	r1, r3
 8003216:	2302      	movs	r3, #2
 8003218:	408b      	lsls	r3, r1
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	791b      	ldrb	r3, [r3, #4]
 8003220:	4619      	mov	r1, r3
 8003222:	460b      	mov	r3, r1
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	440b      	add	r3, r1
 8003228:	3b1e      	subs	r3, #30
 800322a:	051b      	lsls	r3, r3, #20
 800322c:	4313      	orrs	r3, r2
 800322e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6892      	ldr	r2, [r2, #8]
 8003236:	4619      	mov	r1, r3
 8003238:	f7ff fe48 	bl	8002ecc <LL_ADC_SetChannelSamplingTime>
    }
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000ba8 	.word	0x20000ba8
 800324c:	20000b84 	.word	0x20000b84

08003250 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it. 
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
  uint16_t retVal;
 
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	4a3a      	ldr	r2, [pc, #232]	; (8003348 <RCM_ExecRegularConv+0xf8>)
 800325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003262:	6818      	ldr	r0, [r3, #0]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	4a38      	ldr	r2, [pc, #224]	; (8003348 <RCM_ExecRegularConv+0xf8>)
 8003268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326c:	791b      	ldrb	r3, [r3, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800326e:	2b09      	cmp	r3, #9
 8003270:	d81c      	bhi.n	80032ac <RCM_ExecRegularConv+0x5c>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	4a34      	ldr	r2, [pc, #208]	; (8003348 <RCM_ExecRegularConv+0xf8>)
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	791b      	ldrb	r3, [r3, #4]
 800327c:	069b      	lsls	r3, r3, #26
 800327e:	4619      	mov	r1, r3
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	4a31      	ldr	r2, [pc, #196]	; (8003348 <RCM_ExecRegularConv+0xf8>)
 8003284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003288:	791b      	ldrb	r3, [r3, #4]
 800328a:	461a      	mov	r2, r3
 800328c:	2302      	movs	r3, #2
 800328e:	4093      	lsls	r3, r2
 8003290:	ea41 0203 	orr.w	r2, r1, r3
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	492c      	ldr	r1, [pc, #176]	; (8003348 <RCM_ExecRegularConv+0xf8>)
 8003298:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800329c:	791b      	ldrb	r3, [r3, #4]
 800329e:	4619      	mov	r1, r3
 80032a0:	460b      	mov	r3, r1
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	440b      	add	r3, r1
 80032a6:	051b      	lsls	r3, r3, #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80032a8:	4313      	orrs	r3, r2
 80032aa:	e01e      	b.n	80032ea <RCM_ExecRegularConv+0x9a>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	4a26      	ldr	r2, [pc, #152]	; (8003348 <RCM_ExecRegularConv+0xf8>)
 80032b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b4:	791b      	ldrb	r3, [r3, #4]
 80032b6:	069b      	lsls	r3, r3, #26
 80032b8:	4619      	mov	r1, r3
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	4a22      	ldr	r2, [pc, #136]	; (8003348 <RCM_ExecRegularConv+0xf8>)
 80032be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c2:	791b      	ldrb	r3, [r3, #4]
 80032c4:	461a      	mov	r2, r3
 80032c6:	2302      	movs	r3, #2
 80032c8:	4093      	lsls	r3, r2
 80032ca:	ea41 0203 	orr.w	r2, r1, r3
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	491d      	ldr	r1, [pc, #116]	; (8003348 <RCM_ExecRegularConv+0xf8>)
 80032d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032d6:	791b      	ldrb	r3, [r3, #4]
 80032d8:	4619      	mov	r1, r3
 80032da:	460b      	mov	r3, r1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	440b      	add	r3, r1
 80032e0:	3b1e      	subs	r3, #30
 80032e2:	051b      	lsls	r3, r3, #20
 80032e4:	4313      	orrs	r3, r2
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80032e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032ea:	461a      	mov	r2, r3
 80032ec:	2106      	movs	r1, #6
 80032ee:	f7ff fdb8 	bl	8002e62 <LL_ADC_REG_SetSequencerRanks>

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	4a14      	ldr	r2, [pc, #80]	; (8003348 <RCM_ExecRegularConv+0xf8>)
 80032f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fe96 	bl	800302e <LL_ADC_REG_ReadConversionData12>

    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	4a10      	ldr	r2, [pc, #64]	; (8003348 <RCM_ExecRegularConv+0xf8>)
 8003306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fe7a 	bl	8003006 <LL_ADC_REG_StartConversion>
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8003312:	bf00      	nop
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <RCM_ExecRegularConv+0xf8>)
 8003318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fe92 	bl	8003048 <LL_ADC_IsActiveFlag_EOC>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f4      	beq.n	8003314 <RCM_ExecRegularConv+0xc4>
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );   
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	4a06      	ldr	r2, [pc, #24]	; (8003348 <RCM_ExecRegularConv+0xf8>)
 800332e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fe7a 	bl	800302e <LL_ADC_REG_ReadConversionData12>
 800333a:	4603      	mov	r3, r0
 800333c:	81fb      	strh	r3, [r7, #14]
return retVal;
 800333e:	89fb      	ldrh	r3, [r7, #14]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000ba8 	.word	0x20000ba8

0800334c <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it. 
 */
void RCM_ExecUserConv ()
{
 800334c:	b598      	push	{r3, r4, r7, lr}
 800334e:	af00      	add	r7, sp, #0
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8003350:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <RCM_ExecUserConv+0x64>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d128      	bne.n	80033aa <RCM_ExecUserConv+0x5e>
  {
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003358:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <RCM_ExecUserConv+0x68>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff77 	bl	8003250 <RCM_ExecRegularConv>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <RCM_ExecUserConv+0x6c>)
 8003368:	801a      	strh	r2, [r3, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 800336a:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <RCM_ExecUserConv+0x64>)
 800336c:	2202      	movs	r2, #2
 800336e:	701a      	strb	r2, [r3, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003370:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <RCM_ExecUserConv+0x68>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <RCM_ExecUserConv+0x70>)
 8003378:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d014      	beq.n	80033aa <RCM_ExecUserConv+0x5e>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <RCM_ExecUserConv+0x64>)
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <RCM_ExecUserConv+0x68>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <RCM_ExecUserConv+0x70>)
 800338e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8003392:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <RCM_ExecUserConv+0x68>)
 8003394:	7818      	ldrb	r0, [r3, #0]
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <RCM_ExecUserConv+0x6c>)
 8003398:	8819      	ldrh	r1, [r3, #0]
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <RCM_ExecUserConv+0x68>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	4a07      	ldr	r2, [pc, #28]	; (80033bc <RCM_ExecUserConv+0x70>)
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	461a      	mov	r2, r3
 80033a8:	47a0      	blx	r4
    }
  }
}
 80033aa:	bf00      	nop
 80033ac:	bd98      	pop	{r3, r4, r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000ba4 	.word	0x20000ba4
 80033b4:	20000b80 	.word	0x20000b80
 80033b8:	20000bb8 	.word	0x20000bb8
 80033bc:	20000b84 	.word	0x20000b84

080033c0 <LL_ADC_ClearFlag_JEOS>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2240      	movs	r2, #64	; 0x40
 80033cc:	601a      	str	r2, [r3, #0]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f06f 0201 	mvn.w	r2, #1
 80033e8:	611a      	str	r2, [r3, #16]
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <LL_TIM_ClearFlag_BRK>:
  * @rmtoll SR           BIF           LL_TIM_ClearFlag_BRK
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003404:	611a      	str	r2, [r3, #16]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_TIM_IsActiveFlag_BRK>:
  * @rmtoll SR           BIF           LL_TIM_IsActiveFlag_BRK
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003422:	2b80      	cmp	r3, #128	; 0x80
 8003424:	d101      	bne.n	800342a <LL_TIM_IsActiveFlag_BRK+0x18>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <LL_TIM_IsActiveFlag_BRK+0x1a>
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_TIM_ClearFlag_BRK2>:
  * @rmtoll SR           B2IF          LL_TIM_ClearFlag_BRK2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_BRK2(TIM_TypeDef *TIMx)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003446:	611a      	str	r2, [r3, #16]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <LL_TIM_IsActiveFlag_BRK2>:
  * @rmtoll SR           B2IF          LL_TIM_IsActiveFlag_BRK2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003468:	d101      	bne.n	800346e <LL_TIM_IsActiveFlag_BRK2+0x1a>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <LL_TIM_IsActiveFlag_BRK2+0x1c>
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d101      	bne.n	8003494 <LL_USART_IsActiveFlag_ORE+0x18>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <LL_USART_IsActiveFlag_ORE+0x1a>
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d101      	bne.n	80034ba <LL_USART_IsActiveFlag_RXNE+0x18>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <LL_USART_IsActiveFlag_RXNE+0x1a>
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d8:	2b80      	cmp	r3, #128	; 0x80
 80034da:	d101      	bne.n	80034e0 <LL_USART_IsActiveFlag_TXE+0x18>
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <LL_USART_IsActiveFlag_TXE+0x1a>
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2208      	movs	r2, #8
 80034fa:	621a      	str	r2, [r3, #32]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003514:	b29b      	uxth	r3, r3
 8003516:	b2db      	uxtb	r3, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <ADC1_2_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  
  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );
 8003528:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800352c:	f7ff ff48 	bl	80033c0 <LL_ADC_ClearFlag_JEOS>

  // Highfrequency task 
  TSK_HighFrequencyTask();
 8003530:	f7fe fc44 	bl	8001dbc <TSK_HighFrequencyTask>
 /* USER CODE END HighFreq  */  
 
 /* USER CODE BEGIN ADC1_2_IRQn 1 */

 /* USER CODE END ADC1_2_IRQn 1 */
}
 8003534:	bf00      	nop
 8003536:	bd80      	pop	{r7, pc}

08003538 <TIM1_UP_TIM16_IRQHandler>:
  * @brief  This function handles first motor TIMx Update interrupt request.
  * @param  None
  * @retval None 
  */
void TIMx_UP_M1_IRQHandler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */ 
 
    LL_TIM_ClearFlag_UPDATE(TIM1);
 800353c:	4803      	ldr	r0, [pc, #12]	; (800354c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800353e:	f7ff ff4c 	bl	80033da <LL_TIM_ClearFlag_UPDATE>
    R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);    
 8003542:	4803      	ldr	r0, [pc, #12]	; (8003550 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003544:	f008 fc0d 	bl	800bd62 <R3_1_TIMx_UP_IRQHandler>

 /* USER CODE BEGIN TIMx_UP_M1_IRQn 1 */

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */ 
}
 8003548:	bf00      	nop
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40012c00 	.word	0x40012c00
 8003550:	20000244 	.word	0x20000244

08003554 <TIM1_BRK_TIM15_IRQHandler>:

void TIMx_BRK_M1_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */ 
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
 8003558:	480d      	ldr	r0, [pc, #52]	; (8003590 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 800355a:	f7ff ff5a 	bl	8003412 <LL_TIM_IsActiveFlag_BRK>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <TIM1_BRK_TIM15_IRQHandler+0x1c>
  {
    LL_TIM_ClearFlag_BRK(TIM1);
 8003564:	480a      	ldr	r0, [pc, #40]	; (8003590 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 8003566:	f7ff ff46 	bl	80033f6 <LL_TIM_ClearFlag_BRK>
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);    
 800356a:	480a      	ldr	r0, [pc, #40]	; (8003594 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 800356c:	f008 fc5f 	bl	800be2e <R3_1_BRK_IRQHandler>
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
 8003570:	4807      	ldr	r0, [pc, #28]	; (8003590 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 8003572:	f7ff ff6f 	bl	8003454 <LL_TIM_IsActiveFlag_BRK2>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <TIM1_BRK_TIM15_IRQHandler+0x34>
  {
    LL_TIM_ClearFlag_BRK2(TIM1);  
 800357c:	4804      	ldr	r0, [pc, #16]	; (8003590 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 800357e:	f7ff ff5b 	bl	8003438 <LL_TIM_ClearFlag_BRK2>
    R3_1_BRK2_IRQHandler(&PWM_Handle_M1);    
 8003582:	4804      	ldr	r0, [pc, #16]	; (8003594 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8003584:	f008 fc16 	bl	800bdb4 <R3_1_BRK2_IRQHandler>
  }
  /* Systick is not executed due low priority so is necessary to call MC_Scheduler here.*/
  MC_Scheduler();
 8003588:	f7fe f8f4 	bl	8001774 <MC_Scheduler>
  
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */ 
}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40012c00 	.word	0x40012c00
 8003594:	20000244 	.word	0x20000244

08003598 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0

 /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800359e:	4b23      	ldr	r3, [pc, #140]	; (800362c <USART1_IRQHandler+0x94>)
 80035a0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff7c 	bl	80034a2 <LL_USART_IsActiveFlag_RXNE>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d018      	beq.n	80035e2 <USART1_IRQHandler+0x4a>
  {
    uint16_t retVal;
    retVal = *(uint16_t*)UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx));
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <USART1_IRQHandler+0x94>)
 80035b2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ffa6 	bl	8003508 <LL_USART_ReceiveData8>
 80035bc:	4603      	mov	r3, r0
 80035be:	b29b      	uxth	r3, r3
 80035c0:	4619      	mov	r1, r3
 80035c2:	481a      	ldr	r0, [pc, #104]	; (800362c <USART1_IRQHandler+0x94>)
 80035c4:	f009 fe70 	bl	800d2a8 <UFCP_RX_IRQ_Handler>
 80035c8:	4603      	mov	r3, r0
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	80fb      	strh	r3, [r7, #6]
    if (retVal == 1)
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <USART1_IRQHandler+0x40>
    {
      UI_SerialCommunicationTimeOutStart();
 80035d4:	f000 fb68 	bl	8003ca8 <UI_SerialCommunicationTimeOutStart>
    }
    if (retVal == 2)
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d101      	bne.n	80035e2 <USART1_IRQHandler+0x4a>
    {
      UI_SerialCommunicationTimeOutStop();
 80035de:	f000 fb57 	bl	8003c90 <UI_SerialCommunicationTimeOutStop>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */ 
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80035e2:	4b12      	ldr	r3, [pc, #72]	; (800362c <USART1_IRQHandler+0x94>)
 80035e4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff6d 	bl	80034c8 <LL_USART_IsActiveFlag_TXE>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <USART1_IRQHandler+0x62>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 80035f4:	480d      	ldr	r0, [pc, #52]	; (800362c <USART1_IRQHandler+0x94>)
 80035f6:	f009 fefb 	bl	800d3f0 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }
  
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80035fa:	4b0c      	ldr	r3, [pc, #48]	; (800362c <USART1_IRQHandler+0x94>)
 80035fc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff3b 	bl	800347c <LL_USART_IsActiveFlag_ORE>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <USART1_IRQHandler+0x8a>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 800360c:	4807      	ldr	r0, [pc, #28]	; (800362c <USART1_IRQHandler+0x94>)
 800360e:	f009 ff4f 	bl	800d4b0 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <USART1_IRQHandler+0x94>)
 8003614:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff68 	bl	80034ee <LL_USART_ClearFlag_ORE>
    UI_SerialCommunicationTimeOutStop();
 800361e:	f000 fb37 	bl	8003c90 <UI_SerialCommunicationTimeOutStop>
  }
  /* USER CODE BEGIN USART_IRQn 1 */
  
  /* USER CODE END USART_IRQn 1 */

}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	2000054c 	.word	0x2000054c

08003630 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003636:	f7fe fd77 	bl	8002128 <TSK_HardwareFaultTask>
  
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800363a:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <HardFault_Handler+0x90>)
 800363c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff ff1b 	bl	800347c <LL_USART_IsActiveFlag_ORE>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HardFault_Handler+0x32>
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 800364c:	481c      	ldr	r0, [pc, #112]	; (80036c0 <HardFault_Handler+0x90>)
 800364e:	f009 ff2f 	bl	800d4b0 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003652:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <HardFault_Handler+0x90>)
 8003654:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff48 	bl	80034ee <LL_USART_ClearFlag_ORE>
        UI_SerialCommunicationTimeOutStop();
 800365e:	f000 fb17 	bl	8003c90 <UI_SerialCommunicationTimeOutStop>
      }
      
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003662:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <HardFault_Handler+0x90>)
 8003664:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff2d 	bl	80034c8 <LL_USART_IsActiveFlag_TXE>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HardFault_Handler+0x4a>
      {   
        UFCP_TX_IRQ_Handler(&pUSART);
 8003674:	4812      	ldr	r0, [pc, #72]	; (80036c0 <HardFault_Handler+0x90>)
 8003676:	f009 febb 	bl	800d3f0 <UFCP_TX_IRQ_Handler>
      }  
      
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800367a:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HardFault_Handler+0x90>)
 800367c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff0e 	bl	80034a2 <LL_USART_IsActiveFlag_RXNE>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0d6      	beq.n	800363a <HardFault_Handler+0xa>
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 800368c:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <HardFault_Handler+0x90>)
 800368e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff ff38 	bl	8003508 <LL_USART_ReceiveData8>
 8003698:	4603      	mov	r3, r0
 800369a:	b29b      	uxth	r3, r3
 800369c:	4619      	mov	r1, r3
 800369e:	4808      	ldr	r0, [pc, #32]	; (80036c0 <HardFault_Handler+0x90>)
 80036a0:	f009 fe02 	bl	800d2a8 <UFCP_RX_IRQ_Handler>
 80036a4:	4603      	mov	r3, r0
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	80fb      	strh	r3, [r7, #6]
        if (retVal == 1)
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HardFault_Handler+0x84>
        {
          UI_SerialCommunicationTimeOutStart();
 80036b0:	f000 fafa 	bl	8003ca8 <UI_SerialCommunicationTimeOutStart>
        }
        if (retVal == 2)
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d1bf      	bne.n	800363a <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 80036ba:	f000 fae9 	bl	8003c90 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80036be:	e7bc      	b.n	800363a <HardFault_Handler+0xa>
 80036c0:	2000054c 	.word	0x2000054c

080036c4 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <SysTick_Handler+0x30>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d106      	bne.n	80036de <SysTick_Handler+0x1a>
  {
    HAL_IncTick();
 80036d0:	f001 fcc2 	bl	8005058 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80036d4:	f003 f839 	bl	800674a <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 80036d8:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <SysTick_Handler+0x30>)
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]
  }
  SystickDividerCounter ++;  
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <SysTick_Handler+0x30>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	3301      	adds	r3, #1
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4b03      	ldr	r3, [pc, #12]	; (80036f4 <SysTick_Handler+0x30>)
 80036e8:	701a      	strb	r2, [r3, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 80036ea:	f7fe f833 	bl	8001754 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	2000068c 	.word	0x2000068c

080036f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <HAL_MspInit+0x44>)
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	4a0e      	ldr	r2, [pc, #56]	; (800373c <HAL_MspInit+0x44>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	6193      	str	r3, [r2, #24]
 800370a:	4b0c      	ldr	r3, [pc, #48]	; (800373c <HAL_MspInit+0x44>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	607b      	str	r3, [r7, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003716:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_MspInit+0x44>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	4a08      	ldr	r2, [pc, #32]	; (800373c <HAL_MspInit+0x44>)
 800371c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003720:	61d3      	str	r3, [r2, #28]
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_MspInit+0x44>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800372e:	2004      	movs	r0, #4
 8003730:	f002 ffca 	bl	80066c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40021000 	.word	0x40021000

08003740 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08c      	sub	sp, #48	; 0x30
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003748:	f107 031c 	add.w	r3, r7, #28
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003760:	d125      	bne.n	80037ae <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003762:	4b2a      	ldr	r3, [pc, #168]	; (800380c <HAL_ADC_MspInit+0xcc>)
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	4a29      	ldr	r2, [pc, #164]	; (800380c <HAL_ADC_MspInit+0xcc>)
 8003768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376c:	6153      	str	r3, [r2, #20]
 800376e:	4b27      	ldr	r3, [pc, #156]	; (800380c <HAL_ADC_MspInit+0xcc>)
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800377a:	4b24      	ldr	r3, [pc, #144]	; (800380c <HAL_ADC_MspInit+0xcc>)
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	4a23      	ldr	r2, [pc, #140]	; (800380c <HAL_ADC_MspInit+0xcc>)
 8003780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003784:	6153      	str	r3, [r2, #20]
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <HAL_ADC_MspInit+0xcc>)
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin|M1_TEMPERATURE_Pin;
 8003792:	230f      	movs	r3, #15
 8003794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003796:	2303      	movs	r3, #3
 8003798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379e:	f107 031c 	add.w	r3, r7, #28
 80037a2:	4619      	mov	r1, r3
 80037a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a8:	f002 ffdc 	bl	8006764 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80037ac:	e029      	b.n	8003802 <HAL_ADC_MspInit+0xc2>
  else if(hadc->Instance==ADC3)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a17      	ldr	r2, [pc, #92]	; (8003810 <HAL_ADC_MspInit+0xd0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d124      	bne.n	8003802 <HAL_ADC_MspInit+0xc2>
    __HAL_RCC_ADC34_CLK_ENABLE();
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <HAL_ADC_MspInit+0xcc>)
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	4a13      	ldr	r2, [pc, #76]	; (800380c <HAL_ADC_MspInit+0xcc>)
 80037be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037c2:	6153      	str	r3, [r2, #20]
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <HAL_ADC_MspInit+0xcc>)
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_ADC_MspInit+0xcc>)
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <HAL_ADC_MspInit+0xcc>)
 80037d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037da:	6153      	str	r3, [r2, #20]
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_ADC_MspInit+0xcc>)
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 80037e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037ee:	2303      	movs	r3, #3
 80037f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80037f6:	f107 031c 	add.w	r3, r7, #28
 80037fa:	4619      	mov	r1, r3
 80037fc:	4805      	ldr	r0, [pc, #20]	; (8003814 <HAL_ADC_MspInit+0xd4>)
 80037fe:	f002 ffb1 	bl	8006764 <HAL_GPIO_Init>
}
 8003802:	bf00      	nop
 8003804:	3730      	adds	r7, #48	; 0x30
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	50000400 	.word	0x50000400
 8003814:	48000400 	.word	0x48000400

08003818 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2e      	ldr	r2, [pc, #184]	; (80038f0 <HAL_COMP_MspInit+0xd8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d119      	bne.n	800386e <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383a:	4b2e      	ldr	r3, [pc, #184]	; (80038f4 <HAL_COMP_MspInit+0xdc>)
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	4a2d      	ldr	r2, [pc, #180]	; (80038f4 <HAL_COMP_MspInit+0xdc>)
 8003840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003844:	6153      	str	r3, [r2, #20]
 8003846:	4b2b      	ldr	r3, [pc, #172]	; (80038f4 <HAL_COMP_MspInit+0xdc>)
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration    
    PA7     ------> COMP2_INP 
    */
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003856:	2303      	movs	r3, #3
 8003858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800385e:	f107 0314 	add.w	r3, r7, #20
 8003862:	4619      	mov	r1, r3
 8003864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003868:	f002 ff7c 	bl	8006764 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 800386c:	e03b      	b.n	80038e6 <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP4)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <HAL_COMP_MspInit+0xe0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d118      	bne.n	80038aa <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003878:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <HAL_COMP_MspInit+0xdc>)
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <HAL_COMP_MspInit+0xdc>)
 800387e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003882:	6153      	str	r3, [r2, #20]
 8003884:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <HAL_COMP_MspInit+0xdc>)
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8003890:	2301      	movs	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003894:	2303      	movs	r3, #3
 8003896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003898:	2300      	movs	r3, #0
 800389a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	4619      	mov	r1, r3
 80038a2:	4816      	ldr	r0, [pc, #88]	; (80038fc <HAL_COMP_MspInit+0xe4>)
 80038a4:	f002 ff5e 	bl	8006764 <HAL_GPIO_Init>
}
 80038a8:	e01d      	b.n	80038e6 <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP6)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a14      	ldr	r2, [pc, #80]	; (8003900 <HAL_COMP_MspInit+0xe8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d118      	bne.n	80038e6 <HAL_COMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <HAL_COMP_MspInit+0xdc>)
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	4a0e      	ldr	r2, [pc, #56]	; (80038f4 <HAL_COMP_MspInit+0xdc>)
 80038ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038be:	6153      	str	r3, [r2, #20]
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <HAL_COMP_MspInit+0xdc>)
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 80038cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038d2:	2303      	movs	r3, #3
 80038d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80038da:	f107 0314 	add.w	r3, r7, #20
 80038de:	4619      	mov	r1, r3
 80038e0:	4806      	ldr	r0, [pc, #24]	; (80038fc <HAL_COMP_MspInit+0xe4>)
 80038e2:	f002 ff3f 	bl	8006764 <HAL_GPIO_Init>
}
 80038e6:	bf00      	nop
 80038e8:	3728      	adds	r7, #40	; 0x28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40010020 	.word	0x40010020
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40010028 	.word	0x40010028
 80038fc:	48000400 	.word	0x48000400
 8003900:	40010030 	.word	0x40010030

08003904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a27      	ldr	r2, [pc, #156]	; (80039b0 <HAL_TIM_Base_MspInit+0xac>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d114      	bne.n	8003940 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003916:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <HAL_TIM_Base_MspInit+0xb0>)
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	4a26      	ldr	r2, [pc, #152]	; (80039b4 <HAL_TIM_Base_MspInit+0xb0>)
 800391c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003920:	6193      	str	r3, [r2, #24]
 8003922:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <HAL_TIM_Base_MspInit+0xb0>)
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800392e:	2200      	movs	r2, #0
 8003930:	2100      	movs	r1, #0
 8003932:	201a      	movs	r0, #26
 8003934:	f002 fed3 	bl	80066de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003938:	201a      	movs	r0, #26
 800393a:	f002 feec 	bl	8006716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800393e:	e032      	b.n	80039a6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <HAL_TIM_Base_MspInit+0xb4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d114      	bne.n	8003974 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800394a:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <HAL_TIM_Base_MspInit+0xb0>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	4a19      	ldr	r2, [pc, #100]	; (80039b4 <HAL_TIM_Base_MspInit+0xb0>)
 8003950:	f043 0310 	orr.w	r3, r3, #16
 8003954:	61d3      	str	r3, [r2, #28]
 8003956:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <HAL_TIM_Base_MspInit+0xb0>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 1);
 8003962:	2201      	movs	r2, #1
 8003964:	2105      	movs	r1, #5
 8003966:	2036      	movs	r0, #54	; 0x36
 8003968:	f002 feb9 	bl	80066de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800396c:	2036      	movs	r0, #54	; 0x36
 800396e:	f002 fed2 	bl	8006716 <HAL_NVIC_EnableIRQ>
}
 8003972:	e018      	b.n	80039a6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a10      	ldr	r2, [pc, #64]	; (80039bc <HAL_TIM_Base_MspInit+0xb8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d113      	bne.n	80039a6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800397e:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <HAL_TIM_Base_MspInit+0xb0>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	4a0c      	ldr	r2, [pc, #48]	; (80039b4 <HAL_TIM_Base_MspInit+0xb0>)
 8003984:	f043 0320 	orr.w	r3, r3, #32
 8003988:	61d3      	str	r3, [r2, #28]
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <HAL_TIM_Base_MspInit+0xb0>)
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 1);
 8003996:	2201      	movs	r2, #1
 8003998:	2105      	movs	r1, #5
 800399a:	2037      	movs	r0, #55	; 0x37
 800399c:	f002 fe9f 	bl	80066de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80039a0:	2037      	movs	r0, #55	; 0x37
 80039a2:	f002 feb8 	bl	8006716 <HAL_NVIC_EnableIRQ>
}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40001000 	.word	0x40001000
 80039bc:	40001400 	.word	0x40001400

080039c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <HAL_TIM_MspPostInit+0xc4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d14b      	bne.n	8003a7a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e2:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <HAL_TIM_MspPostInit+0xc8>)
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <HAL_TIM_MspPostInit+0xc8>)
 80039e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ec:	6153      	str	r3, [r2, #20]
 80039ee:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <HAL_TIM_MspPostInit+0xc8>)
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fa:	4b23      	ldr	r3, [pc, #140]	; (8003a88 <HAL_TIM_MspPostInit+0xc8>)
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <HAL_TIM_MspPostInit+0xc8>)
 8003a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a04:	6153      	str	r3, [r2, #20]
 8003a06:	4b20      	ldr	r3, [pc, #128]	; (8003a88 <HAL_TIM_MspPostInit+0xc8>)
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8003a12:	2302      	movs	r3, #2
 8003a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a16:	2302      	movs	r3, #2
 8003a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003a22:	2306      	movs	r3, #6
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8003a26:	f107 0314 	add.w	r3, r7, #20
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4817      	ldr	r0, [pc, #92]	; (8003a8c <HAL_TIM_MspPostInit+0xcc>)
 8003a2e:	f002 fe99 	bl	8006764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003a32:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a40:	2303      	movs	r3, #3
 8003a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003a44:	2306      	movs	r3, #6
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a52:	f002 fe87 	bl	8006764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin;
 8003a56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a60:	2301      	movs	r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a64:	2303      	movs	r3, #3
 8003a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003a68:	2306      	movs	r3, #6
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a6c:	f107 0314 	add.w	r3, r7, #20
 8003a70:	4619      	mov	r1, r3
 8003a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a76:	f002 fe75 	bl	8006764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a7a:	bf00      	nop
 8003a7c:	3728      	adds	r7, #40	; 0x28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40012c00 	.word	0x40012c00
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	48000400 	.word	0x48000400

08003a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a98:	f107 0314 	add.w	r3, r7, #20
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <HAL_UART_MspInit+0x7c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d127      	bne.n	8003b02 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ab2:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <HAL_UART_MspInit+0x80>)
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	4a16      	ldr	r2, [pc, #88]	; (8003b10 <HAL_UART_MspInit+0x80>)
 8003ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003abc:	6193      	str	r3, [r2, #24]
 8003abe:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <HAL_UART_MspInit+0x80>)
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aca:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <HAL_UART_MspInit+0x80>)
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	4a10      	ldr	r2, [pc, #64]	; (8003b10 <HAL_UART_MspInit+0x80>)
 8003ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad4:	6153      	str	r3, [r2, #20]
 8003ad6:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <HAL_UART_MspInit+0x80>)
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003ae2:	23c0      	movs	r3, #192	; 0xc0
 8003ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aee:	2300      	movs	r3, #0
 8003af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003af2:	2307      	movs	r3, #7
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af6:	f107 0314 	add.w	r3, r7, #20
 8003afa:	4619      	mov	r1, r3
 8003afc:	4805      	ldr	r0, [pc, #20]	; (8003b14 <HAL_UART_MspInit+0x84>)
 8003afe:	f002 fe31 	bl	8006764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003b02:	bf00      	nop
 8003b04:	3728      	adds	r7, #40	; 0x28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40013800 	.word	0x40013800
 8003b10:	40021000 	.word	0x40021000
 8003b14:	48000400 	.word	0x48000400

08003b18 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b1c:	4802      	ldr	r0, [pc, #8]	; (8003b28 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003b1e:	f004 fb14 	bl	800814a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200009e4 	.word	0x200009e4

08003b2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b30:	4802      	ldr	r0, [pc, #8]	; (8003b3c <TIM6_DAC_IRQHandler+0x10>)
 8003b32:	f004 fb0a 	bl	800814a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200009a4 	.word	0x200009a4

08003b40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003b44:	4802      	ldr	r0, [pc, #8]	; (8003b50 <TIM7_IRQHandler+0x10>)
 8003b46:	f004 fb00 	bl	800814a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000a58 	.word	0x20000a58

08003b54 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003b5c:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <_sbrk+0x50>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <_sbrk+0x16>
		heap_end = &end;
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <_sbrk+0x50>)
 8003b66:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <_sbrk+0x54>)
 8003b68:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003b6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <_sbrk+0x50>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <_sbrk+0x50>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4413      	add	r3, r2
 8003b78:	466a      	mov	r2, sp
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d907      	bls.n	8003b8e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003b7e:	f00a fb6b 	bl	800e258 <__errno>
 8003b82:	4602      	mov	r2, r0
 8003b84:	230c      	movs	r3, #12
 8003b86:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003b88:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8c:	e006      	b.n	8003b9c <_sbrk+0x48>
	}

	heap_end += incr;
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <_sbrk+0x50>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	4a03      	ldr	r2, [pc, #12]	; (8003ba4 <_sbrk+0x50>)
 8003b98:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	20000744 	.word	0x20000744
 8003ba8:	20000c78 	.word	0x20000c78

08003bac <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8003bac:	b5b0      	push	{r4, r5, r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	72fb      	strb	r3, [r7, #11]

    pMCP = &MCP_UI_Params;
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <UI_TaskInit+0x64>)
 8003bbe:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <UI_TaskInit+0x68>)
 8003bc0:	601a      	str	r2, [r3, #0]
    pMCP->_Super = UI_Params;
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <UI_TaskInit+0x64>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <UI_TaskInit+0x6c>)
 8003bc8:	461c      	mov	r4, r3
 8003bca:	4615      	mov	r5, r2
 8003bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bd0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003bd4:	e884 0003 	stmia.w	r4, {r0, r1}

    UFCP_Init( & pUSART );
 8003bd8:	4810      	ldr	r0, [pc, #64]	; (8003c1c <UI_TaskInit+0x70>)
 8003bda:	f009 fb58 	bl	800d28e <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <UI_TaskInit+0x64>)
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <UI_TaskInit+0x74>)
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <UI_TaskInit+0x78>)
 8003bec:	4a0e      	ldr	r2, [pc, #56]	; (8003c28 <UI_TaskInit+0x7c>)
 8003bee:	490b      	ldr	r1, [pc, #44]	; (8003c1c <UI_TaskInit+0x70>)
 8003bf0:	f7fe fafc 	bl	80021ec <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <UI_TaskInit+0x64>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	7af9      	ldrb	r1, [r7, #11]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	f000 f85c 	bl	8003cc0 <UI_Init>

}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c10:	20000748 	.word	0x20000748
 8003c14:	20000bbc 	.word	0x20000bbc
 8003c18:	2000071c 	.word	0x2000071c
 8003c1c:	2000054c 	.word	0x2000054c
 8003c20:	0800d5b1 	.word	0x0800d5b1
 8003c24:	0800d4d7 	.word	0x0800d4d7
 8003c28:	0800d51d 	.word	0x0800d51d

08003c2c <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  if(bUITaskCounter > 0u)
 8003c30:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <UI_Scheduler+0x58>)
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d006      	beq.n	8003c48 <UI_Scheduler+0x1c>
  {
    bUITaskCounter--;
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <UI_Scheduler+0x58>)
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <UI_Scheduler+0x58>)
 8003c46:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <UI_Scheduler+0x5c>)
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d906      	bls.n	8003c60 <UI_Scheduler+0x34>
  {
    bCOMTimeoutCounter--;
 8003c52:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <UI_Scheduler+0x5c>)
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <UI_Scheduler+0x5c>)
 8003c5e:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8003c60:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <UI_Scheduler+0x60>)
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d906      	bls.n	8003c78 <UI_Scheduler+0x4c>
  {
    bCOMATRTimeCounter--;
 8003c6a:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <UI_Scheduler+0x60>)
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <UI_Scheduler+0x60>)
 8003c76:	801a      	strh	r2, [r3, #0]
  }
}
 8003c78:	bf00      	nop
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	2000074c 	.word	0x2000074c
 8003c88:	2000074e 	.word	0x2000074e
 8003c8c:	2000068e 	.word	0x2000068e

08003c90 <UI_SerialCommunicationTimeOutStop>:
  }
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  bCOMTimeoutCounter = 0u;
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <UI_SerialCommunicationTimeOutStop+0x14>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	801a      	strh	r2, [r3, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	2000074e 	.word	0x2000074e

08003ca8 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <UI_SerialCommunicationTimeOutStart+0x14>)
 8003cae:	224f      	movs	r2, #79	; 0x4f
 8003cb0:	801a      	strh	r2, [r3, #0]
}
 8003cb2:	bf00      	nop
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	2000074e 	.word	0x2000074e

08003cc0 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	72fb      	strb	r3, [r7, #11]
  pHandle->bDriveNum = bMCNum;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	7afa      	ldrb	r2, [r7, #11]
 8003cd4:	711a      	strb	r2, [r3, #4]
  pHandle->pMCI = pMCI;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	609a      	str	r2, [r3, #8]
  pHandle->pMCT = pMCT;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	60da      	str	r2, [r3, #12]
  pHandle->bSelectedDrive = 0u;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	751a      	strb	r2, [r3, #20]
  pHandle->pUICfg = pUICfg;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	611a      	str	r2, [r3, #16]
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <UI_SelectMC>:
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @param  bSelectMC: The new selected MC, zero based, on which UI operates.
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	460b      	mov	r3, r1
 8003d04:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
  if (bSelectMC  >= pHandle->bDriveNum)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	791b      	ldrb	r3, [r3, #4]
 8003d0e:	78fa      	ldrb	r2, [r7, #3]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d302      	bcc.n	8003d1a <UI_SelectMC+0x20>
  {
    retVal = false;
 8003d14:	2300      	movs	r3, #0
 8003d16:	73fb      	strb	r3, [r7, #15]
 8003d18:	e002      	b.n	8003d20 <UI_SelectMC+0x26>
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	751a      	strb	r2, [r3, #20]
  }
  return retVal;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <UI_GetSelectedMC>:
  * @brief  Allow to retrieve the MC on which UI currently operates.
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  return (pHandle->bSelectedDrive);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7d1b      	ldrb	r3, [r3, #20]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b096      	sub	sp, #88	; 0x58
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	460b      	mov	r3, r1
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	72fb      	strb	r3, [r7, #11]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	7d1b      	ldrb	r3, [r3, #20]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	643b      	str	r3, [r7, #64]	; 0x40
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	7d1b      	ldrb	r3, [r3, #20]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	63fb      	str	r3, [r7, #60]	; 0x3c

  bool retVal = true;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  switch (bRegID)
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	2b5b      	cmp	r3, #91	; 0x5b
 8003d80:	f200 8223 	bhi.w	80041ca <UI_SetReg+0x482>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <UI_SetReg+0x44>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003efd 	.word	0x08003efd
 8003d90:	080041cb 	.word	0x080041cb
 8003d94:	080041cb 	.word	0x080041cb
 8003d98:	08003f6d 	.word	0x08003f6d
 8003d9c:	080041cb 	.word	0x080041cb
 8003da0:	08003f37 	.word	0x08003f37
 8003da4:	08003f49 	.word	0x08003f49
 8003da8:	08003f5b 	.word	0x08003f5b
 8003dac:	08003fa5 	.word	0x08003fa5
 8003db0:	08003fbf 	.word	0x08003fbf
 8003db4:	08003fd1 	.word	0x08003fd1
 8003db8:	08003fe3 	.word	0x08003fe3
 8003dbc:	08003ff5 	.word	0x08003ff5
 8003dc0:	0800400f 	.word	0x0800400f
 8003dc4:	08004021 	.word	0x08004021
 8003dc8:	08004033 	.word	0x08004033
 8003dcc:	08004045 	.word	0x08004045
 8003dd0:	080040a3 	.word	0x080040a3
 8003dd4:	080041cb 	.word	0x080041cb
 8003dd8:	080041cb 	.word	0x080041cb
 8003ddc:	080040ff 	.word	0x080040ff
 8003de0:	0800415b 	.word	0x0800415b
 8003de4:	080041cb 	.word	0x080041cb
 8003de8:	080041cb 	.word	0x080041cb
 8003dec:	080041cb 	.word	0x080041cb
 8003df0:	080041cb 	.word	0x080041cb
 8003df4:	080041cb 	.word	0x080041cb
 8003df8:	080041cb 	.word	0x080041cb
 8003dfc:	080041cb 	.word	0x080041cb
 8003e00:	080041cb 	.word	0x080041cb
 8003e04:	080041cb 	.word	0x080041cb
 8003e08:	080041cb 	.word	0x080041cb
 8003e0c:	080041cb 	.word	0x080041cb
 8003e10:	080041cb 	.word	0x080041cb
 8003e14:	080041cb 	.word	0x080041cb
 8003e18:	080041cb 	.word	0x080041cb
 8003e1c:	080041cb 	.word	0x080041cb
 8003e20:	080041cb 	.word	0x080041cb
 8003e24:	080041cb 	.word	0x080041cb
 8003e28:	080041cb 	.word	0x080041cb
 8003e2c:	080041cb 	.word	0x080041cb
 8003e30:	080041cb 	.word	0x080041cb
 8003e34:	080041cb 	.word	0x080041cb
 8003e38:	080041cb 	.word	0x080041cb
 8003e3c:	080041cb 	.word	0x080041cb
 8003e40:	080041cb 	.word	0x080041cb
 8003e44:	080041cb 	.word	0x080041cb
 8003e48:	080041cb 	.word	0x080041cb
 8003e4c:	080041cb 	.word	0x080041cb
 8003e50:	080041cb 	.word	0x080041cb
 8003e54:	080041cb 	.word	0x080041cb
 8003e58:	080041cb 	.word	0x080041cb
 8003e5c:	080041cb 	.word	0x080041cb
 8003e60:	080041cb 	.word	0x080041cb
 8003e64:	080041cb 	.word	0x080041cb
 8003e68:	080041cb 	.word	0x080041cb
 8003e6c:	080041cb 	.word	0x080041cb
 8003e70:	080041cb 	.word	0x080041cb
 8003e74:	080041cb 	.word	0x080041cb
 8003e78:	080041cb 	.word	0x080041cb
 8003e7c:	080041cb 	.word	0x080041cb
 8003e80:	080041cb 	.word	0x080041cb
 8003e84:	080041cb 	.word	0x080041cb
 8003e88:	080041cb 	.word	0x080041cb
 8003e8c:	080041cb 	.word	0x080041cb
 8003e90:	080041bd 	.word	0x080041bd
 8003e94:	080041cb 	.word	0x080041cb
 8003e98:	080041cb 	.word	0x080041cb
 8003e9c:	080041cb 	.word	0x080041cb
 8003ea0:	080041cb 	.word	0x080041cb
 8003ea4:	080041cb 	.word	0x080041cb
 8003ea8:	080041cb 	.word	0x080041cb
 8003eac:	080041cb 	.word	0x080041cb
 8003eb0:	080041cb 	.word	0x080041cb
 8003eb4:	080041cb 	.word	0x080041cb
 8003eb8:	080041cb 	.word	0x080041cb
 8003ebc:	080041cb 	.word	0x080041cb
 8003ec0:	080041cb 	.word	0x080041cb
 8003ec4:	080041cb 	.word	0x080041cb
 8003ec8:	080041cb 	.word	0x080041cb
 8003ecc:	080041cb 	.word	0x080041cb
 8003ed0:	080041cb 	.word	0x080041cb
 8003ed4:	080041cb 	.word	0x080041cb
 8003ed8:	080041cb 	.word	0x080041cb
 8003edc:	080041cb 	.word	0x080041cb
 8003ee0:	080041cb 	.word	0x080041cb
 8003ee4:	080041cb 	.word	0x080041cb
 8003ee8:	080041cb 	.word	0x080041cb
 8003eec:	080041cb 	.word	0x080041cb
 8003ef0:	080041cb 	.word	0x080041cb
 8003ef4:	080041cb 	.word	0x080041cb
 8003ef8:	08003f11 	.word	0x08003f11
  {
  case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	4619      	mov	r1, r3
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff fef9 	bl	8003cfa <UI_SelectMC>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }
    break;
 8003f0e:	e169      	b.n	80041e4 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	4aa7      	ldr	r2, [pc, #668]	; (80041b8 <UI_SetReg+0x470>)
 8003f1c:	fb82 1203 	smull	r1, r2, r2, r3
 8003f20:	441a      	add	r2, r3
 8003f22:	1152      	asrs	r2, r2, #5
 8003f24:	17db      	asrs	r3, r3, #31
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	b21b      	sxth	r3, r3
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003f30:	f7fc fed3 	bl	8000cda <MCI_ExecSpeedRamp>
    }
    break;
 8003f34:	e156      	b.n	80041e4 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KP:
    {
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8003f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	b212      	sxth	r2, r2
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f005 fff0 	bl	8009f26 <PID_SetKP>
    }
    break;
 8003f46:	e14d      	b.n	80041e4 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KI:
    {
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8003f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	b212      	sxth	r2, r2
 8003f50:	4611      	mov	r1, r2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f005 fff6 	bl	8009f44 <PID_SetKI>
    }
    break;
 8003f58:	e144      	b.n	80041e4 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KD:
    {
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8003f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	b212      	sxth	r2, r2
 8003f62:	4611      	mov	r1, r2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f006 f83c 	bl	8009fe2 <PID_SetKD>
    }
    break;
 8003f6a:	e13b      	b.n	80041e4 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_CONTROL_MODE:
    {
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d108      	bne.n	8003f86 <UI_SetReg+0x23e>
      {
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8003f74:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003f76:	f7fd f8dd 	bl	8001134 <MCI_GetTeref>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003f82:	f7fc fec7 	bl	8000d14 <MCI_ExecTorqueRamp>
      }
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	f040 8121 	bne.w	80041d2 <UI_SetReg+0x48a>
      {
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8003f90:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003f92:	f7fd f832 	bl	8000ffa <MCI_GetMecSpeedRefUnit>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2200      	movs	r2, #0
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003f9e:	f7fc fe9c 	bl	8000cda <MCI_ExecSpeedRamp>
      }
    }
    break;
 8003fa2:	e116      	b.n	80041d2 <UI_SetReg+0x48a>

  case MC_PROTOCOL_REG_TORQUE_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8003fa4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003fa6:	f7fd f87d 	bl	80010a4 <MCI_GetIqdref>
 8003faa:	4603      	mov	r3, r0
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28
      currComp.q = (int16_t)wValue;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	b21b      	sxth	r3, r3
 8003fb2:	853b      	strh	r3, [r7, #40]	; 0x28
      MCI_SetCurrentReferences(pMCI,currComp);
 8003fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fb6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003fb8:	f7fc fec9 	bl	8000d4e <MCI_SetCurrentReferences>
    }
    break;
 8003fbc:	e112      	b.n	80041e4 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KP:
    {
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8003fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	b212      	sxth	r2, r2
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f005 ffac 	bl	8009f26 <PID_SetKP>
    }
    break;
 8003fce:	e109      	b.n	80041e4 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KI:
    {
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8003fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	b212      	sxth	r2, r2
 8003fd8:	4611      	mov	r1, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f005 ffb2 	bl	8009f44 <PID_SetKI>
    }
    break;
 8003fe0:	e100      	b.n	80041e4 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KD:
    {
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	b212      	sxth	r2, r2
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f005 fff8 	bl	8009fe2 <PID_SetKD>
    }
    break;
 8003ff2:	e0f7      	b.n	80041e4 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8003ff4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003ff6:	f7fd f855 	bl	80010a4 <MCI_GetIqdref>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
      currComp.d = (int16_t)wValue;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	b21b      	sxth	r3, r3
 8004002:	84fb      	strh	r3, [r7, #38]	; 0x26
      MCI_SetCurrentReferences(pMCI,currComp);
 8004004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004006:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004008:	f7fc fea1 	bl	8000d4e <MCI_SetCurrentReferences>
    }
    break;
 800400c:	e0ea      	b.n	80041e4 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KP:
    {
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 800400e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	b212      	sxth	r2, r2
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f005 ff84 	bl	8009f26 <PID_SetKP>
    }
    break;
 800401e:	e0e1      	b.n	80041e4 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KI:
    {
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8004020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	b212      	sxth	r2, r2
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f005 ff8a 	bl	8009f44 <PID_SetKI>
    }
    break;
 8004030:	e0d8      	b.n	80041e4 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KD:
    {
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8004032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	b212      	sxth	r2, r2
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f005 ffd0 	bl	8009fe2 <PID_SetKD>
    }
    break;
 8004042:	e0cf      	b.n	80041e4 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_OBSERVER_C1:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	7d1b      	ldrb	r3, [r3, #20]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004054:	2300      	movs	r3, #0
 8004056:	653b      	str	r3, [r7, #80]	; 0x50
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405a:	0f1b      	lsrs	r3, r3, #28
 800405c:	2b09      	cmp	r3, #9
 800405e:	d102      	bne.n	8004066 <UI_SetReg+0x31e>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	653b      	str	r3, [r7, #80]	; 0x50
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	0e1b      	lsrs	r3, r3, #24
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	2b09      	cmp	r3, #9
 8004070:	d102      	bne.n	8004078 <UI_SetReg+0x330>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	653b      	str	r3, [r7, #80]	; 0x50
      }
      if (pSPD != MC_NULL)
 8004078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80ab 	beq.w	80041d6 <UI_SetReg+0x48e>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8004080:	f107 0220 	add.w	r2, r7, #32
 8004084:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8004088:	4619      	mov	r1, r3
 800408a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800408c:	f00a f89a 	bl	800e1c4 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	b21b      	sxth	r3, r3
 8004094:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004098:	4619      	mov	r1, r3
 800409a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800409c:	f00a f89a 	bl	800e1d4 <STO_PLL_SetObserverGains>
      }
    }
    break;
 80040a0:	e099      	b.n	80041d6 <UI_SetReg+0x48e>

  case MC_PROTOCOL_REG_OBSERVER_C2:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	7d1b      	ldrb	r3, [r3, #20]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	0f1b      	lsrs	r3, r3, #28
 80040ba:	2b09      	cmp	r3, #9
 80040bc:	d102      	bne.n	80040c4 <UI_SetReg+0x37c>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80040be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	0e1b      	lsrs	r3, r3, #24
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	2b09      	cmp	r3, #9
 80040ce:	d102      	bne.n	80040d6 <UI_SetReg+0x38e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80040d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      if (pSPD != MC_NULL)
 80040d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d07e      	beq.n	80041da <UI_SetReg+0x492>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80040dc:	f107 021c 	add.w	r2, r7, #28
 80040e0:	f107 031e 	add.w	r3, r7, #30
 80040e4:	4619      	mov	r1, r3
 80040e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80040e8:	f00a f86c 	bl	800e1c4 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 80040ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	b212      	sxth	r2, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80040f8:	f00a f86c 	bl	800e1d4 <STO_PLL_SetObserverGains>
      }
    }
    break;
 80040fc:	e06d      	b.n	80041da <UI_SetReg+0x492>

  case MC_PROTOCOL_REG_PLL_KI:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	7d1b      	ldrb	r3, [r3, #20]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800410e:	2300      	movs	r3, #0
 8004110:	64bb      	str	r3, [r7, #72]	; 0x48
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004114:	0f1b      	lsrs	r3, r3, #28
 8004116:	2b09      	cmp	r3, #9
 8004118:	d102      	bne.n	8004120 <UI_SetReg+0x3d8>
      {
        pSPD = pMCT->pSpeedSensorMain;
 800411a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	64bb      	str	r3, [r7, #72]	; 0x48
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004122:	0e1b      	lsrs	r3, r3, #24
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	2b09      	cmp	r3, #9
 800412a:	d102      	bne.n	8004132 <UI_SetReg+0x3ea>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800412c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	64bb      	str	r3, [r7, #72]	; 0x48
      }
      if (pSPD != MC_NULL)
 8004132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004134:	2b00      	cmp	r3, #0
 8004136:	d052      	beq.n	80041de <UI_SetReg+0x496>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8004138:	f107 0218 	add.w	r2, r7, #24
 800413c:	f107 031a 	add.w	r3, r7, #26
 8004140:	4619      	mov	r1, r3
 8004142:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004144:	f00a f84a 	bl	800e1dc <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8004148:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	b212      	sxth	r2, r2
 8004150:	4619      	mov	r1, r3
 8004152:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004154:	f00a f850 	bl	800e1f8 <STO_SetPLLGains>
      }
    }
    break;
 8004158:	e041      	b.n	80041de <UI_SetReg+0x496>

  case MC_PROTOCOL_REG_PLL_KP:
	{
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	7d1b      	ldrb	r3, [r3, #20]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	63bb      	str	r3, [r7, #56]	; 0x38
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	647b      	str	r3, [r7, #68]	; 0x44
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	0f1b      	lsrs	r3, r3, #28
 8004172:	2b09      	cmp	r3, #9
 8004174:	d102      	bne.n	800417c <UI_SetReg+0x434>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	0e1b      	lsrs	r3, r3, #24
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	2b09      	cmp	r3, #9
 8004186:	d102      	bne.n	800418e <UI_SetReg+0x446>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      if (pSPD != MC_NULL)
 800418e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004190:	2b00      	cmp	r3, #0
 8004192:	d026      	beq.n	80041e2 <UI_SetReg+0x49a>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8004194:	f107 0214 	add.w	r2, r7, #20
 8004198:	f107 0316 	add.w	r3, r7, #22
 800419c:	4619      	mov	r1, r3
 800419e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80041a0:	f00a f81c 	bl	800e1dc <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	b21b      	sxth	r3, r3
 80041a8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80041ac:	4619      	mov	r1, r3
 80041ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80041b0:	f00a f822 	bl	800e1f8 <STO_SetPLLGains>
      }
    }
    break;
 80041b4:	e015      	b.n	80041e2 <UI_SetReg+0x49a>
 80041b6:	bf00      	nop
 80041b8:	88888889 	.word	0x88888889

  case MC_PROTOCOL_REG_IQ_SPEEDMODE:
    {
      MCI_SetIdref(pMCI,(int16_t)wValue);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	b21b      	sxth	r3, r3
 80041c0:	4619      	mov	r1, r3
 80041c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80041c4:	f7fc ffc4 	bl	8001150 <MCI_SetIdref>
    }
    break;
 80041c8:	e00c      	b.n	80041e4 <UI_SetReg+0x49c>

  default:
    retVal = false;
 80041ca:	2300      	movs	r3, #0
 80041cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    break;
 80041d0:	e008      	b.n	80041e4 <UI_SetReg+0x49c>
    break;
 80041d2:	bf00      	nop
 80041d4:	e006      	b.n	80041e4 <UI_SetReg+0x49c>
    break;
 80041d6:	bf00      	nop
 80041d8:	e004      	b.n	80041e4 <UI_SetReg+0x49c>
    break;
 80041da:	bf00      	nop
 80041dc:	e002      	b.n	80041e4 <UI_SetReg+0x49c>
    break;
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <UI_SetReg+0x49c>
    break;
 80041e2:	bf00      	nop
  }

  return retVal;
 80041e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3758      	adds	r7, #88	; 0x58
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b0b6      	sub	sp, #216	; 0xd8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	460b      	mov	r3, r1
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	72fb      	strb	r3, [r7, #11]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	7d1b      	ldrb	r3, [r3, #20]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	7d1b      	ldrb	r3, [r3, #20]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  int32_t bRetVal = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  if ( success != (bool *) 0 ) 
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <UI_GetReg+0x44>
  {
    *success = true;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	701a      	strb	r2, [r3, #0]
  }

  switch (bRegID)
 8004234:	7afb      	ldrb	r3, [r7, #11]
 8004236:	2b81      	cmp	r3, #129	; 0x81
 8004238:	f200 8552 	bhi.w	8004ce0 <UI_GetReg+0xaf0>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <UI_GetReg+0x54>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	0800444d 	.word	0x0800444d
 8004248:	0800445d 	.word	0x0800445d
 800424c:	08004473 	.word	0x08004473
 8004250:	08004593 	.word	0x08004593
 8004254:	08004489 	.word	0x08004489
 8004258:	080044b1 	.word	0x080044b1
 800425c:	080044c7 	.word	0x080044c7
 8004260:	080044dd 	.word	0x080044dd
 8004264:	08004567 	.word	0x08004567
 8004268:	08004625 	.word	0x08004625
 800426c:	08004639 	.word	0x08004639
 8004270:	0800464d 	.word	0x0800464d
 8004274:	0800457d 	.word	0x0800457d
 8004278:	08004677 	.word	0x08004677
 800427c:	0800468b 	.word	0x0800468b
 8004280:	0800469f 	.word	0x0800469f
 8004284:	080046b3 	.word	0x080046b3
 8004288:	08004715 	.word	0x08004715
 800428c:	08004ce1 	.word	0x08004ce1
 8004290:	08004ce1 	.word	0x08004ce1
 8004294:	0800483b 	.word	0x0800483b
 8004298:	080047d9 	.word	0x080047d9
 800429c:	08004ce1 	.word	0x08004ce1
 80042a0:	08004ce1 	.word	0x08004ce1
 80042a4:	08004ce1 	.word	0x08004ce1
 80042a8:	080044f3 	.word	0x080044f3
 80042ac:	08004509 	.word	0x08004509
 80042b0:	08004b4b 	.word	0x08004b4b
 80042b4:	08004ce1 	.word	0x08004ce1
 80042b8:	08004ce1 	.word	0x08004ce1
 80042bc:	0800451d 	.word	0x0800451d
 80042c0:	08004bb3 	.word	0x08004bb3
 80042c4:	08004bc9 	.word	0x08004bc9
 80042c8:	08004ce1 	.word	0x08004ce1
 80042cc:	08004bdf 	.word	0x08004bdf
 80042d0:	08004c05 	.word	0x08004c05
 80042d4:	08004c1b 	.word	0x08004c1b
 80042d8:	08004c31 	.word	0x08004c31
 80042dc:	08004c47 	.word	0x08004c47
 80042e0:	08004bb3 	.word	0x08004bb3
 80042e4:	08004bc9 	.word	0x08004bc9
 80042e8:	08004c5d 	.word	0x08004c5d
 80042ec:	08004c73 	.word	0x08004c73
 80042f0:	08004c89 	.word	0x08004c89
 80042f4:	08004c9f 	.word	0x08004c9f
 80042f8:	08004cb5 	.word	0x08004cb5
 80042fc:	08004ccb 	.word	0x08004ccb
 8004300:	08004ce1 	.word	0x08004ce1
 8004304:	08004ce1 	.word	0x08004ce1
 8004308:	08004777 	.word	0x08004777
 800430c:	0800489d 	.word	0x0800489d
 8004310:	080048fb 	.word	0x080048fb
 8004314:	0800495f 	.word	0x0800495f
 8004318:	080049c3 	.word	0x080049c3
 800431c:	08004a27 	.word	0x08004a27
 8004320:	08004ce1 	.word	0x08004ce1
 8004324:	08004ce1 	.word	0x08004ce1
 8004328:	08004ce1 	.word	0x08004ce1
 800432c:	08004ce1 	.word	0x08004ce1
 8004330:	08004ce1 	.word	0x08004ce1
 8004334:	08004ce1 	.word	0x08004ce1
 8004338:	08004ce1 	.word	0x08004ce1
 800433c:	08004ce1 	.word	0x08004ce1
 8004340:	08004b5f 	.word	0x08004b5f
 8004344:	08004b89 	.word	0x08004b89
 8004348:	08004661 	.word	0x08004661
 800434c:	08004a8b 	.word	0x08004a8b
 8004350:	08004aeb 	.word	0x08004aeb
 8004354:	08004ce1 	.word	0x08004ce1
 8004358:	08004ce1 	.word	0x08004ce1
 800435c:	08004ce1 	.word	0x08004ce1
 8004360:	08004ce1 	.word	0x08004ce1
 8004364:	08004ce1 	.word	0x08004ce1
 8004368:	08004ce1 	.word	0x08004ce1
 800436c:	08004ce1 	.word	0x08004ce1
 8004370:	08004ce1 	.word	0x08004ce1
 8004374:	08004ce1 	.word	0x08004ce1
 8004378:	08004ce1 	.word	0x08004ce1
 800437c:	08004ce1 	.word	0x08004ce1
 8004380:	08004ce1 	.word	0x08004ce1
 8004384:	08004ce1 	.word	0x08004ce1
 8004388:	08004ce1 	.word	0x08004ce1
 800438c:	08004ce1 	.word	0x08004ce1
 8004390:	08004ce1 	.word	0x08004ce1
 8004394:	08004ce1 	.word	0x08004ce1
 8004398:	08004ce1 	.word	0x08004ce1
 800439c:	08004ce1 	.word	0x08004ce1
 80043a0:	08004ce1 	.word	0x08004ce1
 80043a4:	08004ce1 	.word	0x08004ce1
 80043a8:	08004ce1 	.word	0x08004ce1
 80043ac:	08004ce1 	.word	0x08004ce1
 80043b0:	080045a3 	.word	0x080045a3
 80043b4:	08004ce1 	.word	0x08004ce1
 80043b8:	08004ce1 	.word	0x08004ce1
 80043bc:	08004ce1 	.word	0x08004ce1
 80043c0:	08004ce1 	.word	0x08004ce1
 80043c4:	08004ce1 	.word	0x08004ce1
 80043c8:	08004ce1 	.word	0x08004ce1
 80043cc:	08004ce1 	.word	0x08004ce1
 80043d0:	08004ce1 	.word	0x08004ce1
 80043d4:	08004ce1 	.word	0x08004ce1
 80043d8:	08004ce1 	.word	0x08004ce1
 80043dc:	08004ce1 	.word	0x08004ce1
 80043e0:	08004ce1 	.word	0x08004ce1
 80043e4:	08004ce1 	.word	0x08004ce1
 80043e8:	08004ce1 	.word	0x08004ce1
 80043ec:	08004ce1 	.word	0x08004ce1
 80043f0:	08004ce1 	.word	0x08004ce1
 80043f4:	08004ce1 	.word	0x08004ce1
 80043f8:	08004ce1 	.word	0x08004ce1
 80043fc:	080045fd 	.word	0x080045fd
 8004400:	08004611 	.word	0x08004611
 8004404:	08004543 	.word	0x08004543
 8004408:	08004ce1 	.word	0x08004ce1
 800440c:	0800454b 	.word	0x0800454b
 8004410:	08004555 	.word	0x08004555
 8004414:	08004ce1 	.word	0x08004ce1
 8004418:	08004ce1 	.word	0x08004ce1
 800441c:	08004ce1 	.word	0x08004ce1
 8004420:	08004ce1 	.word	0x08004ce1
 8004424:	08004ce1 	.word	0x08004ce1
 8004428:	08004ce1 	.word	0x08004ce1
 800442c:	08004ce1 	.word	0x08004ce1
 8004430:	08004ce1 	.word	0x08004ce1
 8004434:	08004ce1 	.word	0x08004ce1
 8004438:	08004ce1 	.word	0x08004ce1
 800443c:	08004ce1 	.word	0x08004ce1
 8004440:	08004ce1 	.word	0x08004ce1
 8004444:	08004ce1 	.word	0x08004ce1
 8004448:	0800455f 	.word	0x0800455f
  {
    case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff fc6e 	bl	8003d2e <UI_GetSelectedMC>
 8004452:	4603      	mov	r3, r0
 8004454:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004458:	f000 bc5a 	b.w	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLAGS:
    {
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 800445c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	4618      	mov	r0, r3
 8004464:	f008 feaf 	bl	800d1c6 <STM_GetFaultState>
 8004468:	4603      	mov	r3, r0
 800446a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
	break;
 800446e:	f000 bc4f 	b.w	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_STATUS:
    {
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8004472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	4618      	mov	r0, r3
 800447a:	f008 fe7f 	bl	800d17c <STM_GetState>
 800447e:	4603      	mov	r3, r0
 8004480:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
	break;
 8004484:	f000 bc44 	b.w	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_REF:
    {
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8004488:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800448c:	f7fc fdb5 	bl	8000ffa <MCI_GetMecSpeedRefUnit>
 8004490:	4603      	mov	r3, r0
 8004492:	461a      	mov	r2, r3
 8004494:	4613      	mov	r3, r2
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4acc      	ldr	r2, [pc, #816]	; (80047d0 <UI_GetReg+0x5e0>)
 800449e:	fb82 1203 	smull	r1, r2, r2, r3
 80044a2:	1092      	asrs	r2, r2, #2
 80044a4:	17db      	asrs	r3, r3, #31
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80044ac:	f000 bc30 	b.w	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 80044b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f005 fd53 	bl	8009f62 <PID_GetKP>
 80044bc:	4603      	mov	r3, r0
 80044be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80044c2:	f000 bc25 	b.w	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 80044c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f005 fd55 	bl	8009f7c <PID_GetKI>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80044d8:	f000 bc1a 	b.w	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 80044dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f005 fd8c 	bl	800a000 <PID_GetKD>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80044ee:	f000 bc0f 	b.w	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_BUS_VOLTAGE:
    {
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80044f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	4618      	mov	r0, r3
 80044fa:	f005 fabb 	bl	8009a74 <VBS_GetAvBusVoltage_V>
 80044fe:	4603      	mov	r3, r0
 8004500:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004504:	f000 bc04 	b.w	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_HEATS_TEMP:
    {
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8004508:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	4618      	mov	r0, r3
 8004510:	f005 fcb9 	bl	8009e86 <NTC_GetAvTemp_C>
 8004514:	4603      	mov	r3, r0
 8004516:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800451a:	e3f9      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_MEAS:
    {
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 800451c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004520:	f7fc fd59 	bl	8000fd6 <MCI_GetAvrgMecSpeedUnit>
 8004524:	4603      	mov	r3, r0
 8004526:	461a      	mov	r2, r3
 8004528:	4613      	mov	r3, r2
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4aa7      	ldr	r2, [pc, #668]	; (80047d0 <UI_GetReg+0x5e0>)
 8004532:	fb82 1203 	smull	r1, r2, r2, r3
 8004536:	1092      	asrs	r2, r2, #2
 8004538:	17db      	asrs	r3, r3, #31
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004540:	e3e6      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_UID:
    {
      bRetVal = (int32_t)(MC_UID);
 8004542:	4ba4      	ldr	r3, [pc, #656]	; (80047d4 <UI_GetReg+0x5e4>)
 8004544:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004548:	e3e2      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_CTRBDID:
    {
      bRetVal = CTRBDID;
 800454a:	f242 731d 	movw	r3, #10013	; 0x271d
 800454e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004552:	e3dd      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_PWBDID:
    {
      bRetVal = PWBDID;
 8004554:	f242 731d 	movw	r3, #10013	; 0x271d
 8004558:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800455c:	e3d8      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_PWBDID2:
    {
      bRetVal = (uint32_t) 0;
 800455e:	2300      	movs	r3, #0
 8004560:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004564:	e3d4      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004566:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800456a:	f7fc fd9b 	bl	80010a4 <MCI_GetIqdref>
 800456e:	4603      	mov	r3, r0
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
      bRetVal = (int32_t)currComp.q;
 8004572:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8004576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800457a:	e3c9      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 800457c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004580:	f7fc fd90 	bl	80010a4 <MCI_GetIqdref>
 8004584:	4603      	mov	r3, r0
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
      bRetVal = (int32_t)currComp.d;
 8004588:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800458c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004590:	e3be      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_CONTROL_MODE:
    {
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8004592:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004596:	f7fc fcb9 	bl	8000f0c <MCI_GetControlMode>
 800459a:	4603      	mov	r3, r0
 800459c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80045a0:	e3b6      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80045a2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80045a6:	f7fc fcb1 	bl	8000f0c <MCI_GetControlMode>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d112      	bne.n	80045d6 <UI_GetReg+0x3e6>
      {
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80045b0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80045b4:	f7fc fced 	bl	8000f92 <MCI_GetLastRampFinalSpeed>
 80045b8:	4603      	mov	r3, r0
 80045ba:	461a      	mov	r2, r3
 80045bc:	4613      	mov	r3, r2
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4a82      	ldr	r2, [pc, #520]	; (80047d0 <UI_GetReg+0x5e0>)
 80045c6:	fb82 1203 	smull	r1, r2, r2, r3
 80045ca:	1092      	asrs	r2, r2, #2
 80045cc:	17db      	asrs	r3, r3, #31
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      else
      {
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
      }
    }
    break;
 80045d4:	e39c      	b.n	8004d10 <UI_GetReg+0xb20>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 80045d6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80045da:	f7fc fd0e 	bl	8000ffa <MCI_GetMecSpeedRefUnit>
 80045de:	4603      	mov	r3, r0
 80045e0:	461a      	mov	r2, r3
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4a79      	ldr	r2, [pc, #484]	; (80047d0 <UI_GetReg+0x5e0>)
 80045ec:	fb82 1203 	smull	r1, r2, r2, r3
 80045f0:	1092      	asrs	r2, r2, #2
 80045f2:	17db      	asrs	r3, r3, #31
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    break;
 80045fa:	e389      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KP_DIV:
    {
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 80045fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f005 fcd5 	bl	8009fb2 <PID_GetKPDivisor>
 8004608:	4603      	mov	r3, r0
 800460a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800460e:	e37f      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KI_DIV:
    {
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8004610:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f005 fcd7 	bl	8009fca <PID_GetKIDivisor>
 800461c:	4603      	mov	r3, r0
 800461e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004622:	e375      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8004624:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4618      	mov	r0, r3
 800462c:	f005 fc99 	bl	8009f62 <PID_GetKP>
 8004630:	4603      	mov	r3, r0
 8004632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004636:	e36b      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8004638:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4618      	mov	r0, r3
 8004640:	f005 fc9c 	bl	8009f7c <PID_GetKI>
 8004644:	4603      	mov	r3, r0
 8004646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800464a:	e361      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 800464c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4618      	mov	r0, r3
 8004654:	f005 fcd4 	bl	800a000 <PID_GetKD>
 8004658:	4603      	mov	r3, r0
 800465a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800465e:	e357      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_IQ_SPEEDMODE:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004660:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004664:	f7fc fd1e 	bl	80010a4 <MCI_GetIqdref>
 8004668:	4603      	mov	r3, r0
 800466a:	623b      	str	r3, [r7, #32]
      bRetVal = (int32_t)currComp.d;
 800466c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004670:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004674:	e34c      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8004676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4618      	mov	r0, r3
 800467e:	f005 fc70 	bl	8009f62 <PID_GetKP>
 8004682:	4603      	mov	r3, r0
 8004684:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004688:	e342      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 800468a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4618      	mov	r0, r3
 8004692:	f005 fc73 	bl	8009f7c <PID_GetKI>
 8004696:	4603      	mov	r3, r0
 8004698:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800469c:	e338      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 800469e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f005 fcab 	bl	800a000 <PID_GetKD>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80046b0:	e32e      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBSERVER_C1:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	7d1b      	ldrb	r3, [r3, #20]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	66fb      	str	r3, [r7, #108]	; 0x6c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80046c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ca:	0f1b      	lsrs	r3, r3, #28
 80046cc:	2b09      	cmp	r3, #9
 80046ce:	d104      	bne.n	80046da <UI_GetReg+0x4ea>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80046d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80046da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046dc:	0e1b      	lsrs	r3, r3, #24
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	2b09      	cmp	r3, #9
 80046e4:	d104      	bne.n	80046f0 <UI_GetReg+0x500>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80046e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }
      if (pSPD != MC_NULL)
 80046f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d008      	beq.n	800470a <UI_GetReg+0x51a>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80046f8:	f107 021c 	add.w	r2, r7, #28
 80046fc:	f107 031e 	add.w	r3, r7, #30
 8004700:	4619      	mov	r1, r3
 8004702:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8004706:	f009 fd5d 	bl	800e1c4 <STO_PLL_GetObserverGains>
      }
      bRetVal = (int32_t)hC1;
 800470a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800470e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004712:	e2fd      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBSERVER_C2:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	7d1b      	ldrb	r3, [r3, #20]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	673b      	str	r3, [r7, #112]	; 0x70
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800472a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800472c:	0f1b      	lsrs	r3, r3, #28
 800472e:	2b09      	cmp	r3, #9
 8004730:	d104      	bne.n	800473c <UI_GetReg+0x54c>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800473c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800473e:	0e1b      	lsrs	r3, r3, #24
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	2b09      	cmp	r3, #9
 8004746:	d104      	bne.n	8004752 <UI_GetReg+0x562>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004748:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      }
      if (pSPD != MC_NULL)
 8004752:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004756:	2b00      	cmp	r3, #0
 8004758:	d008      	beq.n	800476c <UI_GetReg+0x57c>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 800475a:	f107 0218 	add.w	r2, r7, #24
 800475e:	f107 031a 	add.w	r3, r7, #26
 8004762:	4619      	mov	r1, r3
 8004764:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8004768:	f009 fd2c 	bl	800e1c4 <STO_PLL_GetObserverGains>
      }
      bRetVal = (int32_t)hC2;
 800476c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004770:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004774:	e2cc      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBS_EL_ANGLE:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	7d1b      	ldrb	r3, [r3, #20]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	67fb      	str	r3, [r7, #124]	; 0x7c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800478c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800478e:	0f1b      	lsrs	r3, r3, #28
 8004790:	2b09      	cmp	r3, #9
 8004792:	d104      	bne.n	800479e <UI_GetReg+0x5ae>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004794:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800479e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047a0:	0e1b      	lsrs	r3, r3, #24
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	2b09      	cmp	r3, #9
 80047a8:	d104      	bne.n	80047b4 <UI_GetReg+0x5c4>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80047aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      }
      if (pSPD != MC_NULL)
 80047b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8298 	beq.w	8004cee <UI_GetReg+0xafe>
      {
        bRetVal = SPD_GetElAngle(pSPD);
 80047be:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80047c2:	f008 f882 	bl	800c8ca <SPD_GetElAngle>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80047cc:	e28f      	b.n	8004cee <UI_GetReg+0xafe>
 80047ce:	bf00      	nop
 80047d0:	66666667 	.word	0x66666667
 80047d4:	34a6847a 	.word	0x34a6847a

    case MC_PROTOCOL_REG_PLL_KP:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	7d1b      	ldrb	r3, [r3, #20]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	67bb      	str	r3, [r7, #120]	; 0x78
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80047ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f0:	0f1b      	lsrs	r3, r3, #28
 80047f2:	2b09      	cmp	r3, #9
 80047f4:	d104      	bne.n	8004800 <UI_GetReg+0x610>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80047f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004802:	0e1b      	lsrs	r3, r3, #24
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	2b09      	cmp	r3, #9
 800480a:	d104      	bne.n	8004816 <UI_GetReg+0x626>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800480c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      }
      if (pSPD != MC_NULL)
 8004816:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <UI_GetReg+0x640>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800481e:	f107 0214 	add.w	r2, r7, #20
 8004822:	f107 0316 	add.w	r3, r7, #22
 8004826:	4619      	mov	r1, r3
 8004828:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800482c:	f009 fcd6 	bl	800e1dc <STO_GetPLLGains>
      }
      bRetVal = (int32_t)hPgain;
 8004830:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004834:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004838:	e26a      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_PLL_KI:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	7d1b      	ldrb	r3, [r3, #20]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	677b      	str	r3, [r7, #116]	; 0x74
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004852:	0f1b      	lsrs	r3, r3, #28
 8004854:	2b09      	cmp	r3, #9
 8004856:	d104      	bne.n	8004862 <UI_GetReg+0x672>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004858:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004864:	0e1b      	lsrs	r3, r3, #24
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	2b09      	cmp	r3, #9
 800486c:	d104      	bne.n	8004878 <UI_GetReg+0x688>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800486e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
      if (pSPD != MC_NULL)
 8004878:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <UI_GetReg+0x6a2>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8004880:	f107 0210 	add.w	r2, r7, #16
 8004884:	f107 0312 	add.w	r3, r7, #18
 8004888:	4619      	mov	r1, r3
 800488a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800488e:	f009 fca5 	bl	800e1dc <STO_GetPLLGains>
      }
      bRetVal = (int32_t)hIgain;
 8004892:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800489a:	e239      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBS_ROT_SPEED:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	7d1b      	ldrb	r3, [r3, #20]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80048b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048b8:	0f1b      	lsrs	r3, r3, #28
 80048ba:	2b09      	cmp	r3, #9
 80048bc:	d104      	bne.n	80048c8 <UI_GetReg+0x6d8>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80048be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80048c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048cc:	0e1b      	lsrs	r3, r3, #24
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	2b09      	cmp	r3, #9
 80048d4:	d104      	bne.n	80048e0 <UI_GetReg+0x6f0>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80048d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      }
      if (pSPD != MC_NULL)
 80048e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8204 	beq.w	8004cf2 <UI_GetReg+0xb02>
      {
        bRetVal = SPD_GetS16Speed(pSPD);
 80048ea:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80048ee:	f008 f87e 	bl	800c9ee <SPD_GetS16Speed>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80048f8:	e1fb      	b.n	8004cf2 <UI_GetReg+0xb02>

    case MC_PROTOCOL_REG_OBS_I_ALPHA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	7d1b      	ldrb	r3, [r3, #20]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800490c:	2300      	movs	r3, #0
 800490e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004912:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004916:	0f1b      	lsrs	r3, r3, #28
 8004918:	2b09      	cmp	r3, #9
 800491a:	d104      	bne.n	8004926 <UI_GetReg+0x736>
      {
        pSPD = pMCT->pSpeedSensorMain;
 800491c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004926:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800492a:	0e1b      	lsrs	r3, r3, #24
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	2b09      	cmp	r3, #9
 8004932:	d104      	bne.n	800493e <UI_GetReg+0x74e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004934:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      }
      if (pSPD != MC_NULL)
 800493e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 81d7 	beq.w	8004cf6 <UI_GetReg+0xb06>
      {
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 8004948:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800494c:	f009 fc26 	bl	800e19c <STO_PLL_GetEstimatedCurrent>
 8004950:	4603      	mov	r3, r0
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004954:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8004958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 800495c:	e1cb      	b.n	8004cf6 <UI_GetReg+0xb06>

    case MC_PROTOCOL_REG_OBS_I_BETA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	7d1b      	ldrb	r3, [r3, #20]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004970:	2300      	movs	r3, #0
 8004972:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004976:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800497a:	0f1b      	lsrs	r3, r3, #28
 800497c:	2b09      	cmp	r3, #9
 800497e:	d104      	bne.n	800498a <UI_GetReg+0x79a>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004980:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800498a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800498e:	0e1b      	lsrs	r3, r3, #24
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	2b09      	cmp	r3, #9
 8004996:	d104      	bne.n	80049a2 <UI_GetReg+0x7b2>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004998:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      if (pSPD != MC_NULL)
 80049a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 81a7 	beq.w	8004cfa <UI_GetReg+0xb0a>
      {
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 80049ac:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80049b0:	f009 fbf4 	bl	800e19c <STO_PLL_GetEstimatedCurrent>
 80049b4:	4603      	mov	r3, r0
 80049b6:	633b      	str	r3, [r7, #48]	; 0x30
 80049b8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80049bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80049c0:	e19b      	b.n	8004cfa <UI_GetReg+0xb0a>

    case MC_PROTOCOL_REG_OBS_BEMF_ALPHA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	7d1b      	ldrb	r3, [r3, #20]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80049da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049de:	0f1b      	lsrs	r3, r3, #28
 80049e0:	2b09      	cmp	r3, #9
 80049e2:	d104      	bne.n	80049ee <UI_GetReg+0x7fe>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80049e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80049ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049f2:	0e1b      	lsrs	r3, r3, #24
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	2b09      	cmp	r3, #9
 80049fa:	d104      	bne.n	8004a06 <UI_GetReg+0x816>
      {
        pSPD =  pMCT->pSpeedSensorAux;
 80049fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      }
      if (pSPD != MC_NULL)
 8004a06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8177 	beq.w	8004cfe <UI_GetReg+0xb0e>
      {
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 8004a10:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8004a14:	f009 fbb6 	bl	800e184 <STO_PLL_GetEstimatedBemf>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8004a20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8004a24:	e16b      	b.n	8004cfe <UI_GetReg+0xb0e>

    case MC_PROTOCOL_REG_OBS_BEMF_BETA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	7d1b      	ldrb	r3, [r3, #20]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004a3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a42:	0f1b      	lsrs	r3, r3, #28
 8004a44:	2b09      	cmp	r3, #9
 8004a46:	d104      	bne.n	8004a52 <UI_GetReg+0x862>
      {
       pSPD = pMCT->pSpeedSensorMain;
 8004a48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a56:	0e1b      	lsrs	r3, r3, #24
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	2b09      	cmp	r3, #9
 8004a5e:	d104      	bne.n	8004a6a <UI_GetReg+0x87a>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004a60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      }
      if (pSPD != MC_NULL)
 8004a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8147 	beq.w	8004d02 <UI_GetReg+0xb12>
      {
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 8004a74:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004a78:	f009 fb84 	bl	800e184 <STO_PLL_GetEstimatedBemf>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a80:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8004a84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8004a88:	e13b      	b.n	8004d02 <UI_GetReg+0xb12>

    case MC_PROTOCOL_REG_EST_BEMF_LEVEL:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	691a      	ldr	r2, [r3, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	7d1b      	ldrb	r3, [r3, #20]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004aa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004aa6:	0f1b      	lsrs	r3, r3, #28
 8004aa8:	2b09      	cmp	r3, #9
 8004aaa:	d104      	bne.n	8004ab6 <UI_GetReg+0x8c6>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004aac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004ab6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004aba:	0e1b      	lsrs	r3, r3, #24
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	2b09      	cmp	r3, #9
 8004ac2:	d104      	bne.n	8004ace <UI_GetReg+0x8de>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004ac4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      }
      if (pSPD != MC_NULL)
 8004ace:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8117 	beq.w	8004d06 <UI_GetReg+0xb16>
      {
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8004ad8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004adc:	f009 fba4 	bl	800e228 <STO_PLL_GetEstimatedBemfLevel>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	141b      	asrs	r3, r3, #16
 8004ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8004ae8:	e10d      	b.n	8004d06 <UI_GetReg+0xb16>

    case MC_PROTOCOL_REG_OBS_BEMF_LEVEL:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	7d1b      	ldrb	r3, [r3, #20]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004b02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b06:	0f1b      	lsrs	r3, r3, #28
 8004b08:	2b09      	cmp	r3, #9
 8004b0a:	d104      	bne.n	8004b16 <UI_GetReg+0x926>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004b0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b1a:	0e1b      	lsrs	r3, r3, #24
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	2b09      	cmp	r3, #9
 8004b22:	d104      	bne.n	8004b2e <UI_GetReg+0x93e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004b24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      }
      if (pSPD != MC_NULL)
 8004b2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 80e9 	beq.w	8004d0a <UI_GetReg+0xb1a>
      {
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8004b38:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004b3c:	f009 fb78 	bl	800e230 <STO_PLL_GetObservedBemfLevel>
 8004b40:	4603      	mov	r3, r0
 8004b42:	141b      	asrs	r3, r3, #16
 8004b44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8004b48:	e0df      	b.n	8004d0a <UI_GetReg+0xb1a>

    case MC_PROTOCOL_REG_MOTOR_POWER:
    {
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8004b4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b50:	4618      	mov	r0, r3
 8004b52:	f005 f8fd 	bl	8009d50 <MPM_GetAvrgElMotorPowerW>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004b5c:	e0d8      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_MAX_APP_SPEED:
    {
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8004b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	4618      	mov	r0, r3
 8004b66:	f008 f910 	bl	800cd8a <STC_GetMaxAppPositiveMecSpeedUnit>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4613      	mov	r3, r2
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4a69      	ldr	r2, [pc, #420]	; (8004d1c <UI_GetReg+0xb2c>)
 8004b78:	fb82 1203 	smull	r1, r2, r2, r3
 8004b7c:	1092      	asrs	r2, r2, #2
 8004b7e:	17db      	asrs	r3, r3, #31
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004b86:	e0c3      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_MIN_APP_SPEED:
    {
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8004b88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f008 f907 	bl	800cda2 <STC_GetMinAppNegativeMecSpeedUnit>
 8004b94:	4603      	mov	r3, r0
 8004b96:	461a      	mov	r2, r3
 8004b98:	4613      	mov	r3, r2
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	1a9b      	subs	r3, r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4a5e      	ldr	r2, [pc, #376]	; (8004d1c <UI_GetReg+0xb2c>)
 8004ba2:	fb82 1203 	smull	r1, r2, r2, r3
 8004ba6:	1092      	asrs	r2, r2, #2
 8004ba8:	17db      	asrs	r3, r3, #31
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004bb0:	e0ae      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_MEAS:
    case MC_PROTOCOL_REG_I_Q:
    {
      bRetVal = MCI_GetIqd(pMCI).q;
 8004bb2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004bb6:	f7fc fa5d 	bl	8001074 <MCI_GetIqd>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bbe:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8004bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004bc6:	e0a3      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_MEAS:
    case MC_PROTOCOL_REG_I_D:
    {
      bRetVal = MCI_GetIqd(pMCI).d;
 8004bc8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004bcc:	f7fc fa52 	bl	8001074 <MCI_GetIqd>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	643b      	str	r3, [r7, #64]	; 0x40
 8004bd4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8004bd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004bdc:	e098      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_RUC_STAGE_NBR:
    {
      if (pMCT->pRevupCtrl)
 8004bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d009      	beq.n	8004bfc <UI_GetReg+0xa0c>
      {
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8004be8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f009 f84a 	bl	800dc88 <RUC_GetNumberOfPhases>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      else
      {
        bRetVal = (uint32_t) 0;
      }
    }
    break;
 8004bfa:	e089      	b.n	8004d10 <UI_GetReg+0xb20>
        bRetVal = (uint32_t) 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    break;
 8004c02:	e085      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_A:
    {
      bRetVal = MCI_GetIab(pMCI).a;
 8004c04:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004c08:	f7fc fa05 	bl	8001016 <MCI_GetIab>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c10:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8004c14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004c18:	e07a      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_B:
    {
      bRetVal = MCI_GetIab(pMCI).b;
 8004c1a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004c1e:	f7fc f9fa 	bl	8001016 <MCI_GetIab>
 8004c22:	4603      	mov	r3, r0
 8004c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c26:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004c2e:	e06f      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_ALPHA:
    {
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8004c30:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004c34:	f7fc fa06 	bl	8001044 <MCI_GetIalphabeta>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c3c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004c40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004c44:	e064      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_BETA:
    {
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8004c46:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004c4a:	f7fc f9fb 	bl	8001044 <MCI_GetIalphabeta>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	653b      	str	r3, [r7, #80]	; 0x50
 8004c52:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004c5a:	e059      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_Q_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).q;
 8004c5c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004c60:	f7fc fa20 	bl	80010a4 <MCI_GetIqdref>
 8004c64:	4603      	mov	r3, r0
 8004c66:	657b      	str	r3, [r7, #84]	; 0x54
 8004c68:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004c6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004c70:	e04e      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 8004c72:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004c76:	f7fc fa15 	bl	80010a4 <MCI_GetIqdref>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c7e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8004c82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004c86:	e043      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_V_Q:
    {
      bRetVal = MCI_GetVqd(pMCI).q;
 8004c88:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004c8c:	f7fc fa22 	bl	80010d4 <MCI_GetVqd>
 8004c90:	4603      	mov	r3, r0
 8004c92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c94:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8004c98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004c9c:	e038      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_V_D:
    {
      bRetVal = MCI_GetVqd(pMCI).d;
 8004c9e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004ca2:	f7fc fa17 	bl	80010d4 <MCI_GetVqd>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8004caa:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8004cae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004cb2:	e02d      	b.n	8004d10 <UI_GetReg+0xb20>

   case MC_PROTOCOL_REG_V_ALPHA:
    {
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8004cb4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004cb8:	f7fc fa24 	bl	8001104 <MCI_GetValphabeta>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	667b      	str	r3, [r7, #100]	; 0x64
 8004cc0:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8004cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004cc8:	e022      	b.n	8004d10 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_V_BETA:
    {
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8004cca:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004cce:	f7fc fa19 	bl	8001104 <MCI_GetValphabeta>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cd6:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8004cda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004cde:	e017      	b.n	8004d10 <UI_GetReg+0xb20>

    default:
	{
      if ( success != (bool *) 0 ) 
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d013      	beq.n	8004d0e <UI_GetReg+0xb1e>
      {
        *success = false;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
      }
	}
    break;
 8004cec:	e00f      	b.n	8004d0e <UI_GetReg+0xb1e>
    break;
 8004cee:	bf00      	nop
 8004cf0:	e00e      	b.n	8004d10 <UI_GetReg+0xb20>
    break;
 8004cf2:	bf00      	nop
 8004cf4:	e00c      	b.n	8004d10 <UI_GetReg+0xb20>
    break;
 8004cf6:	bf00      	nop
 8004cf8:	e00a      	b.n	8004d10 <UI_GetReg+0xb20>
    break;
 8004cfa:	bf00      	nop
 8004cfc:	e008      	b.n	8004d10 <UI_GetReg+0xb20>
    break;
 8004cfe:	bf00      	nop
 8004d00:	e006      	b.n	8004d10 <UI_GetReg+0xb20>
    break;
 8004d02:	bf00      	nop
 8004d04:	e004      	b.n	8004d10 <UI_GetReg+0xb20>
    break;
 8004d06:	bf00      	nop
 8004d08:	e002      	b.n	8004d10 <UI_GetReg+0xb20>
    break;
 8004d0a:	bf00      	nop
 8004d0c:	e000      	b.n	8004d10 <UI_GetReg+0xb20>
    break;
 8004d0e:	bf00      	nop
  }
  return bRetVal;
 8004d10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	37d8      	adds	r7, #216	; 0xd8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	66666667 	.word	0x66666667

08004d20 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	7d1b      	ldrb	r3, [r3, #20]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60bb      	str	r3, [r7, #8]

  switch (bCmdID)
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	2b0d      	cmp	r3, #13
 8004d46:	d84b      	bhi.n	8004de0 <UI_ExecCmd+0xc0>
 8004d48:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <UI_ExecCmd+0x30>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d89 	.word	0x08004d89
 8004d54:	08004d91 	.word	0x08004d91
 8004d58:	08004d99 	.word	0x08004d99
 8004d5c:	08004de7 	.word	0x08004de7
 8004d60:	08004de7 	.word	0x08004de7
 8004d64:	08004dad 	.word	0x08004dad
 8004d68:	08004dc9 	.word	0x08004dc9
 8004d6c:	08004dd1 	.word	0x08004dd1
 8004d70:	08004dd9 	.word	0x08004dd9
 8004d74:	08004de1 	.word	0x08004de1
 8004d78:	08004de1 	.word	0x08004de1
 8004d7c:	08004de1 	.word	0x08004de1
 8004d80:	08004de1 	.word	0x08004de1
 8004d84:	08004d91 	.word	0x08004d91
  {
  case MC_PROTOCOL_CMD_START_MOTOR:
    {
      /* Call MCI Start motor; */
      MCI_StartMotor(pMCI);
 8004d88:	68b8      	ldr	r0, [r7, #8]
 8004d8a:	f7fb fffc 	bl	8000d86 <MCI_StartMotor>
    }
    break;
 8004d8e:	e02d      	b.n	8004dec <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_STOP_MOTOR:
  case MC_PROTOCOL_CMD_SC_STOP:
    {
      /* Call MCI Stop motor; */
      MCI_StopMotor(pMCI);
 8004d90:	68b8      	ldr	r0, [r7, #8]
 8004d92:	f7fc f80f 	bl	8000db4 <MCI_StopMotor>
    }
    break;
 8004d96:	e029      	b.n	8004dec <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 8004d98:	68b8      	ldr	r0, [r7, #8]
 8004d9a:	f7fc f89a 	bl	8000ed2 <MCI_GetSTMState>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b06      	cmp	r3, #6
 8004da2:	d122      	bne.n	8004dea <UI_ExecCmd+0xca>
      {
        MCI_StopRamp(pMCI);
 8004da4:	68b8      	ldr	r0, [r7, #8]
 8004da6:	f7fc f909 	bl	8000fbc <MCI_StopRamp>
      }
    }
    break;
 8004daa:	e01e      	b.n	8004dea <UI_ExecCmd+0xca>
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      /* Queries the STM and a command start or stop depending on the state. */
      if (MCI_GetSTMState(pMCI) == IDLE)
 8004dac:	68b8      	ldr	r0, [r7, #8]
 8004dae:	f7fc f890 	bl	8000ed2 <MCI_GetSTMState>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d103      	bne.n	8004dc0 <UI_ExecCmd+0xa0>
      {
        MCI_StartMotor(pMCI);
 8004db8:	68b8      	ldr	r0, [r7, #8]
 8004dba:	f7fb ffe4 	bl	8000d86 <MCI_StartMotor>
      else
      {
        MCI_StopMotor(pMCI);
      }
    }
    break;
 8004dbe:	e015      	b.n	8004dec <UI_ExecCmd+0xcc>
        MCI_StopMotor(pMCI);
 8004dc0:	68b8      	ldr	r0, [r7, #8]
 8004dc2:	f7fb fff7 	bl	8000db4 <MCI_StopMotor>
    break;
 8004dc6:	e011      	b.n	8004dec <UI_ExecCmd+0xcc>
    }
    break;

  case MC_PROTOCOL_CMD_FAULT_ACK:
    {
      MCI_FaultAcknowledged(pMCI);
 8004dc8:	68b8      	ldr	r0, [r7, #8]
 8004dca:	f7fc f802 	bl	8000dd2 <MCI_FaultAcknowledged>
    }
    break;
 8004dce:	e00d      	b.n	8004dec <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_ENCODER_ALIGN:
    {
      MCI_EncoderAlign(pMCI);
 8004dd0:	68b8      	ldr	r0, [r7, #8]
 8004dd2:	f7fc f80c 	bl	8000dee <MCI_EncoderAlign>
    }
    break;
 8004dd6:	e009      	b.n	8004dec <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_IQDREF_CLEAR:
    {
      MCI_Clear_Iqdref(pMCI);
 8004dd8:	68b8      	ldr	r0, [r7, #8]
 8004dda:	f7fc f9cd 	bl	8001178 <MCI_Clear_Iqdref>
    }
    break;
 8004dde:	e005      	b.n	8004dec <UI_ExecCmd+0xcc>

  default:
    {
    retVal = false;
 8004de0:	2300      	movs	r3, #0
 8004de2:	73fb      	strb	r3, [r7, #15]
	}
    break;
 8004de4:	e002      	b.n	8004dec <UI_ExecCmd+0xcc>
    break;
 8004de6:	bf00      	nop
 8004de8:	e000      	b.n	8004dec <UI_ExecCmd+0xcc>
    break;
 8004dea:	bf00      	nop
  }
  return retVal;
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop

08004df8 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds. 
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	7d1b      	ldrb	r3, [r3, #20]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	617b      	str	r3, [r7, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	4a08      	ldr	r2, [pc, #32]	; (8004e44 <UI_ExecSpeedRamp+0x4c>)
 8004e22:	fb82 1203 	smull	r1, r2, r2, r3
 8004e26:	441a      	add	r2, r3
 8004e28:	1152      	asrs	r2, r2, #5
 8004e2a:	17db      	asrs	r3, r3, #31
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	b21b      	sxth	r3, r3
 8004e30:	88fa      	ldrh	r2, [r7, #6]
 8004e32:	4619      	mov	r1, r3
 8004e34:	6978      	ldr	r0, [r7, #20]
 8004e36:	f7fb ff50 	bl	8000cda <MCI_ExecSpeedRamp>
  return true;
 8004e3a:	2301      	movs	r3, #1
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	88888889 	.word	0x88888889

08004e48 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	807b      	strh	r3, [r7, #2]
 8004e54:	4613      	mov	r3, r2
 8004e56:	803b      	strh	r3, [r7, #0]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	7d1b      	ldrb	r3, [r3, #20]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8004e68:	883a      	ldrh	r2, [r7, #0]
 8004e6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f7fb ff4f 	bl	8000d14 <MCI_ExecTorqueRamp>
  return true;
 8004e76:	2301      	movs	r3, #1
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UI_GetRevupData>:
  *         
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	607a      	str	r2, [r7, #4]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	72fb      	strb	r3, [r7, #11]
  bool hRetVal = true;
 8004e90:	2301      	movs	r3, #1
 8004e92:	75fb      	strb	r3, [r7, #23]

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	7d1b      	ldrb	r3, [r3, #20]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	613b      	str	r3, [r7, #16]
  if (pRevupCtrl)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01b      	beq.n	8004ee4 <UI_GetRevupData+0x64>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8004eac:	7afb      	ldrb	r3, [r7, #11]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6938      	ldr	r0, [r7, #16]
 8004eb2:	f008 fed3 	bl	800dc5c <RUC_GetPhaseDurationms>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	461a      	mov	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	801a      	strh	r2, [r3, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8004ebe:	7afb      	ldrb	r3, [r7, #11]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6938      	ldr	r0, [r7, #16]
 8004ec4:	f008 fed0 	bl	800dc68 <RUC_GetPhaseFinalMecSpeedUnit>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	801a      	strh	r2, [r3, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8004ed0:	7afb      	ldrb	r3, [r7, #11]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	6938      	ldr	r0, [r7, #16]
 8004ed6:	f008 fecf 	bl	800dc78 <RUC_GetPhaseFinalTorque>
 8004eda:	4603      	mov	r3, r0
 8004edc:	461a      	mov	r2, r3
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	801a      	strh	r2, [r3, #0]
 8004ee2:	e001      	b.n	8004ee8 <UI_GetRevupData+0x68>
  }
  else
  {
    hRetVal = false;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	75fb      	strb	r3, [r7, #23]
  }
  return hRetVal;
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b086      	sub	sp, #24
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	4608      	mov	r0, r1
 8004efc:	4611      	mov	r1, r2
 8004efe:	461a      	mov	r2, r3
 8004f00:	4603      	mov	r3, r0
 8004f02:	72fb      	strb	r3, [r7, #11]
 8004f04:	460b      	mov	r3, r1
 8004f06:	813b      	strh	r3, [r7, #8]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	80fb      	strh	r3, [r7, #6]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	7d1b      	ldrb	r3, [r3, #20]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	617b      	str	r3, [r7, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8004f1e:	893a      	ldrh	r2, [r7, #8]
 8004f20:	7afb      	ldrb	r3, [r7, #11]
 8004f22:	4619      	mov	r1, r3
 8004f24:	6978      	ldr	r0, [r7, #20]
 8004f26:	f008 fe87 	bl	800dc38 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8004f2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f2e:	7afb      	ldrb	r3, [r7, #11]
 8004f30:	4619      	mov	r1, r3
 8004f32:	6978      	ldr	r0, [r7, #20]
 8004f34:	f008 fe86 	bl	800dc44 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8004f38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004f3c:	7afb      	ldrb	r3, [r7, #11]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6978      	ldr	r0, [r7, #20]
 8004f42:	f008 fe85 	bl	800dc50 <RUC_SetPhaseFinalTorque>
  return true;
 8004f46:	2301      	movs	r3, #1
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame. 
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	807b      	strh	r3, [r7, #2]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	803b      	strh	r3, [r7, #0]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	7d1b      	ldrb	r3, [r3, #20]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]
  qd_t currComp;
  currComp.q = hIqRef;
 8004f70:	887b      	ldrh	r3, [r7, #2]
 8004f72:	813b      	strh	r3, [r7, #8]
  currComp.d = hIdRef;
 8004f74:	883b      	ldrh	r3, [r7, #0]
 8004f76:	817b      	strh	r3, [r7, #10]
  MCI_SetCurrentReferences(pMCI,currComp);
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7fb fee7 	bl	8000d4e <MCI_SetCurrentReferences>
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <UI_GetMPInfo>:
  * @param  pMPInfo: The returned list of register.
  *         It is populated by this function.
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
    return false;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fa4:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <SystemInit+0x28>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004faa:	4a07      	ldr	r2, [pc, #28]	; (8004fc8 <SystemInit+0x28>)
 8004fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004fb4:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <SystemInit+0x28>)
 8004fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fba:	609a      	str	r2, [r3, #8]
#endif
}
 8004fbc:	bf00      	nop
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fd0:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <HAL_Init+0x28>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a07      	ldr	r2, [pc, #28]	; (8004ff4 <HAL_Init+0x28>)
 8004fd6:	f043 0310 	orr.w	r3, r3, #16
 8004fda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fdc:	2003      	movs	r0, #3
 8004fde:	f001 fb73 	bl	80066c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fe2:	2004      	movs	r0, #4
 8004fe4:	f000 f808 	bl	8004ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fe8:	f7fe fb86 	bl	80036f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40022000 	.word	0x40022000

08004ff8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005000:	4b12      	ldr	r3, [pc, #72]	; (800504c <HAL_InitTick+0x54>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	4b12      	ldr	r3, [pc, #72]	; (8005050 <HAL_InitTick+0x58>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	4619      	mov	r1, r3
 800500a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800500e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	4618      	mov	r0, r3
 8005018:	f001 fb8b 	bl	8006732 <HAL_SYSTICK_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e00e      	b.n	8005044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b0f      	cmp	r3, #15
 800502a:	d80a      	bhi.n	8005042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800502c:	2200      	movs	r2, #0
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	f001 fb53 	bl	80066de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005038:	4a06      	ldr	r2, [pc, #24]	; (8005054 <HAL_InitTick+0x5c>)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	e000      	b.n	8005044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000690 	.word	0x20000690
 8005050:	20000698 	.word	0x20000698
 8005054:	20000694 	.word	0x20000694

08005058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <HAL_IncTick+0x20>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_IncTick+0x24>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4413      	add	r3, r2
 8005068:	4a04      	ldr	r2, [pc, #16]	; (800507c <HAL_IncTick+0x24>)
 800506a:	6013      	str	r3, [r2, #0]
}
 800506c:	bf00      	nop
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000698 	.word	0x20000698
 800507c:	20000c6c 	.word	0x20000c6c

08005080 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  return uwTick;  
 8005084:	4b03      	ldr	r3, [pc, #12]	; (8005094 <HAL_GetTick+0x14>)
 8005086:	681b      	ldr	r3, [r3, #0]
}
 8005088:	4618      	mov	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000c6c 	.word	0x20000c6c

08005098 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050a0:	f7ff ffee 	bl	8005080 <HAL_GetTick>
 80050a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b0:	d005      	beq.n	80050be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050b2:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <HAL_Delay+0x40>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80050be:	bf00      	nop
 80050c0:	f7ff ffde 	bl	8005080 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d8f7      	bhi.n	80050c0 <HAL_Delay+0x28>
  {
  }
}
 80050d0:	bf00      	nop
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20000698 	.word	0x20000698

080050dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b09a      	sub	sp, #104	; 0x68
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e1c9      	b.n	8005490 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b00      	cmp	r3, #0
 800510c:	d176      	bne.n	80051fc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d152      	bne.n	80051bc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7fe fb05 	bl	8003740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d13b      	bne.n	80051bc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f001 f90f 	bl	8006368 <ADC_Disable>
 800514a:	4603      	mov	r3, r0
 800514c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b00      	cmp	r3, #0
 800515a:	d12f      	bne.n	80051bc <HAL_ADC_Init+0xe0>
 800515c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005160:	2b00      	cmp	r3, #0
 8005162:	d12b      	bne.n	80051bc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800516c:	f023 0302 	bic.w	r3, r3, #2
 8005170:	f043 0202 	orr.w	r2, r3, #2
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005186:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005196:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005198:	4b86      	ldr	r3, [pc, #536]	; (80053b4 <HAL_ADC_Init+0x2d8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a86      	ldr	r2, [pc, #536]	; (80053b8 <HAL_ADC_Init+0x2dc>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	0c9a      	lsrs	r2, r3, #18
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80051ae:	e002      	b.n	80051b6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f9      	bne.n	80051b0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80051d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d8:	d110      	bne.n	80051fc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f023 0312 	bic.w	r3, r3, #18
 80051e2:	f043 0210 	orr.w	r2, r3, #16
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	f043 0201 	orr.w	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 8136 	bne.w	8005476 <HAL_ADC_Init+0x39a>
 800520a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800520e:	2b00      	cmp	r3, #0
 8005210:	f040 8131 	bne.w	8005476 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800521e:	2b00      	cmp	r3, #0
 8005220:	f040 8129 	bne.w	8005476 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800522c:	f043 0202 	orr.w	r2, r3, #2
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800523c:	d004      	beq.n	8005248 <HAL_ADC_Init+0x16c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a5e      	ldr	r2, [pc, #376]	; (80053bc <HAL_ADC_Init+0x2e0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d101      	bne.n	800524c <HAL_ADC_Init+0x170>
 8005248:	4b5d      	ldr	r3, [pc, #372]	; (80053c0 <HAL_ADC_Init+0x2e4>)
 800524a:	e000      	b.n	800524e <HAL_ADC_Init+0x172>
 800524c:	4b5d      	ldr	r3, [pc, #372]	; (80053c4 <HAL_ADC_Init+0x2e8>)
 800524e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005258:	d102      	bne.n	8005260 <HAL_ADC_Init+0x184>
 800525a:	4b58      	ldr	r3, [pc, #352]	; (80053bc <HAL_ADC_Init+0x2e0>)
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e01a      	b.n	8005296 <HAL_ADC_Init+0x1ba>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a55      	ldr	r2, [pc, #340]	; (80053bc <HAL_ADC_Init+0x2e0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d103      	bne.n	8005272 <HAL_ADC_Init+0x196>
 800526a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e011      	b.n	8005296 <HAL_ADC_Init+0x1ba>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a54      	ldr	r2, [pc, #336]	; (80053c8 <HAL_ADC_Init+0x2ec>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d102      	bne.n	8005282 <HAL_ADC_Init+0x1a6>
 800527c:	4b53      	ldr	r3, [pc, #332]	; (80053cc <HAL_ADC_Init+0x2f0>)
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	e009      	b.n	8005296 <HAL_ADC_Init+0x1ba>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a51      	ldr	r2, [pc, #324]	; (80053cc <HAL_ADC_Init+0x2f0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d102      	bne.n	8005292 <HAL_ADC_Init+0x1b6>
 800528c:	4b4e      	ldr	r3, [pc, #312]	; (80053c8 <HAL_ADC_Init+0x2ec>)
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e001      	b.n	8005296 <HAL_ADC_Init+0x1ba>
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d108      	bne.n	80052b6 <HAL_ADC_Init+0x1da>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_ADC_Init+0x1da>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <HAL_ADC_Init+0x1dc>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d11c      	bne.n	80052f6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80052bc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d010      	beq.n	80052e4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d107      	bne.n	80052de <HAL_ADC_Init+0x202>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_ADC_Init+0x202>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <HAL_ADC_Init+0x204>
 80052de:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d108      	bne.n	80052f6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80052e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	431a      	orrs	r2, r3
 80052f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	7e5b      	ldrb	r3, [r3, #25]
 80052fa:	035b      	lsls	r3, r3, #13
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005300:	2a01      	cmp	r2, #1
 8005302:	d002      	beq.n	800530a <HAL_ADC_Init+0x22e>
 8005304:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005308:	e000      	b.n	800530c <HAL_ADC_Init+0x230>
 800530a:	2200      	movs	r2, #0
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4313      	orrs	r3, r2
 800531a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800531c:	4313      	orrs	r3, r2
 800531e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d11b      	bne.n	8005362 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	7e5b      	ldrb	r3, [r3, #25]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	3b01      	subs	r3, #1
 8005338:	045a      	lsls	r2, r3, #17
 800533a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800533c:	4313      	orrs	r3, r2
 800533e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005342:	663b      	str	r3, [r7, #96]	; 0x60
 8005344:	e00d      	b.n	8005362 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800534e:	f043 0220 	orr.w	r2, r3, #32
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	f043 0201 	orr.w	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	2b01      	cmp	r3, #1
 8005368:	d03a      	beq.n	80053e0 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a16      	ldr	r2, [pc, #88]	; (80053c8 <HAL_ADC_Init+0x2ec>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <HAL_ADC_Init+0x2a2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a14      	ldr	r2, [pc, #80]	; (80053cc <HAL_ADC_Init+0x2f0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d128      	bne.n	80053d0 <HAL_ADC_Init+0x2f4>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8005386:	d012      	beq.n	80053ae <HAL_ADC_Init+0x2d2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005390:	d00a      	beq.n	80053a8 <HAL_ADC_Init+0x2cc>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800539a:	d002      	beq.n	80053a2 <HAL_ADC_Init+0x2c6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a0:	e018      	b.n	80053d4 <HAL_ADC_Init+0x2f8>
 80053a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053a6:	e015      	b.n	80053d4 <HAL_ADC_Init+0x2f8>
 80053a8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80053ac:	e012      	b.n	80053d4 <HAL_ADC_Init+0x2f8>
 80053ae:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80053b2:	e00f      	b.n	80053d4 <HAL_ADC_Init+0x2f8>
 80053b4:	20000690 	.word	0x20000690
 80053b8:	431bde83 	.word	0x431bde83
 80053bc:	50000100 	.word	0x50000100
 80053c0:	50000300 	.word	0x50000300
 80053c4:	50000700 	.word	0x50000700
 80053c8:	50000400 	.word	0x50000400
 80053cc:	50000500 	.word	0x50000500
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80053d8:	4313      	orrs	r3, r2
 80053da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053dc:	4313      	orrs	r3, r2
 80053de:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d114      	bne.n	8005418 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053fc:	f023 0302 	bic.w	r3, r3, #2
 8005400:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	7e1b      	ldrb	r3, [r3, #24]
 8005406:	039a      	lsls	r2, r3, #14
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	4313      	orrs	r3, r2
 8005412:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005414:	4313      	orrs	r3, r2
 8005416:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <HAL_ADC_Init+0x3bc>)
 8005420:	4013      	ands	r3, r2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005428:	430b      	orrs	r3, r1
 800542a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d10c      	bne.n	800544e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	f023 010f 	bic.w	r1, r3, #15
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	1e5a      	subs	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
 800544c:	e007      	b.n	800545e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 020f 	bic.w	r2, r2, #15
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	f023 0303 	bic.w	r3, r3, #3
 800546c:	f043 0201 	orr.w	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	641a      	str	r2, [r3, #64]	; 0x40
 8005474:	e00a      	b.n	800548c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f023 0312 	bic.w	r3, r3, #18
 800547e:	f043 0210 	orr.w	r2, r3, #16
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8005486:	2301      	movs	r3, #1
 8005488:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800548c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005490:	4618      	mov	r0, r3
 8005492:	3768      	adds	r7, #104	; 0x68
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	fff0c007 	.word	0xfff0c007

0800549c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800549c:	b480      	push	{r7}
 800549e:	b09b      	sub	sp, #108	; 0x6c
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_ADC_ConfigChannel+0x22>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e2cb      	b.n	8005a56 <HAL_ADC_ConfigChannel+0x5ba>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f040 82af 	bne.w	8005a34 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d81c      	bhi.n	8005518 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	4413      	add	r3, r2
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	461a      	mov	r2, r3
 80054f2:	231f      	movs	r3, #31
 80054f4:	4093      	lsls	r3, r2
 80054f6:	43db      	mvns	r3, r3
 80054f8:	4019      	ands	r1, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4413      	add	r3, r2
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	fa00 f203 	lsl.w	r2, r0, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
 8005516:	e063      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b09      	cmp	r3, #9
 800551e:	d81e      	bhi.n	800555e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	4413      	add	r3, r2
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	3b1e      	subs	r3, #30
 8005534:	221f      	movs	r2, #31
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	43db      	mvns	r3, r3
 800553c:	4019      	ands	r1, r3
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	4413      	add	r3, r2
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	3b1e      	subs	r3, #30
 8005550:	fa00 f203 	lsl.w	r2, r0, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	635a      	str	r2, [r3, #52]	; 0x34
 800555c:	e040      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b0e      	cmp	r3, #14
 8005564:	d81e      	bhi.n	80055a4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	4413      	add	r3, r2
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	3b3c      	subs	r3, #60	; 0x3c
 800557a:	221f      	movs	r2, #31
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	43db      	mvns	r3, r3
 8005582:	4019      	ands	r1, r3
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	4413      	add	r3, r2
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	3b3c      	subs	r3, #60	; 0x3c
 8005596:	fa00 f203 	lsl.w	r2, r0, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38
 80055a2:	e01d      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4413      	add	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	3b5a      	subs	r3, #90	; 0x5a
 80055b8:	221f      	movs	r2, #31
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	43db      	mvns	r3, r3
 80055c0:	4019      	ands	r1, r3
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	4413      	add	r3, r2
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	3b5a      	subs	r3, #90	; 0x5a
 80055d4:	fa00 f203 	lsl.w	r2, r0, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f040 80e5 	bne.w	80057ba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b09      	cmp	r3, #9
 80055f6:	d91c      	bls.n	8005632 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6999      	ldr	r1, [r3, #24]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4613      	mov	r3, r2
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	4413      	add	r3, r2
 8005608:	3b1e      	subs	r3, #30
 800560a:	2207      	movs	r2, #7
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	43db      	mvns	r3, r3
 8005612:	4019      	ands	r1, r3
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	6898      	ldr	r0, [r3, #8]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4413      	add	r3, r2
 8005622:	3b1e      	subs	r3, #30
 8005624:	fa00 f203 	lsl.w	r2, r0, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	619a      	str	r2, [r3, #24]
 8005630:	e019      	b.n	8005666 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6959      	ldr	r1, [r3, #20]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4413      	add	r3, r2
 8005642:	2207      	movs	r2, #7
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	43db      	mvns	r3, r3
 800564a:	4019      	ands	r1, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6898      	ldr	r0, [r3, #8]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4413      	add	r3, r2
 800565a:	fa00 f203 	lsl.w	r2, r0, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	08db      	lsrs	r3, r3, #3
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	3b01      	subs	r3, #1
 8005684:	2b03      	cmp	r3, #3
 8005686:	d84f      	bhi.n	8005728 <HAL_ADC_ConfigChannel+0x28c>
 8005688:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <HAL_ADC_ConfigChannel+0x1f4>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056a1 	.word	0x080056a1
 8005694:	080056c3 	.word	0x080056c3
 8005698:	080056e5 	.word	0x080056e5
 800569c:	08005707 	.word	0x08005707
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056a6:	4b9f      	ldr	r3, [pc, #636]	; (8005924 <HAL_ADC_ConfigChannel+0x488>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	6812      	ldr	r2, [r2, #0]
 80056ae:	0691      	lsls	r1, r2, #26
 80056b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056b2:	430a      	orrs	r2, r1
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80056be:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80056c0:	e07e      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80056c8:	4b96      	ldr	r3, [pc, #600]	; (8005924 <HAL_ADC_ConfigChannel+0x488>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	0691      	lsls	r1, r2, #26
 80056d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056d4:	430a      	orrs	r2, r1
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80056e0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80056e2:	e06d      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80056ea:	4b8e      	ldr	r3, [pc, #568]	; (8005924 <HAL_ADC_ConfigChannel+0x488>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	0691      	lsls	r1, r2, #26
 80056f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056f6:	430a      	orrs	r2, r1
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005702:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005704:	e05c      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800570c:	4b85      	ldr	r3, [pc, #532]	; (8005924 <HAL_ADC_ConfigChannel+0x488>)
 800570e:	4013      	ands	r3, r2
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	0691      	lsls	r1, r2, #26
 8005716:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005718:	430a      	orrs	r2, r1
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005724:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005726:	e04b      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	069b      	lsls	r3, r3, #26
 8005738:	429a      	cmp	r2, r3
 800573a:	d107      	bne.n	800574c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800574a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005752:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	069b      	lsls	r3, r3, #26
 800575c:	429a      	cmp	r2, r3
 800575e:	d107      	bne.n	8005770 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800576e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005776:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	069b      	lsls	r3, r3, #26
 8005780:	429a      	cmp	r2, r3
 8005782:	d107      	bne.n	8005794 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005792:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800579a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	069b      	lsls	r3, r3, #26
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d10a      	bne.n	80057be <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80057b6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80057b8:	e001      	b.n	80057be <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80057ba:	bf00      	nop
 80057bc:	e000      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80057be:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d108      	bne.n	80057e0 <HAL_ADC_ConfigChannel+0x344>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_ADC_ConfigChannel+0x344>
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <HAL_ADC_ConfigChannel+0x346>
 80057e0:	2300      	movs	r3, #0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f040 8131 	bne.w	8005a4a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d00f      	beq.n	8005810 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2201      	movs	r2, #1
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	43da      	mvns	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	400a      	ands	r2, r1
 800580a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800580e:	e049      	b.n	80058a4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2201      	movs	r2, #1
 800581e:	409a      	lsls	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b09      	cmp	r3, #9
 8005830:	d91c      	bls.n	800586c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6999      	ldr	r1, [r3, #24]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	4413      	add	r3, r2
 8005842:	3b1b      	subs	r3, #27
 8005844:	2207      	movs	r2, #7
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	43db      	mvns	r3, r3
 800584c:	4019      	ands	r1, r3
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6898      	ldr	r0, [r3, #8]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4613      	mov	r3, r2
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	4413      	add	r3, r2
 800585c:	3b1b      	subs	r3, #27
 800585e:	fa00 f203 	lsl.w	r2, r0, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	619a      	str	r2, [r3, #24]
 800586a:	e01b      	b.n	80058a4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6959      	ldr	r1, [r3, #20]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	4613      	mov	r3, r2
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	4413      	add	r3, r2
 800587e:	2207      	movs	r2, #7
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	43db      	mvns	r3, r3
 8005886:	4019      	ands	r1, r3
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	6898      	ldr	r0, [r3, #8]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	4613      	mov	r3, r2
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	4413      	add	r3, r2
 8005898:	fa00 f203 	lsl.w	r2, r0, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058ac:	d004      	beq.n	80058b8 <HAL_ADC_ConfigChannel+0x41c>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1d      	ldr	r2, [pc, #116]	; (8005928 <HAL_ADC_ConfigChannel+0x48c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d101      	bne.n	80058bc <HAL_ADC_ConfigChannel+0x420>
 80058b8:	4b1c      	ldr	r3, [pc, #112]	; (800592c <HAL_ADC_ConfigChannel+0x490>)
 80058ba:	e000      	b.n	80058be <HAL_ADC_ConfigChannel+0x422>
 80058bc:	4b1c      	ldr	r3, [pc, #112]	; (8005930 <HAL_ADC_ConfigChannel+0x494>)
 80058be:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d105      	bne.n	80058d4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80058c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d015      	beq.n	8005900 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80058d8:	2b11      	cmp	r3, #17
 80058da:	d105      	bne.n	80058e8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80058dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00b      	beq.n	8005900 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80058ec:	2b12      	cmp	r3, #18
 80058ee:	f040 80ac 	bne.w	8005a4a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80058f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f040 80a5 	bne.w	8005a4a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005908:	d102      	bne.n	8005910 <HAL_ADC_ConfigChannel+0x474>
 800590a:	4b07      	ldr	r3, [pc, #28]	; (8005928 <HAL_ADC_ConfigChannel+0x48c>)
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	e023      	b.n	8005958 <HAL_ADC_ConfigChannel+0x4bc>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a04      	ldr	r2, [pc, #16]	; (8005928 <HAL_ADC_ConfigChannel+0x48c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d10c      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x498>
 800591a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	e01a      	b.n	8005958 <HAL_ADC_ConfigChannel+0x4bc>
 8005922:	bf00      	nop
 8005924:	83fff000 	.word	0x83fff000
 8005928:	50000100 	.word	0x50000100
 800592c:	50000300 	.word	0x50000300
 8005930:	50000700 	.word	0x50000700
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a4a      	ldr	r2, [pc, #296]	; (8005a64 <HAL_ADC_ConfigChannel+0x5c8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d102      	bne.n	8005944 <HAL_ADC_ConfigChannel+0x4a8>
 800593e:	4b4a      	ldr	r3, [pc, #296]	; (8005a68 <HAL_ADC_ConfigChannel+0x5cc>)
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	e009      	b.n	8005958 <HAL_ADC_ConfigChannel+0x4bc>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a47      	ldr	r2, [pc, #284]	; (8005a68 <HAL_ADC_ConfigChannel+0x5cc>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d102      	bne.n	8005954 <HAL_ADC_ConfigChannel+0x4b8>
 800594e:	4b45      	ldr	r3, [pc, #276]	; (8005a64 <HAL_ADC_ConfigChannel+0x5c8>)
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	e001      	b.n	8005958 <HAL_ADC_ConfigChannel+0x4bc>
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	2b01      	cmp	r3, #1
 8005964:	d108      	bne.n	8005978 <HAL_ADC_ConfigChannel+0x4dc>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_ADC_ConfigChannel+0x4dc>
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <HAL_ADC_ConfigChannel+0x4de>
 8005978:	2300      	movs	r3, #0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d150      	bne.n	8005a20 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800597e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005980:	2b00      	cmp	r3, #0
 8005982:	d010      	beq.n	80059a6 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	2b01      	cmp	r3, #1
 800598e:	d107      	bne.n	80059a0 <HAL_ADC_ConfigChannel+0x504>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_ADC_ConfigChannel+0x504>
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <HAL_ADC_ConfigChannel+0x506>
 80059a0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d13c      	bne.n	8005a20 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b10      	cmp	r3, #16
 80059ac:	d11d      	bne.n	80059ea <HAL_ADC_ConfigChannel+0x54e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059b6:	d118      	bne.n	80059ea <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80059b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80059c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059c2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80059c4:	4b29      	ldr	r3, [pc, #164]	; (8005a6c <HAL_ADC_ConfigChannel+0x5d0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a29      	ldr	r2, [pc, #164]	; (8005a70 <HAL_ADC_ConfigChannel+0x5d4>)
 80059ca:	fba2 2303 	umull	r2, r3, r2, r3
 80059ce:	0c9a      	lsrs	r2, r3, #18
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80059da:	e002      	b.n	80059e2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	3b01      	subs	r3, #1
 80059e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f9      	bne.n	80059dc <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80059e8:	e02e      	b.n	8005a48 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b11      	cmp	r3, #17
 80059f0:	d10b      	bne.n	8005a0a <HAL_ADC_ConfigChannel+0x56e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059fa:	d106      	bne.n	8005a0a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80059fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a06:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005a08:	e01e      	b.n	8005a48 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b12      	cmp	r3, #18
 8005a10:	d11a      	bne.n	8005a48 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a1c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005a1e:	e013      	b.n	8005a48 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	f043 0220 	orr.w	r2, r3, #32
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005a32:	e00a      	b.n	8005a4a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a38:	f043 0220 	orr.w	r2, r3, #32
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005a46:	e000      	b.n	8005a4a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005a48:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005a52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	376c      	adds	r7, #108	; 0x6c
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	50000400 	.word	0x50000400
 8005a68:	50000500 	.word	0x50000500
 8005a6c:	20000690 	.word	0x20000690
 8005a70:	431bde83 	.word	0x431bde83

08005a74 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b09d      	sub	sp, #116	; 0x74
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_ADCEx_InjectedConfigChannel+0x26>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e365      	b.n	8006166 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d151      	bne.n	8005b56 <HAL_ADCEx_InjectedConfigChannel+0xe2>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d143      	bne.n	8005b42 <HAL_ADCEx_InjectedConfigChannel+0xce>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d02b      	beq.n	8005b1a <HAL_ADCEx_InjectedConfigChannel+0xa6>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	021a      	lsls	r2, r3, #8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4984      	ldr	r1, [pc, #528]	; (8005ce0 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 8005ace:	428b      	cmp	r3, r1
 8005ad0:	d004      	beq.n	8005adc <HAL_ADCEx_InjectedConfigChannel+0x68>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4983      	ldr	r1, [pc, #524]	; (8005ce4 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 8005ad8:	428b      	cmp	r3, r1
 8005ada:	d114      	bne.n	8005b06 <HAL_ADCEx_InjectedConfigChannel+0x92>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d00e      	beq.n	8005b02 <HAL_ADCEx_InjectedConfigChannel+0x8e>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	2b14      	cmp	r3, #20
 8005aea:	d008      	beq.n	8005afe <HAL_ADCEx_InjectedConfigChannel+0x8a>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	2b1c      	cmp	r3, #28
 8005af2:	d002      	beq.n	8005afa <HAL_ADCEx_InjectedConfigChannel+0x86>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	e007      	b.n	8005b0a <HAL_ADCEx_InjectedConfigChannel+0x96>
 8005afa:	2310      	movs	r3, #16
 8005afc:	e005      	b.n	8005b0a <HAL_ADCEx_InjectedConfigChannel+0x96>
 8005afe:	231c      	movs	r3, #28
 8005b00:	e003      	b.n	8005b0a <HAL_ADCEx_InjectedConfigChannel+0x96>
 8005b02:	2334      	movs	r3, #52	; 0x34
 8005b04:	e001      	b.n	8005b0a <HAL_ADCEx_InjectedConfigChannel+0x96>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	4313      	orrs	r3, r2
 8005b12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b14:	4313      	orrs	r3, r2
 8005b16:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b18:	e005      	b.n	8005b26 <HAL_ADCEx_InjectedConfigChannel+0xb2>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	021b      	lsls	r3, r3, #8
 8005b20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b22:	4313      	orrs	r3, r2
 8005b24:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b2c:	4b6e      	ldr	r3, [pc, #440]	; (8005ce8 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b36:	430b      	orrs	r3, r1
 8005b38:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b3e:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005b40:	e07f      	b.n	8005c42 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f043 0220 	orr.w	r2, r3, #32
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005b54:	e075      	b.n	8005c42 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d140      	bne.n	8005be0 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	699a      	ldr	r2, [r3, #24]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d02d      	beq.n	8005bd0 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	1e59      	subs	r1, r3, #1
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4857      	ldr	r0, [pc, #348]	; (8005ce0 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 8005b84:	4283      	cmp	r3, r0
 8005b86:	d004      	beq.n	8005b92 <HAL_ADCEx_InjectedConfigChannel+0x11e>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4855      	ldr	r0, [pc, #340]	; (8005ce4 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 8005b8e:	4283      	cmp	r3, r0
 8005b90:	d114      	bne.n	8005bbc <HAL_ADCEx_InjectedConfigChannel+0x148>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	2b08      	cmp	r3, #8
 8005b98:	d00e      	beq.n	8005bb8 <HAL_ADCEx_InjectedConfigChannel+0x144>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	2b14      	cmp	r3, #20
 8005ba0:	d008      	beq.n	8005bb4 <HAL_ADCEx_InjectedConfigChannel+0x140>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	2b1c      	cmp	r3, #28
 8005ba8:	d002      	beq.n	8005bb0 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	e007      	b.n	8005bc0 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	e005      	b.n	8005bc0 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8005bb4:	231c      	movs	r3, #28
 8005bb6:	e003      	b.n	8005bc0 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8005bb8:	2334      	movs	r3, #52	; 0x34
 8005bba:	e001      	b.n	8005bc0 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	4319      	orrs	r1, r3
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	649a      	str	r2, [r3, #72]	; 0x48
 8005bce:	e007      	b.n	8005be0 <HAL_ADCEx_InjectedConfigChannel+0x16c>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	4613      	mov	r3, r2
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	4413      	add	r3, r2
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	3302      	adds	r3, #2
 8005bf2:	221f      	movs	r2, #31
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	4019      	ands	r1, r3
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	4613      	mov	r3, r2
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	4413      	add	r3, r2
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	3302      	adds	r3, #2
 8005c0e:	fa00 f303 	lsl.w	r3, r0, r3
 8005c12:	ea41 0203 	orr.w	r2, r1, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c1e:	1e5a      	subs	r2, r3, #1
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c32:	4b2d      	ldr	r3, [pc, #180]	; (8005ce8 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	430b      	orrs	r3, r1
 8005c40:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d12d      	bne.n	8005cac <HAL_ADCEx_InjectedConfigChannel+0x238>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	7f5b      	ldrb	r3, [r3, #29]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d110      	bne.n	8005c7a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	7f9b      	ldrb	r3, [r3, #30]
 8005c66:	055a      	lsls	r2, r3, #21
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	7f1b      	ldrb	r3, [r3, #28]
 8005c6c:	051b      	lsls	r3, r3, #20
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	60da      	str	r2, [r3, #12]
 8005c78:	e018      	b.n	8005cac <HAL_ADCEx_InjectedConfigChannel+0x238>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	7f9b      	ldrb	r3, [r3, #30]
 8005c88:	055a      	lsls	r2, r3, #21
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	7f1b      	ldrb	r3, [r3, #28]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d108      	bne.n	8005cac <HAL_ADCEx_InjectedConfigChannel+0x238>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f043 0220 	orr.w	r2, r3, #32
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 030c 	and.w	r3, r3, #12
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f040 8111 	bne.w	8005ede <HAL_ADCEx_InjectedConfigChannel+0x46a>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d113      	bne.n	8005cec <HAL_ADCEx_InjectedConfigChannel+0x278>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	7f5b      	ldrb	r3, [r3, #29]
 8005cd2:	065a      	lsls	r2, r3, #25
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	60da      	str	r2, [r3, #12]
 8005cdc:	e01b      	b.n	8005d16 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8005cde:	bf00      	nop
 8005ce0:	50000400 	.word	0x50000400
 8005ce4:	50000500 	.word	0x50000500
 8005ce8:	82082000 	.word	0x82082000
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005cfa:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	7f5b      	ldrb	r3, [r3, #29]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d108      	bne.n	8005d16 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	f043 0220 	orr.w	r2, r3, #32
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b09      	cmp	r3, #9
 8005d1c:	d91c      	bls.n	8005d58 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6999      	ldr	r1, [r3, #24]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3b1e      	subs	r3, #30
 8005d30:	2207      	movs	r2, #7
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	43db      	mvns	r3, r3
 8005d38:	4019      	ands	r1, r3
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6898      	ldr	r0, [r3, #8]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4613      	mov	r3, r2
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	4413      	add	r3, r2
 8005d48:	3b1e      	subs	r3, #30
 8005d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	619a      	str	r2, [r3, #24]
 8005d56:	e019      	b.n	8005d8c <HAL_ADCEx_InjectedConfigChannel+0x318>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6959      	ldr	r1, [r3, #20]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4613      	mov	r3, r2
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	4413      	add	r3, r2
 8005d68:	2207      	movs	r2, #7
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	4019      	ands	r1, r3
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	6898      	ldr	r0, [r3, #8]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	4413      	add	r3, r2
 8005d80:	fa00 f203 	lsl.w	r2, r0, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	695a      	ldr	r2, [r3, #20]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	08db      	lsrs	r3, r3, #3
 8005d98:	f003 0303 	and.w	r3, r3, #3
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d84e      	bhi.n	8005e4c <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 8005dae:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db4:	08005dc5 	.word	0x08005dc5
 8005db8:	08005de7 	.word	0x08005de7
 8005dbc:	08005e09 	.word	0x08005e09
 8005dc0:	08005e2b 	.word	0x08005e2b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005dca:	4b9f      	ldr	r3, [pc, #636]	; (8006048 <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	6812      	ldr	r2, [r2, #0]
 8005dd2:	0691      	lsls	r1, r2, #26
 8005dd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005de2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8005de4:	e07e      	b.n	8005ee4 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005dec:	4b96      	ldr	r3, [pc, #600]	; (8006048 <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8005dee:	4013      	ands	r3, r2
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	0691      	lsls	r1, r2, #26
 8005df6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005e04:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8005e06:	e06d      	b.n	8005ee4 <HAL_ADCEx_InjectedConfigChannel+0x470>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005e0e:	4b8e      	ldr	r3, [pc, #568]	; (8006048 <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	0691      	lsls	r1, r2, #26
 8005e18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005e26:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8005e28:	e05c      	b.n	8005ee4 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005e30:	4b85      	ldr	r3, [pc, #532]	; (8006048 <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	6812      	ldr	r2, [r2, #0]
 8005e38:	0691      	lsls	r1, r2, #26
 8005e3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005e48:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8005e4a:	e04b      	b.n	8005ee4 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	069b      	lsls	r3, r3, #26
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d107      	bne.n	8005e70 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e6e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	069b      	lsls	r3, r3, #26
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d107      	bne.n	8005e94 <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e92:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	069b      	lsls	r3, r3, #26
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d107      	bne.n	8005eb8 <HAL_ADCEx_InjectedConfigChannel+0x444>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005eb6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ebe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	069b      	lsls	r3, r3, #26
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d10a      	bne.n	8005ee2 <HAL_ADCEx_InjectedConfigChannel+0x46e>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005eda:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005edc:	e001      	b.n	8005ee2 <HAL_ADCEx_InjectedConfigChannel+0x46e>
    }
    
  }
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <HAL_ADCEx_InjectedConfigChannel+0x470>
      break;
 8005ee2:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d108      	bne.n	8005f04 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8005f00:	2301      	movs	r3, #1
 8005f02:	e000      	b.n	8005f06 <HAL_ADCEx_InjectedConfigChannel+0x492>
 8005f04:	2300      	movs	r3, #0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 8127 	bne.w	800615a <HAL_ADCEx_InjectedConfigChannel+0x6e6>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d00f      	beq.n	8005f34 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2201      	movs	r2, #1
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	43da      	mvns	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	400a      	ands	r2, r1
 8005f2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005f32:	e049      	b.n	8005fc8 <HAL_ADCEx_InjectedConfigChannel+0x554>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2201      	movs	r2, #1
 8005f42:	409a      	lsls	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b09      	cmp	r3, #9
 8005f54:	d91c      	bls.n	8005f90 <HAL_ADCEx_InjectedConfigChannel+0x51c>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6999      	ldr	r1, [r3, #24]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4613      	mov	r3, r2
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	4413      	add	r3, r2
 8005f66:	3b1b      	subs	r3, #27
 8005f68:	2207      	movs	r2, #7
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	4019      	ands	r1, r3
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6898      	ldr	r0, [r3, #8]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	4413      	add	r3, r2
 8005f80:	3b1b      	subs	r3, #27
 8005f82:	fa00 f203 	lsl.w	r2, r0, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	619a      	str	r2, [r3, #24]
 8005f8e:	e01b      	b.n	8005fc8 <HAL_ADCEx_InjectedConfigChannel+0x554>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6959      	ldr	r1, [r3, #20]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	4413      	add	r3, r2
 8005fa2:	2207      	movs	r2, #7
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	4019      	ands	r1, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	6898      	ldr	r0, [r3, #8]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	4413      	add	r3, r2
 8005fbc:	fa00 f203 	lsl.w	r2, r0, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fd0:	d004      	beq.n	8005fdc <HAL_ADCEx_InjectedConfigChannel+0x568>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1d      	ldr	r2, [pc, #116]	; (800604c <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d101      	bne.n	8005fe0 <HAL_ADCEx_InjectedConfigChannel+0x56c>
 8005fdc:	4b1c      	ldr	r3, [pc, #112]	; (8006050 <HAL_ADCEx_InjectedConfigChannel+0x5dc>)
 8005fde:	e000      	b.n	8005fe2 <HAL_ADCEx_InjectedConfigChannel+0x56e>
 8005fe0:	4b1c      	ldr	r3, [pc, #112]	; (8006054 <HAL_ADCEx_InjectedConfigChannel+0x5e0>)
 8005fe2:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b10      	cmp	r3, #16
 8005fea:	d105      	bne.n	8005ff8 <HAL_ADCEx_InjectedConfigChannel+0x584>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d015      	beq.n	8006024 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005ffc:	2b11      	cmp	r3, #17
 8005ffe:	d105      	bne.n	800600c <HAL_ADCEx_InjectedConfigChannel+0x598>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00b      	beq.n	8006024 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006010:	2b12      	cmp	r3, #18
 8006012:	f040 80a2 	bne.w	800615a <HAL_ADCEx_InjectedConfigChannel+0x6e6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8006016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 800601e:	2b00      	cmp	r3, #0
 8006020:	f040 809b 	bne.w	800615a <HAL_ADCEx_InjectedConfigChannel+0x6e6>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800602c:	d102      	bne.n	8006034 <HAL_ADCEx_InjectedConfigChannel+0x5c0>
 800602e:	4b07      	ldr	r3, [pc, #28]	; (800604c <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 8006030:	613b      	str	r3, [r7, #16]
 8006032:	e023      	b.n	800607c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a04      	ldr	r2, [pc, #16]	; (800604c <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d10c      	bne.n	8006058 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 800603e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006042:	613b      	str	r3, [r7, #16]
 8006044:	e01a      	b.n	800607c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006046:	bf00      	nop
 8006048:	83fff000 	.word	0x83fff000
 800604c:	50000100 	.word	0x50000100
 8006050:	50000300 	.word	0x50000300
 8006054:	50000700 	.word	0x50000700
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a45      	ldr	r2, [pc, #276]	; (8006174 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d102      	bne.n	8006068 <HAL_ADCEx_InjectedConfigChannel+0x5f4>
 8006062:	4b45      	ldr	r3, [pc, #276]	; (8006178 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	e009      	b.n	800607c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a42      	ldr	r2, [pc, #264]	; (8006178 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d102      	bne.n	8006078 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8006072:	4b40      	ldr	r3, [pc, #256]	; (8006174 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	e001      	b.n	800607c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	2b01      	cmp	r3, #1
 8006088:	d108      	bne.n	800609c <HAL_ADCEx_InjectedConfigChannel+0x628>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_ADCEx_InjectedConfigChannel+0x628>
 8006098:	2301      	movs	r3, #1
 800609a:	e000      	b.n	800609e <HAL_ADCEx_InjectedConfigChannel+0x62a>
 800609c:	2300      	movs	r3, #0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d150      	bne.n	8006144 <HAL_ADCEx_InjectedConfigChannel+0x6d0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80060a2:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d010      	beq.n	80060ca <HAL_ADCEx_InjectedConfigChannel+0x656>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d107      	bne.n	80060c4 <HAL_ADCEx_InjectedConfigChannel+0x650>
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_ADCEx_InjectedConfigChannel+0x650>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <HAL_ADCEx_InjectedConfigChannel+0x652>
 80060c4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d13c      	bne.n	8006144 <HAL_ADCEx_InjectedConfigChannel+0x6d0>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b10      	cmp	r3, #16
 80060d0:	d11d      	bne.n	800610e <HAL_ADCEx_InjectedConfigChannel+0x69a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060da:	d118      	bne.n	800610e <HAL_ADCEx_InjectedConfigChannel+0x69a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80060dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80060e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060e6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80060e8:	4b24      	ldr	r3, [pc, #144]	; (800617c <HAL_ADCEx_InjectedConfigChannel+0x708>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a24      	ldr	r2, [pc, #144]	; (8006180 <HAL_ADCEx_InjectedConfigChannel+0x70c>)
 80060ee:	fba2 2303 	umull	r2, r3, r2, r3
 80060f2:	0c9a      	lsrs	r2, r3, #18
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80060fe:	e002      	b.n	8006106 <HAL_ADCEx_InjectedConfigChannel+0x692>
          {
            wait_loop_index--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3b01      	subs	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1f9      	bne.n	8006100 <HAL_ADCEx_InjectedConfigChannel+0x68c>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800610c:	e024      	b.n	8006158 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b11      	cmp	r3, #17
 8006114:	d10b      	bne.n	800612e <HAL_ADCEx_InjectedConfigChannel+0x6ba>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800611e:	d106      	bne.n	800612e <HAL_ADCEx_InjectedConfigChannel+0x6ba>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006120:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800612a:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800612c:	e014      	b.n	8006158 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b12      	cmp	r3, #18
 8006134:	d110      	bne.n	8006158 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8006136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800613e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006140:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006142:	e009      	b.n	8006158 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	f043 0220 	orr.w	r2, r3, #32
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006156:	e000      	b.n	800615a <HAL_ADCEx_InjectedConfigChannel+0x6e6>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006158:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006162:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006166:	4618      	mov	r0, r3
 8006168:	3774      	adds	r7, #116	; 0x74
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	50000400 	.word	0x50000400
 8006178:	50000500 	.word	0x50000500
 800617c:	20000690 	.word	0x20000690
 8006180:	431bde83 	.word	0x431bde83

08006184 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8006184:	b480      	push	{r7}
 8006186:	b099      	sub	sp, #100	; 0x64
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800619c:	d102      	bne.n	80061a4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800619e:	4b6d      	ldr	r3, [pc, #436]	; (8006354 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80061a0:	60bb      	str	r3, [r7, #8]
 80061a2:	e01a      	b.n	80061da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a6a      	ldr	r2, [pc, #424]	; (8006354 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d103      	bne.n	80061b6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80061ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80061b2:	60bb      	str	r3, [r7, #8]
 80061b4:	e011      	b.n	80061da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a67      	ldr	r2, [pc, #412]	; (8006358 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d102      	bne.n	80061c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80061c0:	4b66      	ldr	r3, [pc, #408]	; (800635c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80061c2:	60bb      	str	r3, [r7, #8]
 80061c4:	e009      	b.n	80061da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a64      	ldr	r2, [pc, #400]	; (800635c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d102      	bne.n	80061d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80061d0:	4b61      	ldr	r3, [pc, #388]	; (8006358 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	e001      	b.n	80061da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0b0      	b.n	8006346 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e0a9      	b.n	8006346 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	f040 808d 	bne.w	8006324 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	f040 8086 	bne.w	8006324 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006220:	d004      	beq.n	800622c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a4b      	ldr	r2, [pc, #300]	; (8006354 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d101      	bne.n	8006230 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800622c:	4b4c      	ldr	r3, [pc, #304]	; (8006360 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800622e:	e000      	b.n	8006232 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006230:	4b4c      	ldr	r3, [pc, #304]	; (8006364 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8006232:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d040      	beq.n	80062be <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800623c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	6859      	ldr	r1, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800624e:	035b      	lsls	r3, r3, #13
 8006250:	430b      	orrs	r3, r1
 8006252:	431a      	orrs	r2, r3
 8006254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006256:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	2b01      	cmp	r3, #1
 8006264:	d108      	bne.n	8006278 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8006278:	2300      	movs	r3, #0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d15c      	bne.n	8006338 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	2b01      	cmp	r3, #1
 8006288:	d107      	bne.n	800629a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800629a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800629c:	2b00      	cmp	r3, #0
 800629e:	d14b      	bne.n	8006338 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80062a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80062a8:	f023 030f 	bic.w	r3, r3, #15
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	6811      	ldr	r1, [r2, #0]
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	6892      	ldr	r2, [r2, #8]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	431a      	orrs	r2, r3
 80062b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062ba:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80062bc:	e03c      	b.n	8006338 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80062be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062c8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 0303 	and.w	r3, r3, #3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d108      	bne.n	80062ea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80062ea:	2300      	movs	r3, #0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d123      	bne.n	8006338 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d107      	bne.n	800630c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006308:	2301      	movs	r3, #1
 800630a:	e000      	b.n	800630e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800630c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800630e:	2b00      	cmp	r3, #0
 8006310:	d112      	bne.n	8006338 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8006312:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800631a:	f023 030f 	bic.w	r3, r3, #15
 800631e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006320:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006322:	e009      	b.n	8006338 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	f043 0220 	orr.w	r2, r3, #32
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006336:	e000      	b.n	800633a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006338:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006342:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8006346:	4618      	mov	r0, r3
 8006348:	3764      	adds	r7, #100	; 0x64
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	50000100 	.word	0x50000100
 8006358:	50000400 	.word	0x50000400
 800635c:	50000500 	.word	0x50000500
 8006360:	50000300 	.word	0x50000300
 8006364:	50000700 	.word	0x50000700

08006368 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	2b01      	cmp	r3, #1
 8006380:	d108      	bne.n	8006394 <ADC_Disable+0x2c>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <ADC_Disable+0x2c>
 8006390:	2301      	movs	r3, #1
 8006392:	e000      	b.n	8006396 <ADC_Disable+0x2e>
 8006394:	2300      	movs	r3, #0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d040      	beq.n	800641c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f003 030d 	and.w	r3, r3, #13
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d10f      	bne.n	80063c8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0202 	orr.w	r2, r2, #2
 80063b6:	609a      	str	r2, [r3, #8]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2203      	movs	r2, #3
 80063be:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80063c0:	f7fe fe5e 	bl	8005080 <HAL_GetTick>
 80063c4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80063c6:	e022      	b.n	800640e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	f043 0210 	orr.w	r2, r3, #16
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d8:	f043 0201 	orr.w	r2, r3, #1
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e01c      	b.n	800641e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80063e4:	f7fe fe4c 	bl	8005080 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d90d      	bls.n	800640e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	f043 0210 	orr.w	r2, r3, #16
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006402:	f043 0201 	orr.w	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e007      	b.n	800641e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b01      	cmp	r3, #1
 800641a:	d0e3      	beq.n	80063e4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d007      	beq.n	800644a <HAL_COMP_Init+0x22>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006440:	b2db      	uxtb	r3, r3
 8006442:	f003 0310 	and.w	r3, r3, #16
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	75fb      	strb	r3, [r7, #23]
 800644e:	e064      	b.n	800651a <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006450:	4b34      	ldr	r3, [pc, #208]	; (8006524 <HAL_COMP_Init+0xfc>)
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	4a33      	ldr	r2, [pc, #204]	; (8006524 <HAL_COMP_Init+0xfc>)
 8006456:	f043 0301 	orr.w	r3, r3, #1
 800645a:	6193      	str	r3, [r2, #24]
 800645c:	4b31      	ldr	r3, [pc, #196]	; (8006524 <HAL_COMP_Init+0xfc>)
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7fd f9d5 	bl	8003818 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d103      	bne.n	8006482 <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f023 020c 	bic.w	r2, r3, #12
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 800651a:	7dfb      	ldrb	r3, [r7, #23]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40021000 	.word	0x40021000

08006528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006538:	4b0c      	ldr	r3, [pc, #48]	; (800656c <__NVIC_SetPriorityGrouping+0x44>)
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006544:	4013      	ands	r3, r2
 8006546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800655a:	4a04      	ldr	r2, [pc, #16]	; (800656c <__NVIC_SetPriorityGrouping+0x44>)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	60d3      	str	r3, [r2, #12]
}
 8006560:	bf00      	nop
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	e000ed00 	.word	0xe000ed00

08006570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006574:	4b04      	ldr	r3, [pc, #16]	; (8006588 <__NVIC_GetPriorityGrouping+0x18>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	0a1b      	lsrs	r3, r3, #8
 800657a:	f003 0307 	and.w	r3, r3, #7
}
 800657e:	4618      	mov	r0, r3
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	e000ed00 	.word	0xe000ed00

0800658c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800659a:	2b00      	cmp	r3, #0
 800659c:	db0b      	blt.n	80065b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	f003 021f 	and.w	r2, r3, #31
 80065a4:	4907      	ldr	r1, [pc, #28]	; (80065c4 <__NVIC_EnableIRQ+0x38>)
 80065a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065aa:	095b      	lsrs	r3, r3, #5
 80065ac:	2001      	movs	r0, #1
 80065ae:	fa00 f202 	lsl.w	r2, r0, r2
 80065b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	e000e100 	.word	0xe000e100

080065c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	6039      	str	r1, [r7, #0]
 80065d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	db0a      	blt.n	80065f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	490c      	ldr	r1, [pc, #48]	; (8006614 <__NVIC_SetPriority+0x4c>)
 80065e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e6:	0112      	lsls	r2, r2, #4
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	440b      	add	r3, r1
 80065ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065f0:	e00a      	b.n	8006608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	4908      	ldr	r1, [pc, #32]	; (8006618 <__NVIC_SetPriority+0x50>)
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	3b04      	subs	r3, #4
 8006600:	0112      	lsls	r2, r2, #4
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	440b      	add	r3, r1
 8006606:	761a      	strb	r2, [r3, #24]
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	e000e100 	.word	0xe000e100
 8006618:	e000ed00 	.word	0xe000ed00

0800661c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800661c:	b480      	push	{r7}
 800661e:	b089      	sub	sp, #36	; 0x24
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	f1c3 0307 	rsb	r3, r3, #7
 8006636:	2b04      	cmp	r3, #4
 8006638:	bf28      	it	cs
 800663a:	2304      	movcs	r3, #4
 800663c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	3304      	adds	r3, #4
 8006642:	2b06      	cmp	r3, #6
 8006644:	d902      	bls.n	800664c <NVIC_EncodePriority+0x30>
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	3b03      	subs	r3, #3
 800664a:	e000      	b.n	800664e <NVIC_EncodePriority+0x32>
 800664c:	2300      	movs	r3, #0
 800664e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006650:	f04f 32ff 	mov.w	r2, #4294967295
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	fa02 f303 	lsl.w	r3, r2, r3
 800665a:	43da      	mvns	r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	401a      	ands	r2, r3
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006664:	f04f 31ff 	mov.w	r1, #4294967295
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	fa01 f303 	lsl.w	r3, r1, r3
 800666e:	43d9      	mvns	r1, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006674:	4313      	orrs	r3, r2
         );
}
 8006676:	4618      	mov	r0, r3
 8006678:	3724      	adds	r7, #36	; 0x24
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
	...

08006684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3b01      	subs	r3, #1
 8006690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006694:	d301      	bcc.n	800669a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006696:	2301      	movs	r3, #1
 8006698:	e00f      	b.n	80066ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800669a:	4a0a      	ldr	r2, [pc, #40]	; (80066c4 <SysTick_Config+0x40>)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3b01      	subs	r3, #1
 80066a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066a2:	210f      	movs	r1, #15
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295
 80066a8:	f7ff ff8e 	bl	80065c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066ac:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <SysTick_Config+0x40>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066b2:	4b04      	ldr	r3, [pc, #16]	; (80066c4 <SysTick_Config+0x40>)
 80066b4:	2207      	movs	r2, #7
 80066b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	e000e010 	.word	0xe000e010

080066c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7ff ff29 	bl	8006528 <__NVIC_SetPriorityGrouping>
}
 80066d6:	bf00      	nop
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	4603      	mov	r3, r0
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
 80066ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80066f0:	f7ff ff3e 	bl	8006570 <__NVIC_GetPriorityGrouping>
 80066f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	6978      	ldr	r0, [r7, #20]
 80066fc:	f7ff ff8e 	bl	800661c <NVIC_EncodePriority>
 8006700:	4602      	mov	r2, r0
 8006702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006706:	4611      	mov	r1, r2
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff ff5d 	bl	80065c8 <__NVIC_SetPriority>
}
 800670e:	bf00      	nop
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	4603      	mov	r3, r0
 800671e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff ff31 	bl	800658c <__NVIC_EnableIRQ>
}
 800672a:	bf00      	nop
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff ffa2 	bl	8006684 <SysTick_Config>
 8006740:	4603      	mov	r3, r0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800674e:	f000 f802 	bl	8006756 <HAL_SYSTICK_Callback>
}
 8006752:	bf00      	nop
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8006756:	b480      	push	{r7}
 8006758:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800675a:	bf00      	nop
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006772:	e154      	b.n	8006a1e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	2101      	movs	r1, #1
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	fa01 f303 	lsl.w	r3, r1, r3
 8006780:	4013      	ands	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 8146 	beq.w	8006a18 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d003      	beq.n	800679c <HAL_GPIO_Init+0x38>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	2b12      	cmp	r3, #18
 800679a:	d123      	bne.n	80067e4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	08da      	lsrs	r2, r3, #3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3208      	adds	r2, #8
 80067a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	220f      	movs	r2, #15
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	43db      	mvns	r3, r3
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4013      	ands	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	08da      	lsrs	r2, r3, #3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3208      	adds	r2, #8
 80067de:	6939      	ldr	r1, [r7, #16]
 80067e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	2203      	movs	r2, #3
 80067f0:	fa02 f303 	lsl.w	r3, r2, r3
 80067f4:	43db      	mvns	r3, r3
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4013      	ands	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f003 0203 	and.w	r2, r3, #3
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	fa02 f303 	lsl.w	r3, r2, r3
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d00b      	beq.n	8006838 <HAL_GPIO_Init+0xd4>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b02      	cmp	r3, #2
 8006826:	d007      	beq.n	8006838 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800682c:	2b11      	cmp	r3, #17
 800682e:	d003      	beq.n	8006838 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b12      	cmp	r3, #18
 8006836:	d130      	bne.n	800689a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	2203      	movs	r2, #3
 8006844:	fa02 f303 	lsl.w	r3, r2, r3
 8006848:	43db      	mvns	r3, r3
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4013      	ands	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68da      	ldr	r2, [r3, #12]
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	fa02 f303 	lsl.w	r3, r2, r3
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	4313      	orrs	r3, r2
 8006860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800686e:	2201      	movs	r2, #1
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	fa02 f303 	lsl.w	r3, r2, r3
 8006876:	43db      	mvns	r3, r3
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4013      	ands	r3, r2
 800687c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	091b      	lsrs	r3, r3, #4
 8006884:	f003 0201 	and.w	r2, r3, #1
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	2203      	movs	r2, #3
 80068a6:	fa02 f303 	lsl.w	r3, r2, r3
 80068aa:	43db      	mvns	r3, r3
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	4013      	ands	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	fa02 f303 	lsl.w	r3, r2, r3
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80a0 	beq.w	8006a18 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068d8:	4b58      	ldr	r3, [pc, #352]	; (8006a3c <HAL_GPIO_Init+0x2d8>)
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	4a57      	ldr	r2, [pc, #348]	; (8006a3c <HAL_GPIO_Init+0x2d8>)
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	6193      	str	r3, [r2, #24]
 80068e4:	4b55      	ldr	r3, [pc, #340]	; (8006a3c <HAL_GPIO_Init+0x2d8>)
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	60bb      	str	r3, [r7, #8]
 80068ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80068f0:	4a53      	ldr	r2, [pc, #332]	; (8006a40 <HAL_GPIO_Init+0x2dc>)
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	089b      	lsrs	r3, r3, #2
 80068f6:	3302      	adds	r3, #2
 80068f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	220f      	movs	r2, #15
 8006908:	fa02 f303 	lsl.w	r3, r2, r3
 800690c:	43db      	mvns	r3, r3
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4013      	ands	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800691a:	d019      	beq.n	8006950 <HAL_GPIO_Init+0x1ec>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a49      	ldr	r2, [pc, #292]	; (8006a44 <HAL_GPIO_Init+0x2e0>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d013      	beq.n	800694c <HAL_GPIO_Init+0x1e8>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a48      	ldr	r2, [pc, #288]	; (8006a48 <HAL_GPIO_Init+0x2e4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00d      	beq.n	8006948 <HAL_GPIO_Init+0x1e4>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a47      	ldr	r2, [pc, #284]	; (8006a4c <HAL_GPIO_Init+0x2e8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d007      	beq.n	8006944 <HAL_GPIO_Init+0x1e0>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a46      	ldr	r2, [pc, #280]	; (8006a50 <HAL_GPIO_Init+0x2ec>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d101      	bne.n	8006940 <HAL_GPIO_Init+0x1dc>
 800693c:	2304      	movs	r3, #4
 800693e:	e008      	b.n	8006952 <HAL_GPIO_Init+0x1ee>
 8006940:	2305      	movs	r3, #5
 8006942:	e006      	b.n	8006952 <HAL_GPIO_Init+0x1ee>
 8006944:	2303      	movs	r3, #3
 8006946:	e004      	b.n	8006952 <HAL_GPIO_Init+0x1ee>
 8006948:	2302      	movs	r3, #2
 800694a:	e002      	b.n	8006952 <HAL_GPIO_Init+0x1ee>
 800694c:	2301      	movs	r3, #1
 800694e:	e000      	b.n	8006952 <HAL_GPIO_Init+0x1ee>
 8006950:	2300      	movs	r3, #0
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	f002 0203 	and.w	r2, r2, #3
 8006958:	0092      	lsls	r2, r2, #2
 800695a:	4093      	lsls	r3, r2
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	4313      	orrs	r3, r2
 8006960:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006962:	4937      	ldr	r1, [pc, #220]	; (8006a40 <HAL_GPIO_Init+0x2dc>)
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	089b      	lsrs	r3, r3, #2
 8006968:	3302      	adds	r3, #2
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006970:	4b38      	ldr	r3, [pc, #224]	; (8006a54 <HAL_GPIO_Init+0x2f0>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	43db      	mvns	r3, r3
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4013      	ands	r3, r2
 800697e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006994:	4a2f      	ldr	r2, [pc, #188]	; (8006a54 <HAL_GPIO_Init+0x2f0>)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800699a:	4b2e      	ldr	r3, [pc, #184]	; (8006a54 <HAL_GPIO_Init+0x2f0>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	43db      	mvns	r3, r3
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4013      	ands	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80069be:	4a25      	ldr	r2, [pc, #148]	; (8006a54 <HAL_GPIO_Init+0x2f0>)
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80069c4:	4b23      	ldr	r3, [pc, #140]	; (8006a54 <HAL_GPIO_Init+0x2f0>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	43db      	mvns	r3, r3
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4013      	ands	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80069e8:	4a1a      	ldr	r2, [pc, #104]	; (8006a54 <HAL_GPIO_Init+0x2f0>)
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80069ee:	4b19      	ldr	r3, [pc, #100]	; (8006a54 <HAL_GPIO_Init+0x2f0>)
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	43db      	mvns	r3, r3
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4013      	ands	r3, r2
 80069fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006a12:	4a10      	ldr	r2, [pc, #64]	; (8006a54 <HAL_GPIO_Init+0x2f0>)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	fa22 f303 	lsr.w	r3, r2, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f47f aea3 	bne.w	8006774 <HAL_GPIO_Init+0x10>
  }
}
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	40021000 	.word	0x40021000
 8006a40:	40010000 	.word	0x40010000
 8006a44:	48000400 	.word	0x48000400
 8006a48:	48000800 	.word	0x48000800
 8006a4c:	48000c00 	.word	0x48000c00
 8006a50:	48001000 	.word	0x48001000
 8006a54:	40010400 	.word	0x40010400

08006a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	1d3b      	adds	r3, r7, #4
 8006a62:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a64:	1d3b      	adds	r3, r7, #4
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d102      	bne.n	8006a72 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f000 bef4 	b.w	800785a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a72:	1d3b      	adds	r3, r7, #4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 816a 	beq.w	8006d56 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006a82:	4bb3      	ldr	r3, [pc, #716]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f003 030c 	and.w	r3, r3, #12
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d00c      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a8e:	4bb0      	ldr	r3, [pc, #704]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f003 030c 	and.w	r3, r3, #12
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d159      	bne.n	8006b4e <HAL_RCC_OscConfig+0xf6>
 8006a9a:	4bad      	ldr	r3, [pc, #692]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa6:	d152      	bne.n	8006b4e <HAL_RCC_OscConfig+0xf6>
 8006aa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006aac:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006ab4:	fa93 f3a3 	rbit	r3, r3
 8006ab8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8006abc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac0:	fab3 f383 	clz	r3, r3
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	095b      	lsrs	r3, r3, #5
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	f043 0301 	orr.w	r3, r3, #1
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d102      	bne.n	8006ada <HAL_RCC_OscConfig+0x82>
 8006ad4:	4b9e      	ldr	r3, [pc, #632]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	e015      	b.n	8006b06 <HAL_RCC_OscConfig+0xae>
 8006ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ade:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006ae6:	fa93 f3a3 	rbit	r3, r3
 8006aea:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006aee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006af2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006af6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006afa:	fa93 f3a3 	rbit	r3, r3
 8006afe:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006b02:	4b93      	ldr	r3, [pc, #588]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b0a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006b0e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006b12:	fa92 f2a2 	rbit	r2, r2
 8006b16:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006b1a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006b1e:	fab2 f282 	clz	r2, r2
 8006b22:	b2d2      	uxtb	r2, r2
 8006b24:	f042 0220 	orr.w	r2, r2, #32
 8006b28:	b2d2      	uxtb	r2, r2
 8006b2a:	f002 021f 	and.w	r2, r2, #31
 8006b2e:	2101      	movs	r1, #1
 8006b30:	fa01 f202 	lsl.w	r2, r1, r2
 8006b34:	4013      	ands	r3, r2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 810c 	beq.w	8006d54 <HAL_RCC_OscConfig+0x2fc>
 8006b3c:	1d3b      	adds	r3, r7, #4
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f040 8106 	bne.w	8006d54 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f000 be86 	b.w	800785a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b4e:	1d3b      	adds	r3, r7, #4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b58:	d106      	bne.n	8006b68 <HAL_RCC_OscConfig+0x110>
 8006b5a:	4b7d      	ldr	r3, [pc, #500]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a7c      	ldr	r2, [pc, #496]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	e030      	b.n	8006bca <HAL_RCC_OscConfig+0x172>
 8006b68:	1d3b      	adds	r3, r7, #4
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10c      	bne.n	8006b8c <HAL_RCC_OscConfig+0x134>
 8006b72:	4b77      	ldr	r3, [pc, #476]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a76      	ldr	r2, [pc, #472]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b7c:	6013      	str	r3, [r2, #0]
 8006b7e:	4b74      	ldr	r3, [pc, #464]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a73      	ldr	r2, [pc, #460]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	e01e      	b.n	8006bca <HAL_RCC_OscConfig+0x172>
 8006b8c:	1d3b      	adds	r3, r7, #4
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b96:	d10c      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x15a>
 8006b98:	4b6d      	ldr	r3, [pc, #436]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a6c      	ldr	r2, [pc, #432]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006b9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	4b6a      	ldr	r3, [pc, #424]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a69      	ldr	r2, [pc, #420]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	e00b      	b.n	8006bca <HAL_RCC_OscConfig+0x172>
 8006bb2:	4b67      	ldr	r3, [pc, #412]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a66      	ldr	r2, [pc, #408]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	4b64      	ldr	r3, [pc, #400]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a63      	ldr	r2, [pc, #396]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bc8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006bca:	4b61      	ldr	r3, [pc, #388]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	f023 020f 	bic.w	r2, r3, #15
 8006bd2:	1d3b      	adds	r3, r7, #4
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	495d      	ldr	r1, [pc, #372]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bde:	1d3b      	adds	r3, r7, #4
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d059      	beq.n	8006c9c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be8:	f7fe fa4a 	bl	8005080 <HAL_GetTick>
 8006bec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bf0:	e00a      	b.n	8006c08 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bf2:	f7fe fa45 	bl	8005080 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b64      	cmp	r3, #100	; 0x64
 8006c00:	d902      	bls.n	8006c08 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	f000 be29 	b.w	800785a <HAL_RCC_OscConfig+0xe02>
 8006c08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c0c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c10:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006c14:	fa93 f3a3 	rbit	r3, r3
 8006c18:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006c1c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c20:	fab3 f383 	clz	r3, r3
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	095b      	lsrs	r3, r3, #5
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	f043 0301 	orr.w	r3, r3, #1
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d102      	bne.n	8006c3a <HAL_RCC_OscConfig+0x1e2>
 8006c34:	4b46      	ldr	r3, [pc, #280]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	e015      	b.n	8006c66 <HAL_RCC_OscConfig+0x20e>
 8006c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c3e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c42:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006c46:	fa93 f3a3 	rbit	r3, r3
 8006c4a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006c4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c52:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006c56:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006c5a:	fa93 f3a3 	rbit	r3, r3
 8006c5e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006c62:	4b3b      	ldr	r3, [pc, #236]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c6a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006c6e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006c72:	fa92 f2a2 	rbit	r2, r2
 8006c76:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006c7a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006c7e:	fab2 f282 	clz	r2, r2
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	f042 0220 	orr.w	r2, r2, #32
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	f002 021f 	and.w	r2, r2, #31
 8006c8e:	2101      	movs	r1, #1
 8006c90:	fa01 f202 	lsl.w	r2, r1, r2
 8006c94:	4013      	ands	r3, r2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0ab      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x19a>
 8006c9a:	e05c      	b.n	8006d56 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c9c:	f7fe f9f0 	bl	8005080 <HAL_GetTick>
 8006ca0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ca4:	e00a      	b.n	8006cbc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ca6:	f7fe f9eb 	bl	8005080 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b64      	cmp	r3, #100	; 0x64
 8006cb4:	d902      	bls.n	8006cbc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	f000 bdcf 	b.w	800785a <HAL_RCC_OscConfig+0xe02>
 8006cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cc0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cc4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006cc8:	fa93 f3a3 	rbit	r3, r3
 8006ccc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006cd0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cd4:	fab3 f383 	clz	r3, r3
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	095b      	lsrs	r3, r3, #5
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	f043 0301 	orr.w	r3, r3, #1
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d102      	bne.n	8006cee <HAL_RCC_OscConfig+0x296>
 8006ce8:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	e015      	b.n	8006d1a <HAL_RCC_OscConfig+0x2c2>
 8006cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cf2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006cfa:	fa93 f3a3 	rbit	r3, r3
 8006cfe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d06:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006d0a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006d0e:	fa93 f3a3 	rbit	r3, r3
 8006d12:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006d16:	4b0e      	ldr	r3, [pc, #56]	; (8006d50 <HAL_RCC_OscConfig+0x2f8>)
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d1e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006d22:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006d26:	fa92 f2a2 	rbit	r2, r2
 8006d2a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006d2e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006d32:	fab2 f282 	clz	r2, r2
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	f042 0220 	orr.w	r2, r2, #32
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	f002 021f 	and.w	r2, r2, #31
 8006d42:	2101      	movs	r1, #1
 8006d44:	fa01 f202 	lsl.w	r2, r1, r2
 8006d48:	4013      	ands	r3, r2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1ab      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x24e>
 8006d4e:	e002      	b.n	8006d56 <HAL_RCC_OscConfig+0x2fe>
 8006d50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 816f 	beq.w	8007044 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006d66:	4bd0      	ldr	r3, [pc, #832]	; (80070a8 <HAL_RCC_OscConfig+0x650>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f003 030c 	and.w	r3, r3, #12
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00b      	beq.n	8006d8a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006d72:	4bcd      	ldr	r3, [pc, #820]	; (80070a8 <HAL_RCC_OscConfig+0x650>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f003 030c 	and.w	r3, r3, #12
 8006d7a:	2b08      	cmp	r3, #8
 8006d7c:	d16c      	bne.n	8006e58 <HAL_RCC_OscConfig+0x400>
 8006d7e:	4bca      	ldr	r3, [pc, #808]	; (80070a8 <HAL_RCC_OscConfig+0x650>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d166      	bne.n	8006e58 <HAL_RCC_OscConfig+0x400>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d90:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006d94:	fa93 f3a3 	rbit	r3, r3
 8006d98:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006d9c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006da0:	fab3 f383 	clz	r3, r3
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	f043 0301 	orr.w	r3, r3, #1
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d102      	bne.n	8006dba <HAL_RCC_OscConfig+0x362>
 8006db4:	4bbc      	ldr	r3, [pc, #752]	; (80070a8 <HAL_RCC_OscConfig+0x650>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	e013      	b.n	8006de2 <HAL_RCC_OscConfig+0x38a>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006dc4:	fa93 f3a3 	rbit	r3, r3
 8006dc8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006dcc:	2302      	movs	r3, #2
 8006dce:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006dd2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006dd6:	fa93 f3a3 	rbit	r3, r3
 8006dda:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006dde:	4bb2      	ldr	r3, [pc, #712]	; (80070a8 <HAL_RCC_OscConfig+0x650>)
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	2202      	movs	r2, #2
 8006de4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006de8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006dec:	fa92 f2a2 	rbit	r2, r2
 8006df0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006df4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006df8:	fab2 f282 	clz	r2, r2
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	f042 0220 	orr.w	r2, r2, #32
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	f002 021f 	and.w	r2, r2, #31
 8006e08:	2101      	movs	r1, #1
 8006e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e0e:	4013      	ands	r3, r2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <HAL_RCC_OscConfig+0x3cc>
 8006e14:	1d3b      	adds	r3, r7, #4
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d002      	beq.n	8006e24 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f000 bd1b 	b.w	800785a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e24:	4ba0      	ldr	r3, [pc, #640]	; (80070a8 <HAL_RCC_OscConfig+0x650>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e2c:	1d3b      	adds	r3, r7, #4
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	21f8      	movs	r1, #248	; 0xf8
 8006e34:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e38:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006e3c:	fa91 f1a1 	rbit	r1, r1
 8006e40:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006e44:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006e48:	fab1 f181 	clz	r1, r1
 8006e4c:	b2c9      	uxtb	r1, r1
 8006e4e:	408b      	lsls	r3, r1
 8006e50:	4995      	ldr	r1, [pc, #596]	; (80070a8 <HAL_RCC_OscConfig+0x650>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e56:	e0f5      	b.n	8007044 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e58:	1d3b      	adds	r3, r7, #4
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 8085 	beq.w	8006f6e <HAL_RCC_OscConfig+0x516>
 8006e64:	2301      	movs	r3, #1
 8006e66:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006e6e:	fa93 f3a3 	rbit	r3, r3
 8006e72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006e76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e7a:	fab3 f383 	clz	r3, r3
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e90:	f7fe f8f6 	bl	8005080 <HAL_GetTick>
 8006e94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e98:	e00a      	b.n	8006eb0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e9a:	f7fe f8f1 	bl	8005080 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d902      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	f000 bcd5 	b.w	800785a <HAL_RCC_OscConfig+0xe02>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006eba:	fa93 f3a3 	rbit	r3, r3
 8006ebe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006ec2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ec6:	fab3 f383 	clz	r3, r3
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	095b      	lsrs	r3, r3, #5
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f043 0301 	orr.w	r3, r3, #1
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d102      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x488>
 8006eda:	4b73      	ldr	r3, [pc, #460]	; (80070a8 <HAL_RCC_OscConfig+0x650>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	e013      	b.n	8006f08 <HAL_RCC_OscConfig+0x4b0>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006eea:	fa93 f3a3 	rbit	r3, r3
 8006eee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006ef8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006efc:	fa93 f3a3 	rbit	r3, r3
 8006f00:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006f04:	4b68      	ldr	r3, [pc, #416]	; (80070a8 <HAL_RCC_OscConfig+0x650>)
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	2202      	movs	r2, #2
 8006f0a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006f0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006f12:	fa92 f2a2 	rbit	r2, r2
 8006f16:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006f1a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006f1e:	fab2 f282 	clz	r2, r2
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	f042 0220 	orr.w	r2, r2, #32
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	f002 021f 	and.w	r2, r2, #31
 8006f2e:	2101      	movs	r1, #1
 8006f30:	fa01 f202 	lsl.w	r2, r1, r2
 8006f34:	4013      	ands	r3, r2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0af      	beq.n	8006e9a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f3a:	4b5b      	ldr	r3, [pc, #364]	; (80070a8 <HAL_RCC_OscConfig+0x650>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f42:	1d3b      	adds	r3, r7, #4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	21f8      	movs	r1, #248	; 0xf8
 8006f4a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f4e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006f52:	fa91 f1a1 	rbit	r1, r1
 8006f56:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006f5a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006f5e:	fab1 f181 	clz	r1, r1
 8006f62:	b2c9      	uxtb	r1, r1
 8006f64:	408b      	lsls	r3, r1
 8006f66:	4950      	ldr	r1, [pc, #320]	; (80070a8 <HAL_RCC_OscConfig+0x650>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	600b      	str	r3, [r1, #0]
 8006f6c:	e06a      	b.n	8007044 <HAL_RCC_OscConfig+0x5ec>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006f78:	fa93 f3a3 	rbit	r3, r3
 8006f7c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006f80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f84:	fab3 f383 	clz	r3, r3
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	461a      	mov	r2, r3
 8006f96:	2300      	movs	r3, #0
 8006f98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f9a:	f7fe f871 	bl	8005080 <HAL_GetTick>
 8006f9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fa2:	e00a      	b.n	8006fba <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fa4:	f7fe f86c 	bl	8005080 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d902      	bls.n	8006fba <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	f000 bc50 	b.w	800785a <HAL_RCC_OscConfig+0xe02>
 8006fba:	2302      	movs	r3, #2
 8006fbc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006fc4:	fa93 f3a3 	rbit	r3, r3
 8006fc8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fd0:	fab3 f383 	clz	r3, r3
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d102      	bne.n	8006fea <HAL_RCC_OscConfig+0x592>
 8006fe4:	4b30      	ldr	r3, [pc, #192]	; (80070a8 <HAL_RCC_OscConfig+0x650>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	e013      	b.n	8007012 <HAL_RCC_OscConfig+0x5ba>
 8006fea:	2302      	movs	r3, #2
 8006fec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ff4:	fa93 f3a3 	rbit	r3, r3
 8006ff8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007002:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007006:	fa93 f3a3 	rbit	r3, r3
 800700a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800700e:	4b26      	ldr	r3, [pc, #152]	; (80070a8 <HAL_RCC_OscConfig+0x650>)
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	2202      	movs	r2, #2
 8007014:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007018:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800701c:	fa92 f2a2 	rbit	r2, r2
 8007020:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007024:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007028:	fab2 f282 	clz	r2, r2
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	f042 0220 	orr.w	r2, r2, #32
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	f002 021f 	and.w	r2, r2, #31
 8007038:	2101      	movs	r1, #1
 800703a:	fa01 f202 	lsl.w	r2, r1, r2
 800703e:	4013      	ands	r3, r2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1af      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007044:	1d3b      	adds	r3, r7, #4
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0308 	and.w	r3, r3, #8
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 80da 	beq.w	8007208 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007054:	1d3b      	adds	r3, r7, #4
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d069      	beq.n	8007132 <HAL_RCC_OscConfig+0x6da>
 800705e:	2301      	movs	r3, #1
 8007060:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007064:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007068:	fa93 f3a3 	rbit	r3, r3
 800706c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007074:	fab3 f383 	clz	r3, r3
 8007078:	b2db      	uxtb	r3, r3
 800707a:	461a      	mov	r2, r3
 800707c:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <HAL_RCC_OscConfig+0x654>)
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	461a      	mov	r2, r3
 8007084:	2301      	movs	r3, #1
 8007086:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007088:	f7fd fffa 	bl	8005080 <HAL_GetTick>
 800708c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007090:	e00e      	b.n	80070b0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007092:	f7fd fff5 	bl	8005080 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d906      	bls.n	80070b0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e3d9      	b.n	800785a <HAL_RCC_OscConfig+0xe02>
 80070a6:	bf00      	nop
 80070a8:	40021000 	.word	0x40021000
 80070ac:	10908120 	.word	0x10908120
 80070b0:	2302      	movs	r3, #2
 80070b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070ba:	fa93 f3a3 	rbit	r3, r3
 80070be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80070c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80070c6:	2202      	movs	r2, #2
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	fa93 f2a3 	rbit	r2, r3
 80070d4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80070de:	2202      	movs	r2, #2
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	fa93 f2a3 	rbit	r2, r3
 80070ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80070f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070f2:	4ba5      	ldr	r3, [pc, #660]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 80070f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80070fa:	2102      	movs	r1, #2
 80070fc:	6019      	str	r1, [r3, #0]
 80070fe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	fa93 f1a3 	rbit	r1, r3
 8007108:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800710c:	6019      	str	r1, [r3, #0]
  return result;
 800710e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	fab3 f383 	clz	r3, r3
 8007118:	b2db      	uxtb	r3, r3
 800711a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800711e:	b2db      	uxtb	r3, r3
 8007120:	f003 031f 	and.w	r3, r3, #31
 8007124:	2101      	movs	r1, #1
 8007126:	fa01 f303 	lsl.w	r3, r1, r3
 800712a:	4013      	ands	r3, r2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0b0      	beq.n	8007092 <HAL_RCC_OscConfig+0x63a>
 8007130:	e06a      	b.n	8007208 <HAL_RCC_OscConfig+0x7b0>
 8007132:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007136:	2201      	movs	r2, #1
 8007138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800713a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	fa93 f2a3 	rbit	r2, r3
 8007144:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007148:	601a      	str	r2, [r3, #0]
  return result;
 800714a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800714e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007150:	fab3 f383 	clz	r3, r3
 8007154:	b2db      	uxtb	r3, r3
 8007156:	461a      	mov	r2, r3
 8007158:	4b8c      	ldr	r3, [pc, #560]	; (800738c <HAL_RCC_OscConfig+0x934>)
 800715a:	4413      	add	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	461a      	mov	r2, r3
 8007160:	2300      	movs	r3, #0
 8007162:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007164:	f7fd ff8c 	bl	8005080 <HAL_GetTick>
 8007168:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800716c:	e009      	b.n	8007182 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800716e:	f7fd ff87 	bl	8005080 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e36b      	b.n	800785a <HAL_RCC_OscConfig+0xe02>
 8007182:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007186:	2202      	movs	r2, #2
 8007188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800718a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	fa93 f2a3 	rbit	r2, r3
 8007194:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800719e:	2202      	movs	r2, #2
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	fa93 f2a3 	rbit	r2, r3
 80071ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80071b6:	2202      	movs	r2, #2
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	fa93 f2a3 	rbit	r2, r3
 80071c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80071c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071ca:	4b6f      	ldr	r3, [pc, #444]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 80071cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80071d2:	2102      	movs	r1, #2
 80071d4:	6019      	str	r1, [r3, #0]
 80071d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	fa93 f1a3 	rbit	r1, r3
 80071e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80071e4:	6019      	str	r1, [r3, #0]
  return result;
 80071e6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	fab3 f383 	clz	r3, r3
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	f003 031f 	and.w	r3, r3, #31
 80071fc:	2101      	movs	r1, #1
 80071fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007202:	4013      	ands	r3, r2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1b2      	bne.n	800716e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007208:	1d3b      	adds	r3, r7, #4
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0304 	and.w	r3, r3, #4
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 8158 	beq.w	80074c8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007218:	2300      	movs	r3, #0
 800721a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800721e:	4b5a      	ldr	r3, [pc, #360]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d112      	bne.n	8007250 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800722a:	4b57      	ldr	r3, [pc, #348]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	4a56      	ldr	r2, [pc, #344]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 8007230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007234:	61d3      	str	r3, [r2, #28]
 8007236:	4b54      	ldr	r3, [pc, #336]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800723e:	f107 0308 	add.w	r3, r7, #8
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	f107 0308 	add.w	r3, r7, #8
 8007248:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800724a:	2301      	movs	r3, #1
 800724c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007250:	4b4f      	ldr	r3, [pc, #316]	; (8007390 <HAL_RCC_OscConfig+0x938>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007258:	2b00      	cmp	r3, #0
 800725a:	d11a      	bne.n	8007292 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800725c:	4b4c      	ldr	r3, [pc, #304]	; (8007390 <HAL_RCC_OscConfig+0x938>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a4b      	ldr	r2, [pc, #300]	; (8007390 <HAL_RCC_OscConfig+0x938>)
 8007262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007266:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007268:	f7fd ff0a 	bl	8005080 <HAL_GetTick>
 800726c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007270:	e009      	b.n	8007286 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007272:	f7fd ff05 	bl	8005080 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b64      	cmp	r3, #100	; 0x64
 8007280:	d901      	bls.n	8007286 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e2e9      	b.n	800785a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007286:	4b42      	ldr	r3, [pc, #264]	; (8007390 <HAL_RCC_OscConfig+0x938>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0ef      	beq.n	8007272 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007292:	1d3b      	adds	r3, r7, #4
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d106      	bne.n	80072aa <HAL_RCC_OscConfig+0x852>
 800729c:	4b3a      	ldr	r3, [pc, #232]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	4a39      	ldr	r2, [pc, #228]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 80072a2:	f043 0301 	orr.w	r3, r3, #1
 80072a6:	6213      	str	r3, [r2, #32]
 80072a8:	e02f      	b.n	800730a <HAL_RCC_OscConfig+0x8b2>
 80072aa:	1d3b      	adds	r3, r7, #4
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10c      	bne.n	80072ce <HAL_RCC_OscConfig+0x876>
 80072b4:	4b34      	ldr	r3, [pc, #208]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	4a33      	ldr	r2, [pc, #204]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 80072ba:	f023 0301 	bic.w	r3, r3, #1
 80072be:	6213      	str	r3, [r2, #32]
 80072c0:	4b31      	ldr	r3, [pc, #196]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	4a30      	ldr	r2, [pc, #192]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 80072c6:	f023 0304 	bic.w	r3, r3, #4
 80072ca:	6213      	str	r3, [r2, #32]
 80072cc:	e01d      	b.n	800730a <HAL_RCC_OscConfig+0x8b2>
 80072ce:	1d3b      	adds	r3, r7, #4
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	2b05      	cmp	r3, #5
 80072d6:	d10c      	bne.n	80072f2 <HAL_RCC_OscConfig+0x89a>
 80072d8:	4b2b      	ldr	r3, [pc, #172]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	4a2a      	ldr	r2, [pc, #168]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 80072de:	f043 0304 	orr.w	r3, r3, #4
 80072e2:	6213      	str	r3, [r2, #32]
 80072e4:	4b28      	ldr	r3, [pc, #160]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	4a27      	ldr	r2, [pc, #156]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 80072ea:	f043 0301 	orr.w	r3, r3, #1
 80072ee:	6213      	str	r3, [r2, #32]
 80072f0:	e00b      	b.n	800730a <HAL_RCC_OscConfig+0x8b2>
 80072f2:	4b25      	ldr	r3, [pc, #148]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	4a24      	ldr	r2, [pc, #144]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 80072f8:	f023 0301 	bic.w	r3, r3, #1
 80072fc:	6213      	str	r3, [r2, #32]
 80072fe:	4b22      	ldr	r3, [pc, #136]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	4a21      	ldr	r2, [pc, #132]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 8007304:	f023 0304 	bic.w	r3, r3, #4
 8007308:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800730a:	1d3b      	adds	r3, r7, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d06b      	beq.n	80073ec <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007314:	f7fd feb4 	bl	8005080 <HAL_GetTick>
 8007318:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800731c:	e00b      	b.n	8007336 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800731e:	f7fd feaf 	bl	8005080 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	f241 3288 	movw	r2, #5000	; 0x1388
 800732e:	4293      	cmp	r3, r2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e291      	b.n	800785a <HAL_RCC_OscConfig+0xe02>
 8007336:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800733a:	2202      	movs	r2, #2
 800733c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800733e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	fa93 f2a3 	rbit	r2, r3
 8007348:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007352:	2202      	movs	r2, #2
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	fa93 f2a3 	rbit	r2, r3
 8007360:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007364:	601a      	str	r2, [r3, #0]
  return result;
 8007366:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800736a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800736c:	fab3 f383 	clz	r3, r3
 8007370:	b2db      	uxtb	r3, r3
 8007372:	095b      	lsrs	r3, r3, #5
 8007374:	b2db      	uxtb	r3, r3
 8007376:	f043 0302 	orr.w	r3, r3, #2
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d109      	bne.n	8007394 <HAL_RCC_OscConfig+0x93c>
 8007380:	4b01      	ldr	r3, [pc, #4]	; (8007388 <HAL_RCC_OscConfig+0x930>)
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	e014      	b.n	80073b0 <HAL_RCC_OscConfig+0x958>
 8007386:	bf00      	nop
 8007388:	40021000 	.word	0x40021000
 800738c:	10908120 	.word	0x10908120
 8007390:	40007000 	.word	0x40007000
 8007394:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007398:	2202      	movs	r2, #2
 800739a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800739c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	fa93 f2a3 	rbit	r2, r3
 80073a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	4bbb      	ldr	r3, [pc, #748]	; (800769c <HAL_RCC_OscConfig+0xc44>)
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80073b4:	2102      	movs	r1, #2
 80073b6:	6011      	str	r1, [r2, #0]
 80073b8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80073bc:	6812      	ldr	r2, [r2, #0]
 80073be:	fa92 f1a2 	rbit	r1, r2
 80073c2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80073c6:	6011      	str	r1, [r2, #0]
  return result;
 80073c8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80073cc:	6812      	ldr	r2, [r2, #0]
 80073ce:	fab2 f282 	clz	r2, r2
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073d8:	b2d2      	uxtb	r2, r2
 80073da:	f002 021f 	and.w	r2, r2, #31
 80073de:	2101      	movs	r1, #1
 80073e0:	fa01 f202 	lsl.w	r2, r1, r2
 80073e4:	4013      	ands	r3, r2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d099      	beq.n	800731e <HAL_RCC_OscConfig+0x8c6>
 80073ea:	e063      	b.n	80074b4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073ec:	f7fd fe48 	bl	8005080 <HAL_GetTick>
 80073f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073f4:	e00b      	b.n	800740e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073f6:	f7fd fe43 	bl	8005080 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	f241 3288 	movw	r2, #5000	; 0x1388
 8007406:	4293      	cmp	r3, r2
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e225      	b.n	800785a <HAL_RCC_OscConfig+0xe02>
 800740e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007412:	2202      	movs	r2, #2
 8007414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007416:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	fa93 f2a3 	rbit	r2, r3
 8007420:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800742a:	2202      	movs	r2, #2
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	fa93 f2a3 	rbit	r2, r3
 8007438:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800743c:	601a      	str	r2, [r3, #0]
  return result;
 800743e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007442:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007444:	fab3 f383 	clz	r3, r3
 8007448:	b2db      	uxtb	r3, r3
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	b2db      	uxtb	r3, r3
 800744e:	f043 0302 	orr.w	r3, r3, #2
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d102      	bne.n	800745e <HAL_RCC_OscConfig+0xa06>
 8007458:	4b90      	ldr	r3, [pc, #576]	; (800769c <HAL_RCC_OscConfig+0xc44>)
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	e00d      	b.n	800747a <HAL_RCC_OscConfig+0xa22>
 800745e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007462:	2202      	movs	r2, #2
 8007464:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007466:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	fa93 f2a3 	rbit	r2, r3
 8007470:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	4b89      	ldr	r3, [pc, #548]	; (800769c <HAL_RCC_OscConfig+0xc44>)
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800747e:	2102      	movs	r1, #2
 8007480:	6011      	str	r1, [r2, #0]
 8007482:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007486:	6812      	ldr	r2, [r2, #0]
 8007488:	fa92 f1a2 	rbit	r1, r2
 800748c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007490:	6011      	str	r1, [r2, #0]
  return result;
 8007492:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007496:	6812      	ldr	r2, [r2, #0]
 8007498:	fab2 f282 	clz	r2, r2
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	f002 021f 	and.w	r2, r2, #31
 80074a8:	2101      	movs	r1, #1
 80074aa:	fa01 f202 	lsl.w	r2, r1, r2
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1a0      	bne.n	80073f6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80074b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d105      	bne.n	80074c8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074bc:	4b77      	ldr	r3, [pc, #476]	; (800769c <HAL_RCC_OscConfig+0xc44>)
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	4a76      	ldr	r2, [pc, #472]	; (800769c <HAL_RCC_OscConfig+0xc44>)
 80074c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074c8:	1d3b      	adds	r3, r7, #4
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 81c2 	beq.w	8007858 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074d4:	4b71      	ldr	r3, [pc, #452]	; (800769c <HAL_RCC_OscConfig+0xc44>)
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f003 030c 	and.w	r3, r3, #12
 80074dc:	2b08      	cmp	r3, #8
 80074de:	f000 819c 	beq.w	800781a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074e2:	1d3b      	adds	r3, r7, #4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	f040 8114 	bne.w	8007716 <HAL_RCC_OscConfig+0xcbe>
 80074ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80074f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	fa93 f2a3 	rbit	r2, r3
 8007502:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007506:	601a      	str	r2, [r3, #0]
  return result;
 8007508:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800750c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800750e:	fab3 f383 	clz	r3, r3
 8007512:	b2db      	uxtb	r3, r3
 8007514:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007518:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	461a      	mov	r2, r3
 8007520:	2300      	movs	r3, #0
 8007522:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007524:	f7fd fdac 	bl	8005080 <HAL_GetTick>
 8007528:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800752c:	e009      	b.n	8007542 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800752e:	f7fd fda7 	bl	8005080 <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e18b      	b.n	800785a <HAL_RCC_OscConfig+0xe02>
 8007542:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007546:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800754a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800754c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	fa93 f2a3 	rbit	r2, r3
 8007556:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800755a:	601a      	str	r2, [r3, #0]
  return result;
 800755c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007560:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007562:	fab3 f383 	clz	r3, r3
 8007566:	b2db      	uxtb	r3, r3
 8007568:	095b      	lsrs	r3, r3, #5
 800756a:	b2db      	uxtb	r3, r3
 800756c:	f043 0301 	orr.w	r3, r3, #1
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b01      	cmp	r3, #1
 8007574:	d102      	bne.n	800757c <HAL_RCC_OscConfig+0xb24>
 8007576:	4b49      	ldr	r3, [pc, #292]	; (800769c <HAL_RCC_OscConfig+0xc44>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	e01b      	b.n	80075b4 <HAL_RCC_OscConfig+0xb5c>
 800757c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007586:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	fa93 f2a3 	rbit	r2, r3
 8007590:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800759a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	fa93 f2a3 	rbit	r2, r3
 80075aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	4b3a      	ldr	r3, [pc, #232]	; (800769c <HAL_RCC_OscConfig+0xc44>)
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80075b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80075bc:	6011      	str	r1, [r2, #0]
 80075be:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80075c2:	6812      	ldr	r2, [r2, #0]
 80075c4:	fa92 f1a2 	rbit	r1, r2
 80075c8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80075cc:	6011      	str	r1, [r2, #0]
  return result;
 80075ce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	fab2 f282 	clz	r2, r2
 80075d8:	b2d2      	uxtb	r2, r2
 80075da:	f042 0220 	orr.w	r2, r2, #32
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	f002 021f 	and.w	r2, r2, #31
 80075e4:	2101      	movs	r1, #1
 80075e6:	fa01 f202 	lsl.w	r2, r1, r2
 80075ea:	4013      	ands	r3, r2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d19e      	bne.n	800752e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075f0:	4b2a      	ldr	r3, [pc, #168]	; (800769c <HAL_RCC_OscConfig+0xc44>)
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80075f8:	1d3b      	adds	r3, r7, #4
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80075fe:	1d3b      	adds	r3, r7, #4
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	430b      	orrs	r3, r1
 8007606:	4925      	ldr	r1, [pc, #148]	; (800769c <HAL_RCC_OscConfig+0xc44>)
 8007608:	4313      	orrs	r3, r2
 800760a:	604b      	str	r3, [r1, #4]
 800760c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007616:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	fa93 f2a3 	rbit	r2, r3
 8007620:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007624:	601a      	str	r2, [r3, #0]
  return result;
 8007626:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800762a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800762c:	fab3 f383 	clz	r3, r3
 8007630:	b2db      	uxtb	r3, r3
 8007632:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007636:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	461a      	mov	r2, r3
 800763e:	2301      	movs	r3, #1
 8007640:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007642:	f7fd fd1d 	bl	8005080 <HAL_GetTick>
 8007646:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800764a:	e009      	b.n	8007660 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800764c:	f7fd fd18 	bl	8005080 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	2b02      	cmp	r3, #2
 800765a:	d901      	bls.n	8007660 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e0fc      	b.n	800785a <HAL_RCC_OscConfig+0xe02>
 8007660:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007664:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800766a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	fa93 f2a3 	rbit	r2, r3
 8007674:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007678:	601a      	str	r2, [r3, #0]
  return result;
 800767a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800767e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007680:	fab3 f383 	clz	r3, r3
 8007684:	b2db      	uxtb	r3, r3
 8007686:	095b      	lsrs	r3, r3, #5
 8007688:	b2db      	uxtb	r3, r3
 800768a:	f043 0301 	orr.w	r3, r3, #1
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	d105      	bne.n	80076a0 <HAL_RCC_OscConfig+0xc48>
 8007694:	4b01      	ldr	r3, [pc, #4]	; (800769c <HAL_RCC_OscConfig+0xc44>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	e01e      	b.n	80076d8 <HAL_RCC_OscConfig+0xc80>
 800769a:	bf00      	nop
 800769c:	40021000 	.word	0x40021000
 80076a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	fa93 f2a3 	rbit	r2, r3
 80076b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	fa93 f2a3 	rbit	r2, r3
 80076ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	4b63      	ldr	r3, [pc, #396]	; (8007864 <HAL_RCC_OscConfig+0xe0c>)
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80076dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80076e0:	6011      	str	r1, [r2, #0]
 80076e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80076e6:	6812      	ldr	r2, [r2, #0]
 80076e8:	fa92 f1a2 	rbit	r1, r2
 80076ec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80076f0:	6011      	str	r1, [r2, #0]
  return result;
 80076f2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80076f6:	6812      	ldr	r2, [r2, #0]
 80076f8:	fab2 f282 	clz	r2, r2
 80076fc:	b2d2      	uxtb	r2, r2
 80076fe:	f042 0220 	orr.w	r2, r2, #32
 8007702:	b2d2      	uxtb	r2, r2
 8007704:	f002 021f 	and.w	r2, r2, #31
 8007708:	2101      	movs	r1, #1
 800770a:	fa01 f202 	lsl.w	r2, r1, r2
 800770e:	4013      	ands	r3, r2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d09b      	beq.n	800764c <HAL_RCC_OscConfig+0xbf4>
 8007714:	e0a0      	b.n	8007858 <HAL_RCC_OscConfig+0xe00>
 8007716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800771a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800771e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007720:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	fa93 f2a3 	rbit	r2, r3
 800772a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800772e:	601a      	str	r2, [r3, #0]
  return result;
 8007730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007734:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007736:	fab3 f383 	clz	r3, r3
 800773a:	b2db      	uxtb	r3, r3
 800773c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007740:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	461a      	mov	r2, r3
 8007748:	2300      	movs	r3, #0
 800774a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800774c:	f7fd fc98 	bl	8005080 <HAL_GetTick>
 8007750:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007754:	e009      	b.n	800776a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007756:	f7fd fc93 	bl	8005080 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e077      	b.n	800785a <HAL_RCC_OscConfig+0xe02>
 800776a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800776e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007774:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	fa93 f2a3 	rbit	r2, r3
 800777e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007782:	601a      	str	r2, [r3, #0]
  return result;
 8007784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007788:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800778a:	fab3 f383 	clz	r3, r3
 800778e:	b2db      	uxtb	r3, r3
 8007790:	095b      	lsrs	r3, r3, #5
 8007792:	b2db      	uxtb	r3, r3
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b01      	cmp	r3, #1
 800779c:	d102      	bne.n	80077a4 <HAL_RCC_OscConfig+0xd4c>
 800779e:	4b31      	ldr	r3, [pc, #196]	; (8007864 <HAL_RCC_OscConfig+0xe0c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	e01b      	b.n	80077dc <HAL_RCC_OscConfig+0xd84>
 80077a4:	f107 0320 	add.w	r3, r7, #32
 80077a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80077ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ae:	f107 0320 	add.w	r3, r7, #32
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	fa93 f2a3 	rbit	r2, r3
 80077b8:	f107 031c 	add.w	r3, r7, #28
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	f107 0318 	add.w	r3, r7, #24
 80077c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	f107 0318 	add.w	r3, r7, #24
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	fa93 f2a3 	rbit	r2, r3
 80077d2:	f107 0314 	add.w	r3, r7, #20
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	4b22      	ldr	r3, [pc, #136]	; (8007864 <HAL_RCC_OscConfig+0xe0c>)
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	f107 0210 	add.w	r2, r7, #16
 80077e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80077e4:	6011      	str	r1, [r2, #0]
 80077e6:	f107 0210 	add.w	r2, r7, #16
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	fa92 f1a2 	rbit	r1, r2
 80077f0:	f107 020c 	add.w	r2, r7, #12
 80077f4:	6011      	str	r1, [r2, #0]
  return result;
 80077f6:	f107 020c 	add.w	r2, r7, #12
 80077fa:	6812      	ldr	r2, [r2, #0]
 80077fc:	fab2 f282 	clz	r2, r2
 8007800:	b2d2      	uxtb	r2, r2
 8007802:	f042 0220 	orr.w	r2, r2, #32
 8007806:	b2d2      	uxtb	r2, r2
 8007808:	f002 021f 	and.w	r2, r2, #31
 800780c:	2101      	movs	r1, #1
 800780e:	fa01 f202 	lsl.w	r2, r1, r2
 8007812:	4013      	ands	r3, r2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d19e      	bne.n	8007756 <HAL_RCC_OscConfig+0xcfe>
 8007818:	e01e      	b.n	8007858 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800781a:	1d3b      	adds	r3, r7, #4
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e018      	b.n	800785a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007828:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <HAL_RCC_OscConfig+0xe0c>)
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007830:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007834:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007838:	1d3b      	adds	r3, r7, #4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	429a      	cmp	r2, r3
 8007840:	d108      	bne.n	8007854 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007842:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007846:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800784a:	1d3b      	adds	r3, r7, #4
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007850:	429a      	cmp	r2, r3
 8007852:	d001      	beq.n	8007858 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	40021000 	.word	0x40021000

08007868 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b09e      	sub	sp, #120	; 0x78
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007872:	2300      	movs	r3, #0
 8007874:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e162      	b.n	8007b46 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007880:	4b90      	ldr	r3, [pc, #576]	; (8007ac4 <HAL_RCC_ClockConfig+0x25c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0307 	and.w	r3, r3, #7
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	429a      	cmp	r2, r3
 800788c:	d910      	bls.n	80078b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800788e:	4b8d      	ldr	r3, [pc, #564]	; (8007ac4 <HAL_RCC_ClockConfig+0x25c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f023 0207 	bic.w	r2, r3, #7
 8007896:	498b      	ldr	r1, [pc, #556]	; (8007ac4 <HAL_RCC_ClockConfig+0x25c>)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	4313      	orrs	r3, r2
 800789c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800789e:	4b89      	ldr	r3, [pc, #548]	; (8007ac4 <HAL_RCC_ClockConfig+0x25c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0307 	and.w	r3, r3, #7
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d001      	beq.n	80078b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e14a      	b.n	8007b46 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d008      	beq.n	80078ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078bc:	4b82      	ldr	r3, [pc, #520]	; (8007ac8 <HAL_RCC_ClockConfig+0x260>)
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	497f      	ldr	r1, [pc, #508]	; (8007ac8 <HAL_RCC_ClockConfig+0x260>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 80dc 	beq.w	8007a94 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d13c      	bne.n	800795e <HAL_RCC_ClockConfig+0xf6>
 80078e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078ec:	fa93 f3a3 	rbit	r3, r3
 80078f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80078f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078f4:	fab3 f383 	clz	r3, r3
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	095b      	lsrs	r3, r3, #5
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f043 0301 	orr.w	r3, r3, #1
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b01      	cmp	r3, #1
 8007906:	d102      	bne.n	800790e <HAL_RCC_ClockConfig+0xa6>
 8007908:	4b6f      	ldr	r3, [pc, #444]	; (8007ac8 <HAL_RCC_ClockConfig+0x260>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	e00f      	b.n	800792e <HAL_RCC_ClockConfig+0xc6>
 800790e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007912:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007916:	fa93 f3a3 	rbit	r3, r3
 800791a:	667b      	str	r3, [r7, #100]	; 0x64
 800791c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007920:	663b      	str	r3, [r7, #96]	; 0x60
 8007922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007924:	fa93 f3a3 	rbit	r3, r3
 8007928:	65fb      	str	r3, [r7, #92]	; 0x5c
 800792a:	4b67      	ldr	r3, [pc, #412]	; (8007ac8 <HAL_RCC_ClockConfig+0x260>)
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007932:	65ba      	str	r2, [r7, #88]	; 0x58
 8007934:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007936:	fa92 f2a2 	rbit	r2, r2
 800793a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800793c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800793e:	fab2 f282 	clz	r2, r2
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	f042 0220 	orr.w	r2, r2, #32
 8007948:	b2d2      	uxtb	r2, r2
 800794a:	f002 021f 	and.w	r2, r2, #31
 800794e:	2101      	movs	r1, #1
 8007950:	fa01 f202 	lsl.w	r2, r1, r2
 8007954:	4013      	ands	r3, r2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d17b      	bne.n	8007a52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e0f3      	b.n	8007b46 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	2b02      	cmp	r3, #2
 8007964:	d13c      	bne.n	80079e0 <HAL_RCC_ClockConfig+0x178>
 8007966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800796a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800796c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800796e:	fa93 f3a3 	rbit	r3, r3
 8007972:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007976:	fab3 f383 	clz	r3, r3
 800797a:	b2db      	uxtb	r3, r3
 800797c:	095b      	lsrs	r3, r3, #5
 800797e:	b2db      	uxtb	r3, r3
 8007980:	f043 0301 	orr.w	r3, r3, #1
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b01      	cmp	r3, #1
 8007988:	d102      	bne.n	8007990 <HAL_RCC_ClockConfig+0x128>
 800798a:	4b4f      	ldr	r3, [pc, #316]	; (8007ac8 <HAL_RCC_ClockConfig+0x260>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	e00f      	b.n	80079b0 <HAL_RCC_ClockConfig+0x148>
 8007990:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007994:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007998:	fa93 f3a3 	rbit	r3, r3
 800799c:	647b      	str	r3, [r7, #68]	; 0x44
 800799e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079a2:	643b      	str	r3, [r7, #64]	; 0x40
 80079a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079a6:	fa93 f3a3 	rbit	r3, r3
 80079aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079ac:	4b46      	ldr	r3, [pc, #280]	; (8007ac8 <HAL_RCC_ClockConfig+0x260>)
 80079ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80079b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80079b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b8:	fa92 f2a2 	rbit	r2, r2
 80079bc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80079be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079c0:	fab2 f282 	clz	r2, r2
 80079c4:	b2d2      	uxtb	r2, r2
 80079c6:	f042 0220 	orr.w	r2, r2, #32
 80079ca:	b2d2      	uxtb	r2, r2
 80079cc:	f002 021f 	and.w	r2, r2, #31
 80079d0:	2101      	movs	r1, #1
 80079d2:	fa01 f202 	lsl.w	r2, r1, r2
 80079d6:	4013      	ands	r3, r2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d13a      	bne.n	8007a52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e0b2      	b.n	8007b46 <HAL_RCC_ClockConfig+0x2de>
 80079e0:	2302      	movs	r3, #2
 80079e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	fa93 f3a3 	rbit	r3, r3
 80079ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80079ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079ee:	fab3 f383 	clz	r3, r3
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	095b      	lsrs	r3, r3, #5
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d102      	bne.n	8007a08 <HAL_RCC_ClockConfig+0x1a0>
 8007a02:	4b31      	ldr	r3, [pc, #196]	; (8007ac8 <HAL_RCC_ClockConfig+0x260>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	e00d      	b.n	8007a24 <HAL_RCC_ClockConfig+0x1bc>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	fa93 f3a3 	rbit	r3, r3
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
 8007a14:	2302      	movs	r3, #2
 8007a16:	623b      	str	r3, [r7, #32]
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	fa93 f3a3 	rbit	r3, r3
 8007a1e:	61fb      	str	r3, [r7, #28]
 8007a20:	4b29      	ldr	r3, [pc, #164]	; (8007ac8 <HAL_RCC_ClockConfig+0x260>)
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	2202      	movs	r2, #2
 8007a26:	61ba      	str	r2, [r7, #24]
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	fa92 f2a2 	rbit	r2, r2
 8007a2e:	617a      	str	r2, [r7, #20]
  return result;
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	fab2 f282 	clz	r2, r2
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	f042 0220 	orr.w	r2, r2, #32
 8007a3c:	b2d2      	uxtb	r2, r2
 8007a3e:	f002 021f 	and.w	r2, r2, #31
 8007a42:	2101      	movs	r1, #1
 8007a44:	fa01 f202 	lsl.w	r2, r1, r2
 8007a48:	4013      	ands	r3, r2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e079      	b.n	8007b46 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a52:	4b1d      	ldr	r3, [pc, #116]	; (8007ac8 <HAL_RCC_ClockConfig+0x260>)
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f023 0203 	bic.w	r2, r3, #3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	491a      	ldr	r1, [pc, #104]	; (8007ac8 <HAL_RCC_ClockConfig+0x260>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a64:	f7fd fb0c 	bl	8005080 <HAL_GetTick>
 8007a68:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a6a:	e00a      	b.n	8007a82 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a6c:	f7fd fb08 	bl	8005080 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e061      	b.n	8007b46 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a82:	4b11      	ldr	r3, [pc, #68]	; (8007ac8 <HAL_RCC_ClockConfig+0x260>)
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f003 020c 	and.w	r2, r3, #12
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d1eb      	bne.n	8007a6c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a94:	4b0b      	ldr	r3, [pc, #44]	; (8007ac4 <HAL_RCC_ClockConfig+0x25c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0307 	and.w	r3, r3, #7
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d214      	bcs.n	8007acc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aa2:	4b08      	ldr	r3, [pc, #32]	; (8007ac4 <HAL_RCC_ClockConfig+0x25c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f023 0207 	bic.w	r2, r3, #7
 8007aaa:	4906      	ldr	r1, [pc, #24]	; (8007ac4 <HAL_RCC_ClockConfig+0x25c>)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ab2:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <HAL_RCC_ClockConfig+0x25c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d005      	beq.n	8007acc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e040      	b.n	8007b46 <HAL_RCC_ClockConfig+0x2de>
 8007ac4:	40022000 	.word	0x40022000
 8007ac8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d008      	beq.n	8007aea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ad8:	4b1d      	ldr	r3, [pc, #116]	; (8007b50 <HAL_RCC_ClockConfig+0x2e8>)
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	491a      	ldr	r1, [pc, #104]	; (8007b50 <HAL_RCC_ClockConfig+0x2e8>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0308 	and.w	r3, r3, #8
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d009      	beq.n	8007b0a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007af6:	4b16      	ldr	r3, [pc, #88]	; (8007b50 <HAL_RCC_ClockConfig+0x2e8>)
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	4912      	ldr	r1, [pc, #72]	; (8007b50 <HAL_RCC_ClockConfig+0x2e8>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007b0a:	f000 f829 	bl	8007b60 <HAL_RCC_GetSysClockFreq>
 8007b0e:	4601      	mov	r1, r0
 8007b10:	4b0f      	ldr	r3, [pc, #60]	; (8007b50 <HAL_RCC_ClockConfig+0x2e8>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b18:	22f0      	movs	r2, #240	; 0xf0
 8007b1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	fa92 f2a2 	rbit	r2, r2
 8007b22:	60fa      	str	r2, [r7, #12]
  return result;
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	fab2 f282 	clz	r2, r2
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	40d3      	lsrs	r3, r2
 8007b2e:	4a09      	ldr	r2, [pc, #36]	; (8007b54 <HAL_RCC_ClockConfig+0x2ec>)
 8007b30:	5cd3      	ldrb	r3, [r2, r3]
 8007b32:	fa21 f303 	lsr.w	r3, r1, r3
 8007b36:	4a08      	ldr	r2, [pc, #32]	; (8007b58 <HAL_RCC_ClockConfig+0x2f0>)
 8007b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007b3a:	4b08      	ldr	r3, [pc, #32]	; (8007b5c <HAL_RCC_ClockConfig+0x2f4>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fd fa5a 	bl	8004ff8 <HAL_InitTick>
  
  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3778      	adds	r7, #120	; 0x78
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	40021000 	.word	0x40021000
 8007b54:	0800ed9c 	.word	0x0800ed9c
 8007b58:	20000690 	.word	0x20000690
 8007b5c:	20000694 	.word	0x20000694

08007b60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b08b      	sub	sp, #44	; 0x2c
 8007b64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	61fb      	str	r3, [r7, #28]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	61bb      	str	r3, [r7, #24]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
 8007b72:	2300      	movs	r3, #0
 8007b74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007b7a:	4b29      	ldr	r3, [pc, #164]	; (8007c20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	f003 030c 	and.w	r3, r3, #12
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d002      	beq.n	8007b90 <HAL_RCC_GetSysClockFreq+0x30>
 8007b8a:	2b08      	cmp	r3, #8
 8007b8c:	d003      	beq.n	8007b96 <HAL_RCC_GetSysClockFreq+0x36>
 8007b8e:	e03c      	b.n	8007c0a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007b90:	4b24      	ldr	r3, [pc, #144]	; (8007c24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007b92:	623b      	str	r3, [r7, #32]
      break;
 8007b94:	e03c      	b.n	8007c10 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007b9c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007ba0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	fa92 f2a2 	rbit	r2, r2
 8007ba8:	607a      	str	r2, [r7, #4]
  return result;
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	fab2 f282 	clz	r2, r2
 8007bb0:	b2d2      	uxtb	r2, r2
 8007bb2:	40d3      	lsrs	r3, r2
 8007bb4:	4a1c      	ldr	r2, [pc, #112]	; (8007c28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007bb6:	5cd3      	ldrb	r3, [r2, r3]
 8007bb8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007bba:	4b19      	ldr	r3, [pc, #100]	; (8007c20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbe:	f003 030f 	and.w	r3, r3, #15
 8007bc2:	220f      	movs	r2, #15
 8007bc4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	fa92 f2a2 	rbit	r2, r2
 8007bcc:	60fa      	str	r2, [r7, #12]
  return result;
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	fab2 f282 	clz	r2, r2
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	40d3      	lsrs	r3, r2
 8007bd8:	4a14      	ldr	r2, [pc, #80]	; (8007c2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8007bda:	5cd3      	ldrb	r3, [r2, r3]
 8007bdc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d008      	beq.n	8007bfa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007be8:	4a0e      	ldr	r2, [pc, #56]	; (8007c24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	fb02 f303 	mul.w	r3, r2, r3
 8007bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf8:	e004      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	4a0c      	ldr	r2, [pc, #48]	; (8007c30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007bfe:	fb02 f303 	mul.w	r3, r2, r3
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	623b      	str	r3, [r7, #32]
      break;
 8007c08:	e002      	b.n	8007c10 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007c0a:	4b06      	ldr	r3, [pc, #24]	; (8007c24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007c0c:	623b      	str	r3, [r7, #32]
      break;
 8007c0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c10:	6a3b      	ldr	r3, [r7, #32]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	372c      	adds	r7, #44	; 0x2c
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	40021000 	.word	0x40021000
 8007c24:	007a1200 	.word	0x007a1200
 8007c28:	0800edb4 	.word	0x0800edb4
 8007c2c:	0800edc4 	.word	0x0800edc4
 8007c30:	003d0900 	.word	0x003d0900

08007c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c34:	b480      	push	{r7}
 8007c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c38:	4b03      	ldr	r3, [pc, #12]	; (8007c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	20000690 	.word	0x20000690

08007c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007c52:	f7ff ffef 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8007c56:	4601      	mov	r1, r0
 8007c58:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c60:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007c64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	fa92 f2a2 	rbit	r2, r2
 8007c6c:	603a      	str	r2, [r7, #0]
  return result;
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	fab2 f282 	clz	r2, r2
 8007c74:	b2d2      	uxtb	r2, r2
 8007c76:	40d3      	lsrs	r3, r2
 8007c78:	4a04      	ldr	r2, [pc, #16]	; (8007c8c <HAL_RCC_GetPCLK1Freq+0x40>)
 8007c7a:	5cd3      	ldrb	r3, [r2, r3]
 8007c7c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	40021000 	.word	0x40021000
 8007c8c:	0800edac 	.word	0x0800edac

08007c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007c96:	f7ff ffcd 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8007c9a:	4601      	mov	r1, r0
 8007c9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007ca4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007ca8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	fa92 f2a2 	rbit	r2, r2
 8007cb0:	603a      	str	r2, [r7, #0]
  return result;
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	fab2 f282 	clz	r2, r2
 8007cb8:	b2d2      	uxtb	r2, r2
 8007cba:	40d3      	lsrs	r3, r2
 8007cbc:	4a04      	ldr	r2, [pc, #16]	; (8007cd0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007cbe:	5cd3      	ldrb	r3, [r2, r3]
 8007cc0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	40021000 	.word	0x40021000
 8007cd0:	0800edac 	.word	0x0800edac

08007cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b092      	sub	sp, #72	; 0x48
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 80d7 	beq.w	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cf8:	4b4e      	ldr	r3, [pc, #312]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10e      	bne.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d04:	4b4b      	ldr	r3, [pc, #300]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	4a4a      	ldr	r2, [pc, #296]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d0e:	61d3      	str	r3, [r2, #28]
 8007d10:	4b48      	ldr	r3, [pc, #288]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d18:	60bb      	str	r3, [r7, #8]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d22:	4b45      	ldr	r3, [pc, #276]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d118      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d2e:	4b42      	ldr	r3, [pc, #264]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a41      	ldr	r2, [pc, #260]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d3a:	f7fd f9a1 	bl	8005080 <HAL_GetTick>
 8007d3e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d40:	e008      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d42:	f7fd f99d 	bl	8005080 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	2b64      	cmp	r3, #100	; 0x64
 8007d4e:	d901      	bls.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e169      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d54:	4b38      	ldr	r3, [pc, #224]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d0f0      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d60:	4b34      	ldr	r3, [pc, #208]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d68:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 8084 	beq.w	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d07c      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d80:	4b2c      	ldr	r3, [pc, #176]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d92:	fa93 f3a3 	rbit	r3, r3
 8007d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d9a:	fab3 f383 	clz	r3, r3
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	4b26      	ldr	r3, [pc, #152]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	461a      	mov	r2, r3
 8007daa:	2301      	movs	r3, #1
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007db2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db6:	fa93 f3a3 	rbit	r3, r3
 8007dba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007dbe:	fab3 f383 	clz	r3, r3
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	4b1d      	ldr	r3, [pc, #116]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	461a      	mov	r2, r3
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007dd2:	4a18      	ldr	r2, [pc, #96]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d04b      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007de2:	f7fd f94d 	bl	8005080 <HAL_GetTick>
 8007de6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007de8:	e00a      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dea:	f7fd f949 	bl	8005080 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d901      	bls.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e113      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007e00:	2302      	movs	r3, #2
 8007e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e06:	fa93 f3a3 	rbit	r3, r3
 8007e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	623b      	str	r3, [r7, #32]
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	fa93 f3a3 	rbit	r3, r3
 8007e16:	61fb      	str	r3, [r7, #28]
  return result;
 8007e18:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e1a:	fab3 f383 	clz	r3, r3
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f043 0302 	orr.w	r3, r3, #2
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d108      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007e2e:	4b01      	ldr	r3, [pc, #4]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	e00d      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007e34:	40021000 	.word	0x40021000
 8007e38:	40007000 	.word	0x40007000
 8007e3c:	10908100 	.word	0x10908100
 8007e40:	2302      	movs	r3, #2
 8007e42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	fa93 f3a3 	rbit	r3, r3
 8007e4a:	617b      	str	r3, [r7, #20]
 8007e4c:	4b78      	ldr	r3, [pc, #480]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	2202      	movs	r2, #2
 8007e52:	613a      	str	r2, [r7, #16]
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	fa92 f2a2 	rbit	r2, r2
 8007e5a:	60fa      	str	r2, [r7, #12]
  return result;
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	fab2 f282 	clz	r2, r2
 8007e62:	b2d2      	uxtb	r2, r2
 8007e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e68:	b2d2      	uxtb	r2, r2
 8007e6a:	f002 021f 	and.w	r2, r2, #31
 8007e6e:	2101      	movs	r1, #1
 8007e70:	fa01 f202 	lsl.w	r2, r1, r2
 8007e74:	4013      	ands	r3, r2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0b7      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007e7a:	4b6d      	ldr	r3, [pc, #436]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	496a      	ldr	r1, [pc, #424]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007e8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d105      	bne.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e94:	4b66      	ldr	r3, [pc, #408]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	4a65      	ldr	r2, [pc, #404]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d008      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007eac:	4b60      	ldr	r3, [pc, #384]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb0:	f023 0203 	bic.w	r2, r3, #3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	495d      	ldr	r1, [pc, #372]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d008      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007eca:	4b59      	ldr	r3, [pc, #356]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ece:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	4956      	ldr	r1, [pc, #344]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d008      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ee8:	4b51      	ldr	r3, [pc, #324]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	494e      	ldr	r1, [pc, #312]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d008      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f06:	4b4a      	ldr	r3, [pc, #296]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0a:	f023 0210 	bic.w	r2, r3, #16
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	4947      	ldr	r1, [pc, #284]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d008      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007f24:	4b42      	ldr	r3, [pc, #264]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f30:	493f      	ldr	r1, [pc, #252]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d008      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f42:	4b3b      	ldr	r3, [pc, #236]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f46:	f023 0220 	bic.w	r2, r3, #32
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	4938      	ldr	r1, [pc, #224]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d008      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f60:	4b33      	ldr	r3, [pc, #204]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	4930      	ldr	r1, [pc, #192]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0310 	and.w	r3, r3, #16
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d008      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f7e:	4b2c      	ldr	r3, [pc, #176]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	4929      	ldr	r1, [pc, #164]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d008      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f9c:	4b24      	ldr	r3, [pc, #144]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	4921      	ldr	r1, [pc, #132]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d008      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007fba:	4b1d      	ldr	r3, [pc, #116]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	491a      	ldr	r1, [pc, #104]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d008      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007fd8:	4b15      	ldr	r3, [pc, #84]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fdc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe4:	4912      	ldr	r1, [pc, #72]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d008      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007ff6:	4b0e      	ldr	r3, [pc, #56]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	490b      	ldr	r1, [pc, #44]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008004:	4313      	orrs	r3, r2
 8008006:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d008      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008014:	4b06      	ldr	r3, [pc, #24]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008018:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008020:	4903      	ldr	r1, [pc, #12]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008022:	4313      	orrs	r3, r2
 8008024:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3748      	adds	r7, #72	; 0x48
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	40021000 	.word	0x40021000

08008034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e01d      	b.n	8008082 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d106      	bne.n	8008060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fb fc52 	bl	8003904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	3304      	adds	r3, #4
 8008070:	4619      	mov	r1, r3
 8008072:	4610      	mov	r0, r2
 8008074:	f000 fb0a 	bl	800868c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0201 	orr.w	r2, r2, #1
 80080a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <HAL_TIM_Base_Start_IT+0x50>)
 80080ac:	4013      	ands	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b06      	cmp	r3, #6
 80080b4:	d00b      	beq.n	80080ce <HAL_TIM_Base_Start_IT+0x42>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080bc:	d007      	beq.n	80080ce <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0201 	orr.w	r2, r2, #1
 80080cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	00010007 	.word	0x00010007

080080e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e01d      	b.n	800812e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d106      	bne.n	800810c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f815 	bl	8008136 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	3304      	adds	r3, #4
 800811c:	4619      	mov	r1, r3
 800811e:	4610      	mov	r0, r2
 8008120:	f000 fab4 	bl	800868c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800813e:	bf00      	nop
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b02      	cmp	r3, #2
 800815e:	d122      	bne.n	80081a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b02      	cmp	r3, #2
 800816c:	d11b      	bne.n	80081a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f06f 0202 	mvn.w	r2, #2
 8008176:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	f003 0303 	and.w	r3, r3, #3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fa5f 	bl	8008650 <HAL_TIM_IC_CaptureCallback>
 8008192:	e005      	b.n	80081a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fa51 	bl	800863c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fa62 	bl	8008664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	f003 0304 	and.w	r3, r3, #4
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d122      	bne.n	80081fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	f003 0304 	and.w	r3, r3, #4
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d11b      	bne.n	80081fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f06f 0204 	mvn.w	r2, #4
 80081ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2202      	movs	r2, #2
 80081d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fa35 	bl	8008650 <HAL_TIM_IC_CaptureCallback>
 80081e6:	e005      	b.n	80081f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fa27 	bl	800863c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fa38 	bl	8008664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b08      	cmp	r3, #8
 8008206:	d122      	bne.n	800824e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	f003 0308 	and.w	r3, r3, #8
 8008212:	2b08      	cmp	r3, #8
 8008214:	d11b      	bne.n	800824e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f06f 0208 	mvn.w	r2, #8
 800821e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2204      	movs	r2, #4
 8008224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69db      	ldr	r3, [r3, #28]
 800822c:	f003 0303 	and.w	r3, r3, #3
 8008230:	2b00      	cmp	r3, #0
 8008232:	d003      	beq.n	800823c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fa0b 	bl	8008650 <HAL_TIM_IC_CaptureCallback>
 800823a:	e005      	b.n	8008248 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f9fd 	bl	800863c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fa0e 	bl	8008664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	f003 0310 	and.w	r3, r3, #16
 8008258:	2b10      	cmp	r3, #16
 800825a:	d122      	bne.n	80082a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	f003 0310 	and.w	r3, r3, #16
 8008266:	2b10      	cmp	r3, #16
 8008268:	d11b      	bne.n	80082a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f06f 0210 	mvn.w	r2, #16
 8008272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2208      	movs	r2, #8
 8008278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f9e1 	bl	8008650 <HAL_TIM_IC_CaptureCallback>
 800828e:	e005      	b.n	800829c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f9d3 	bl	800863c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f9e4 	bl	8008664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d10e      	bne.n	80082ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d107      	bne.n	80082ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f06f 0201 	mvn.w	r2, #1
 80082c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7f8 f803 	bl	80002d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d8:	2b80      	cmp	r3, #128	; 0x80
 80082da:	d10e      	bne.n	80082fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e6:	2b80      	cmp	r3, #128	; 0x80
 80082e8:	d107      	bne.n	80082fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 ff3f 	bl	8009178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008308:	d10e      	bne.n	8008328 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008314:	2b80      	cmp	r3, #128	; 0x80
 8008316:	d107      	bne.n	8008328 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 ff32 	bl	800918c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008332:	2b40      	cmp	r3, #64	; 0x40
 8008334:	d10e      	bne.n	8008354 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008340:	2b40      	cmp	r3, #64	; 0x40
 8008342:	d107      	bne.n	8008354 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800834c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f992 	bl	8008678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b20      	cmp	r3, #32
 8008360:	d10e      	bne.n	8008380 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f003 0320 	and.w	r3, r3, #32
 800836c:	2b20      	cmp	r3, #32
 800836e:	d107      	bne.n	8008380 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0220 	mvn.w	r2, #32
 8008378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fef2 	bl	8009164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800839a:	2b01      	cmp	r3, #1
 800839c:	d101      	bne.n	80083a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800839e:	2302      	movs	r3, #2
 80083a0:	e105      	b.n	80085ae <HAL_TIM_PWM_ConfigChannel+0x226>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2202      	movs	r2, #2
 80083ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b14      	cmp	r3, #20
 80083b6:	f200 80f0 	bhi.w	800859a <HAL_TIM_PWM_ConfigChannel+0x212>
 80083ba:	a201      	add	r2, pc, #4	; (adr r2, 80083c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80083bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c0:	08008415 	.word	0x08008415
 80083c4:	0800859b 	.word	0x0800859b
 80083c8:	0800859b 	.word	0x0800859b
 80083cc:	0800859b 	.word	0x0800859b
 80083d0:	08008455 	.word	0x08008455
 80083d4:	0800859b 	.word	0x0800859b
 80083d8:	0800859b 	.word	0x0800859b
 80083dc:	0800859b 	.word	0x0800859b
 80083e0:	08008497 	.word	0x08008497
 80083e4:	0800859b 	.word	0x0800859b
 80083e8:	0800859b 	.word	0x0800859b
 80083ec:	0800859b 	.word	0x0800859b
 80083f0:	080084d7 	.word	0x080084d7
 80083f4:	0800859b 	.word	0x0800859b
 80083f8:	0800859b 	.word	0x0800859b
 80083fc:	0800859b 	.word	0x0800859b
 8008400:	08008519 	.word	0x08008519
 8008404:	0800859b 	.word	0x0800859b
 8008408:	0800859b 	.word	0x0800859b
 800840c:	0800859b 	.word	0x0800859b
 8008410:	08008559 	.word	0x08008559
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68b9      	ldr	r1, [r7, #8]
 800841a:	4618      	mov	r0, r3
 800841c:	f000 f9c6 	bl	80087ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	699a      	ldr	r2, [r3, #24]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0208 	orr.w	r2, r2, #8
 800842e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	699a      	ldr	r2, [r3, #24]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0204 	bic.w	r2, r2, #4
 800843e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	6999      	ldr	r1, [r3, #24]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	691a      	ldr	r2, [r3, #16]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	619a      	str	r2, [r3, #24]
      break;
 8008452:	e0a3      	b.n	800859c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68b9      	ldr	r1, [r7, #8]
 800845a:	4618      	mov	r0, r3
 800845c:	f000 fa36 	bl	80088cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	699a      	ldr	r2, [r3, #24]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800846e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	699a      	ldr	r2, [r3, #24]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800847e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6999      	ldr	r1, [r3, #24]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	021a      	lsls	r2, r3, #8
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	619a      	str	r2, [r3, #24]
      break;
 8008494:	e082      	b.n	800859c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68b9      	ldr	r1, [r7, #8]
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fa9f 	bl	80089e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	69da      	ldr	r2, [r3, #28]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f042 0208 	orr.w	r2, r2, #8
 80084b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	69da      	ldr	r2, [r3, #28]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0204 	bic.w	r2, r2, #4
 80084c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69d9      	ldr	r1, [r3, #28]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	691a      	ldr	r2, [r3, #16]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	61da      	str	r2, [r3, #28]
      break;
 80084d4:	e062      	b.n	800859c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 fb07 	bl	8008af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	69da      	ldr	r2, [r3, #28]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	69da      	ldr	r2, [r3, #28]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69d9      	ldr	r1, [r3, #28]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	021a      	lsls	r2, r3, #8
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	61da      	str	r2, [r3, #28]
      break;
 8008516:	e041      	b.n	800859c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 fb50 	bl	8008bc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f042 0208 	orr.w	r2, r2, #8
 8008532:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f022 0204 	bic.w	r2, r2, #4
 8008542:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	691a      	ldr	r2, [r3, #16]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008556:	e021      	b.n	800859c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68b9      	ldr	r1, [r7, #8]
 800855e:	4618      	mov	r0, r3
 8008560:	f000 fb94 	bl	8008c8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008572:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008582:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	021a      	lsls	r2, r3, #8
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008598:	e000      	b.n	800859c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800859a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop

080085b8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d101      	bne.n	80085d0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80085cc:	2302      	movs	r3, #2
 80085ce:	e031      	b.n	8008634 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2202      	movs	r2, #2
 80085dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fbb8 	bl	8008d58 <TIM_SlaveTimer_SetConfig>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d009      	beq.n	8008602 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e018      	b.n	8008634 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68da      	ldr	r2, [r3, #12]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008610:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008620:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a3c      	ldr	r2, [pc, #240]	; (8008790 <TIM_Base_SetConfig+0x104>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00f      	beq.n	80086c4 <TIM_Base_SetConfig+0x38>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086aa:	d00b      	beq.n	80086c4 <TIM_Base_SetConfig+0x38>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a39      	ldr	r2, [pc, #228]	; (8008794 <TIM_Base_SetConfig+0x108>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d007      	beq.n	80086c4 <TIM_Base_SetConfig+0x38>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a38      	ldr	r2, [pc, #224]	; (8008798 <TIM_Base_SetConfig+0x10c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d003      	beq.n	80086c4 <TIM_Base_SetConfig+0x38>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a37      	ldr	r2, [pc, #220]	; (800879c <TIM_Base_SetConfig+0x110>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d108      	bne.n	80086d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a2d      	ldr	r2, [pc, #180]	; (8008790 <TIM_Base_SetConfig+0x104>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d01b      	beq.n	8008716 <TIM_Base_SetConfig+0x8a>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e4:	d017      	beq.n	8008716 <TIM_Base_SetConfig+0x8a>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a2a      	ldr	r2, [pc, #168]	; (8008794 <TIM_Base_SetConfig+0x108>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d013      	beq.n	8008716 <TIM_Base_SetConfig+0x8a>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a29      	ldr	r2, [pc, #164]	; (8008798 <TIM_Base_SetConfig+0x10c>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d00f      	beq.n	8008716 <TIM_Base_SetConfig+0x8a>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a28      	ldr	r2, [pc, #160]	; (800879c <TIM_Base_SetConfig+0x110>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d00b      	beq.n	8008716 <TIM_Base_SetConfig+0x8a>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a27      	ldr	r2, [pc, #156]	; (80087a0 <TIM_Base_SetConfig+0x114>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d007      	beq.n	8008716 <TIM_Base_SetConfig+0x8a>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a26      	ldr	r2, [pc, #152]	; (80087a4 <TIM_Base_SetConfig+0x118>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d003      	beq.n	8008716 <TIM_Base_SetConfig+0x8a>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a25      	ldr	r2, [pc, #148]	; (80087a8 <TIM_Base_SetConfig+0x11c>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d108      	bne.n	8008728 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800871c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	4313      	orrs	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a10      	ldr	r2, [pc, #64]	; (8008790 <TIM_Base_SetConfig+0x104>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00f      	beq.n	8008774 <TIM_Base_SetConfig+0xe8>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a11      	ldr	r2, [pc, #68]	; (800879c <TIM_Base_SetConfig+0x110>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00b      	beq.n	8008774 <TIM_Base_SetConfig+0xe8>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a10      	ldr	r2, [pc, #64]	; (80087a0 <TIM_Base_SetConfig+0x114>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d007      	beq.n	8008774 <TIM_Base_SetConfig+0xe8>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a0f      	ldr	r2, [pc, #60]	; (80087a4 <TIM_Base_SetConfig+0x118>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d003      	beq.n	8008774 <TIM_Base_SetConfig+0xe8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a0e      	ldr	r2, [pc, #56]	; (80087a8 <TIM_Base_SetConfig+0x11c>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d103      	bne.n	800877c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	615a      	str	r2, [r3, #20]
}
 8008782:	bf00      	nop
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	40012c00 	.word	0x40012c00
 8008794:	40000400 	.word	0x40000400
 8008798:	40000800 	.word	0x40000800
 800879c:	40013400 	.word	0x40013400
 80087a0:	40014000 	.word	0x40014000
 80087a4:	40014400 	.word	0x40014400
 80087a8:	40014800 	.word	0x40014800

080087ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	f023 0201 	bic.w	r2, r3, #1
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 0303 	bic.w	r3, r3, #3
 80087e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f023 0302 	bic.w	r3, r3, #2
 80087f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	4313      	orrs	r3, r2
 8008802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a2c      	ldr	r2, [pc, #176]	; (80088b8 <TIM_OC1_SetConfig+0x10c>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d00f      	beq.n	800882c <TIM_OC1_SetConfig+0x80>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a2b      	ldr	r2, [pc, #172]	; (80088bc <TIM_OC1_SetConfig+0x110>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d00b      	beq.n	800882c <TIM_OC1_SetConfig+0x80>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a2a      	ldr	r2, [pc, #168]	; (80088c0 <TIM_OC1_SetConfig+0x114>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d007      	beq.n	800882c <TIM_OC1_SetConfig+0x80>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a29      	ldr	r2, [pc, #164]	; (80088c4 <TIM_OC1_SetConfig+0x118>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d003      	beq.n	800882c <TIM_OC1_SetConfig+0x80>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a28      	ldr	r2, [pc, #160]	; (80088c8 <TIM_OC1_SetConfig+0x11c>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d10c      	bne.n	8008846 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f023 0308 	bic.w	r3, r3, #8
 8008832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	4313      	orrs	r3, r2
 800883c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f023 0304 	bic.w	r3, r3, #4
 8008844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a1b      	ldr	r2, [pc, #108]	; (80088b8 <TIM_OC1_SetConfig+0x10c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d00f      	beq.n	800886e <TIM_OC1_SetConfig+0xc2>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a1a      	ldr	r2, [pc, #104]	; (80088bc <TIM_OC1_SetConfig+0x110>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d00b      	beq.n	800886e <TIM_OC1_SetConfig+0xc2>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a19      	ldr	r2, [pc, #100]	; (80088c0 <TIM_OC1_SetConfig+0x114>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d007      	beq.n	800886e <TIM_OC1_SetConfig+0xc2>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a18      	ldr	r2, [pc, #96]	; (80088c4 <TIM_OC1_SetConfig+0x118>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d003      	beq.n	800886e <TIM_OC1_SetConfig+0xc2>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a17      	ldr	r2, [pc, #92]	; (80088c8 <TIM_OC1_SetConfig+0x11c>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d111      	bne.n	8008892 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800887c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	4313      	orrs	r3, r2
 8008886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	4313      	orrs	r3, r2
 8008890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	621a      	str	r2, [r3, #32]
}
 80088ac:	bf00      	nop
 80088ae:	371c      	adds	r7, #28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr
 80088b8:	40012c00 	.word	0x40012c00
 80088bc:	40013400 	.word	0x40013400
 80088c0:	40014000 	.word	0x40014000
 80088c4:	40014400 	.word	0x40014400
 80088c8:	40014800 	.word	0x40014800

080088cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	f023 0210 	bic.w	r2, r3, #16
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	021b      	lsls	r3, r3, #8
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	4313      	orrs	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f023 0320 	bic.w	r3, r3, #32
 800891a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	4313      	orrs	r3, r2
 8008926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a28      	ldr	r2, [pc, #160]	; (80089cc <TIM_OC2_SetConfig+0x100>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d003      	beq.n	8008938 <TIM_OC2_SetConfig+0x6c>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a27      	ldr	r2, [pc, #156]	; (80089d0 <TIM_OC2_SetConfig+0x104>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d10d      	bne.n	8008954 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800893e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	011b      	lsls	r3, r3, #4
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	4313      	orrs	r3, r2
 800894a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008952:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a1d      	ldr	r2, [pc, #116]	; (80089cc <TIM_OC2_SetConfig+0x100>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d00f      	beq.n	800897c <TIM_OC2_SetConfig+0xb0>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a1c      	ldr	r2, [pc, #112]	; (80089d0 <TIM_OC2_SetConfig+0x104>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d00b      	beq.n	800897c <TIM_OC2_SetConfig+0xb0>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a1b      	ldr	r2, [pc, #108]	; (80089d4 <TIM_OC2_SetConfig+0x108>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d007      	beq.n	800897c <TIM_OC2_SetConfig+0xb0>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a1a      	ldr	r2, [pc, #104]	; (80089d8 <TIM_OC2_SetConfig+0x10c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d003      	beq.n	800897c <TIM_OC2_SetConfig+0xb0>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a19      	ldr	r2, [pc, #100]	; (80089dc <TIM_OC2_SetConfig+0x110>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d113      	bne.n	80089a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008982:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800898a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	4313      	orrs	r3, r2
 8008996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	621a      	str	r2, [r3, #32]
}
 80089be:	bf00      	nop
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	40012c00 	.word	0x40012c00
 80089d0:	40013400 	.word	0x40013400
 80089d4:	40014000 	.word	0x40014000
 80089d8:	40014400 	.word	0x40014400
 80089dc:	40014800 	.word	0x40014800

080089e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 0303 	bic.w	r3, r3, #3
 8008a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	021b      	lsls	r3, r3, #8
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a27      	ldr	r2, [pc, #156]	; (8008adc <TIM_OC3_SetConfig+0xfc>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d003      	beq.n	8008a4a <TIM_OC3_SetConfig+0x6a>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a26      	ldr	r2, [pc, #152]	; (8008ae0 <TIM_OC3_SetConfig+0x100>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d10d      	bne.n	8008a66 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a64:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a1c      	ldr	r2, [pc, #112]	; (8008adc <TIM_OC3_SetConfig+0xfc>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00f      	beq.n	8008a8e <TIM_OC3_SetConfig+0xae>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a1b      	ldr	r2, [pc, #108]	; (8008ae0 <TIM_OC3_SetConfig+0x100>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d00b      	beq.n	8008a8e <TIM_OC3_SetConfig+0xae>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a1a      	ldr	r2, [pc, #104]	; (8008ae4 <TIM_OC3_SetConfig+0x104>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d007      	beq.n	8008a8e <TIM_OC3_SetConfig+0xae>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a19      	ldr	r2, [pc, #100]	; (8008ae8 <TIM_OC3_SetConfig+0x108>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d003      	beq.n	8008a8e <TIM_OC3_SetConfig+0xae>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a18      	ldr	r2, [pc, #96]	; (8008aec <TIM_OC3_SetConfig+0x10c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d113      	bne.n	8008ab6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	011b      	lsls	r3, r3, #4
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	011b      	lsls	r3, r3, #4
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	621a      	str	r2, [r3, #32]
}
 8008ad0:	bf00      	nop
 8008ad2:	371c      	adds	r7, #28
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	40012c00 	.word	0x40012c00
 8008ae0:	40013400 	.word	0x40013400
 8008ae4:	40014000 	.word	0x40014000
 8008ae8:	40014400 	.word	0x40014400
 8008aec:	40014800 	.word	0x40014800

08008af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	021b      	lsls	r3, r3, #8
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	031b      	lsls	r3, r3, #12
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a18      	ldr	r2, [pc, #96]	; (8008bb0 <TIM_OC4_SetConfig+0xc0>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d00f      	beq.n	8008b74 <TIM_OC4_SetConfig+0x84>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a17      	ldr	r2, [pc, #92]	; (8008bb4 <TIM_OC4_SetConfig+0xc4>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d00b      	beq.n	8008b74 <TIM_OC4_SetConfig+0x84>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a16      	ldr	r2, [pc, #88]	; (8008bb8 <TIM_OC4_SetConfig+0xc8>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d007      	beq.n	8008b74 <TIM_OC4_SetConfig+0x84>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a15      	ldr	r2, [pc, #84]	; (8008bbc <TIM_OC4_SetConfig+0xcc>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d003      	beq.n	8008b74 <TIM_OC4_SetConfig+0x84>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a14      	ldr	r2, [pc, #80]	; (8008bc0 <TIM_OC4_SetConfig+0xd0>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d109      	bne.n	8008b88 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	019b      	lsls	r3, r3, #6
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	621a      	str	r2, [r3, #32]
}
 8008ba2:	bf00      	nop
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	40012c00 	.word	0x40012c00
 8008bb4:	40013400 	.word	0x40013400
 8008bb8:	40014000 	.word	0x40014000
 8008bbc:	40014400 	.word	0x40014400
 8008bc0:	40014800 	.word	0x40014800

08008bc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	041b      	lsls	r3, r3, #16
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a17      	ldr	r2, [pc, #92]	; (8008c78 <TIM_OC5_SetConfig+0xb4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00f      	beq.n	8008c3e <TIM_OC5_SetConfig+0x7a>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a16      	ldr	r2, [pc, #88]	; (8008c7c <TIM_OC5_SetConfig+0xb8>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d00b      	beq.n	8008c3e <TIM_OC5_SetConfig+0x7a>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a15      	ldr	r2, [pc, #84]	; (8008c80 <TIM_OC5_SetConfig+0xbc>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d007      	beq.n	8008c3e <TIM_OC5_SetConfig+0x7a>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a14      	ldr	r2, [pc, #80]	; (8008c84 <TIM_OC5_SetConfig+0xc0>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d003      	beq.n	8008c3e <TIM_OC5_SetConfig+0x7a>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a13      	ldr	r2, [pc, #76]	; (8008c88 <TIM_OC5_SetConfig+0xc4>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d109      	bne.n	8008c52 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	021b      	lsls	r3, r3, #8
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	621a      	str	r2, [r3, #32]
}
 8008c6c:	bf00      	nop
 8008c6e:	371c      	adds	r7, #28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	40012c00 	.word	0x40012c00
 8008c7c:	40013400 	.word	0x40013400
 8008c80:	40014000 	.word	0x40014000
 8008c84:	40014400 	.word	0x40014400
 8008c88:	40014800 	.word	0x40014800

08008c8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	021b      	lsls	r3, r3, #8
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	051b      	lsls	r3, r3, #20
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a18      	ldr	r2, [pc, #96]	; (8008d44 <TIM_OC6_SetConfig+0xb8>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00f      	beq.n	8008d08 <TIM_OC6_SetConfig+0x7c>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a17      	ldr	r2, [pc, #92]	; (8008d48 <TIM_OC6_SetConfig+0xbc>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d00b      	beq.n	8008d08 <TIM_OC6_SetConfig+0x7c>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a16      	ldr	r2, [pc, #88]	; (8008d4c <TIM_OC6_SetConfig+0xc0>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d007      	beq.n	8008d08 <TIM_OC6_SetConfig+0x7c>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a15      	ldr	r2, [pc, #84]	; (8008d50 <TIM_OC6_SetConfig+0xc4>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d003      	beq.n	8008d08 <TIM_OC6_SetConfig+0x7c>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a14      	ldr	r2, [pc, #80]	; (8008d54 <TIM_OC6_SetConfig+0xc8>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d109      	bne.n	8008d1c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	029b      	lsls	r3, r3, #10
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	621a      	str	r2, [r3, #32]
}
 8008d36:	bf00      	nop
 8008d38:	371c      	adds	r7, #28
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	40012c00 	.word	0x40012c00
 8008d48:	40013400 	.word	0x40013400
 8008d4c:	40014000 	.word	0x40014000
 8008d50:	40014400 	.word	0x40014400
 8008d54:	40014800 	.word	0x40014800

08008d58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d70:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d82:	f023 0307 	bic.w	r3, r3, #7
 8008d86:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	2b30      	cmp	r3, #48	; 0x30
 8008da0:	d05c      	beq.n	8008e5c <TIM_SlaveTimer_SetConfig+0x104>
 8008da2:	2b30      	cmp	r3, #48	; 0x30
 8008da4:	d806      	bhi.n	8008db4 <TIM_SlaveTimer_SetConfig+0x5c>
 8008da6:	2b10      	cmp	r3, #16
 8008da8:	d058      	beq.n	8008e5c <TIM_SlaveTimer_SetConfig+0x104>
 8008daa:	2b20      	cmp	r3, #32
 8008dac:	d056      	beq.n	8008e5c <TIM_SlaveTimer_SetConfig+0x104>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d054      	beq.n	8008e5c <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008db2:	e054      	b.n	8008e5e <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8008db4:	2b50      	cmp	r3, #80	; 0x50
 8008db6:	d03d      	beq.n	8008e34 <TIM_SlaveTimer_SetConfig+0xdc>
 8008db8:	2b50      	cmp	r3, #80	; 0x50
 8008dba:	d802      	bhi.n	8008dc2 <TIM_SlaveTimer_SetConfig+0x6a>
 8008dbc:	2b40      	cmp	r3, #64	; 0x40
 8008dbe:	d010      	beq.n	8008de2 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8008dc0:	e04d      	b.n	8008e5e <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8008dc2:	2b60      	cmp	r3, #96	; 0x60
 8008dc4:	d040      	beq.n	8008e48 <TIM_SlaveTimer_SetConfig+0xf0>
 8008dc6:	2b70      	cmp	r3, #112	; 0x70
 8008dc8:	d000      	beq.n	8008dcc <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8008dca:	e048      	b.n	8008e5e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6818      	ldr	r0, [r3, #0]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	68d9      	ldr	r1, [r3, #12]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	689a      	ldr	r2, [r3, #8]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	f000 f8a3 	bl	8008f26 <TIM_ETR_SetConfig>
      break;
 8008de0:	e03d      	b.n	8008e5e <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b05      	cmp	r3, #5
 8008de8:	d101      	bne.n	8008dee <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e038      	b.n	8008e60 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6a1a      	ldr	r2, [r3, #32]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f022 0201 	bic.w	r2, r2, #1
 8008e04:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e14:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	621a      	str	r2, [r3, #32]
      break;
 8008e32:	e014      	b.n	8008e5e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6818      	ldr	r0, [r3, #0]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	6899      	ldr	r1, [r3, #8]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	461a      	mov	r2, r3
 8008e42:	f000 f811 	bl	8008e68 <TIM_TI1_ConfigInputStage>
      break;
 8008e46:	e00a      	b.n	8008e5e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	6899      	ldr	r1, [r3, #8]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	461a      	mov	r2, r3
 8008e56:	f000 f836 	bl	8008ec6 <TIM_TI2_ConfigInputStage>
      break;
 8008e5a:	e000      	b.n	8008e5e <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8008e5c:	bf00      	nop
  }
  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	f023 0201 	bic.w	r2, r3, #1
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	011b      	lsls	r3, r3, #4
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	f023 030a 	bic.w	r3, r3, #10
 8008ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	621a      	str	r2, [r3, #32]
}
 8008eba:	bf00      	nop
 8008ebc:	371c      	adds	r7, #28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b087      	sub	sp, #28
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	60f8      	str	r0, [r7, #12]
 8008ece:	60b9      	str	r1, [r7, #8]
 8008ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	f023 0210 	bic.w	r2, r3, #16
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	031b      	lsls	r3, r3, #12
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	011b      	lsls	r3, r3, #4
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	621a      	str	r2, [r3, #32]
}
 8008f1a:	bf00      	nop
 8008f1c:	371c      	adds	r7, #28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f26:	b480      	push	{r7}
 8008f28:	b087      	sub	sp, #28
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	607a      	str	r2, [r7, #4]
 8008f32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	021a      	lsls	r2, r3, #8
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	609a      	str	r2, [r3, #8]
}
 8008f5a:	bf00      	nop
 8008f5c:	371c      	adds	r7, #28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
	...

08008f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d101      	bne.n	8008f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	e063      	b.n	8009048 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a2b      	ldr	r2, [pc, #172]	; (8009054 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d004      	beq.n	8008fb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a2a      	ldr	r2, [pc, #168]	; (8009058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d108      	bne.n	8008fc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008fba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a1b      	ldr	r2, [pc, #108]	; (8009054 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d018      	beq.n	800901c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ff2:	d013      	beq.n	800901c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a18      	ldr	r2, [pc, #96]	; (800905c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d00e      	beq.n	800901c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a17      	ldr	r2, [pc, #92]	; (8009060 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d009      	beq.n	800901c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a12      	ldr	r2, [pc, #72]	; (8009058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d004      	beq.n	800901c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a13      	ldr	r2, [pc, #76]	; (8009064 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d10c      	bne.n	8009036 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009022:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	4313      	orrs	r3, r2
 800902c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	40012c00 	.word	0x40012c00
 8009058:	40013400 	.word	0x40013400
 800905c:	40000400 	.word	0x40000400
 8009060:	40000800 	.word	0x40000800
 8009064:	40014000 	.word	0x40014000

08009068 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009072:	2300      	movs	r3, #0
 8009074:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800907c:	2b01      	cmp	r3, #1
 800907e:	d101      	bne.n	8009084 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009080:	2302      	movs	r3, #2
 8009082:	e065      	b.n	8009150 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	4313      	orrs	r3, r2
 8009098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	4313      	orrs	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	041b      	lsls	r3, r3, #16
 80090fa:	4313      	orrs	r3, r2
 80090fc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a16      	ldr	r2, [pc, #88]	; (800915c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d004      	beq.n	8009112 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a14      	ldr	r2, [pc, #80]	; (8009160 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d115      	bne.n	800913e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	051b      	lsls	r3, r3, #20
 800911e:	4313      	orrs	r3, r2
 8009120:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	4313      	orrs	r3, r2
 800912e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	4313      	orrs	r3, r2
 800913c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	40012c00 	.word	0x40012c00
 8009160:	40013400 	.word	0x40013400

08009164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d101      	bne.n	80091b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e040      	b.n	8009234 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d106      	bne.n	80091c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7fa fc64 	bl	8003a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2224      	movs	r2, #36	; 0x24
 80091cc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f022 0201 	bic.w	r2, r2, #1
 80091dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f8c0 	bl	8009364 <UART_SetConfig>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e022      	b.n	8009234 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d002      	beq.n	80091fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 face 	bl	8009798 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800920a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689a      	ldr	r2, [r3, #8]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800921a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f042 0201 	orr.w	r2, r2, #1
 800922a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 fb55 	bl	80098dc <UART_CheckIdleState>
 8009232:	4603      	mov	r3, r0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08a      	sub	sp, #40	; 0x28
 8009240:	af02      	add	r7, sp, #8
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	4613      	mov	r3, r2
 800924a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009250:	2b20      	cmp	r3, #32
 8009252:	f040 8081 	bne.w	8009358 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <HAL_UART_Transmit+0x26>
 800925c:	88fb      	ldrh	r3, [r7, #6]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e079      	b.n	800935a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800926c:	2b01      	cmp	r3, #1
 800926e:	d101      	bne.n	8009274 <HAL_UART_Transmit+0x38>
 8009270:	2302      	movs	r3, #2
 8009272:	e072      	b.n	800935a <HAL_UART_Transmit+0x11e>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2221      	movs	r2, #33	; 0x21
 8009286:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009288:	f7fb fefa 	bl	8005080 <HAL_GetTick>
 800928c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	88fa      	ldrh	r2, [r7, #6]
 8009292:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	88fa      	ldrh	r2, [r7, #6]
 800929a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092a6:	d108      	bne.n	80092ba <HAL_UART_Transmit+0x7e>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d104      	bne.n	80092ba <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80092b0:	2300      	movs	r3, #0
 80092b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	61bb      	str	r3, [r7, #24]
 80092b8:	e003      	b.n	80092c2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092be:	2300      	movs	r3, #0
 80092c0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80092c2:	e02d      	b.n	8009320 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	2200      	movs	r2, #0
 80092cc:	2180      	movs	r1, #128	; 0x80
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 fb49 	bl	8009966 <UART_WaitOnFlagUntilTimeout>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e03d      	b.n	800935a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10b      	bne.n	80092fc <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	881a      	ldrh	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092f0:	b292      	uxth	r2, r2
 80092f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	3302      	adds	r3, #2
 80092f8:	61bb      	str	r3, [r7, #24]
 80092fa:	e008      	b.n	800930e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	781a      	ldrb	r2, [r3, #0]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	b292      	uxth	r2, r2
 8009306:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	3301      	adds	r3, #1
 800930c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009314:	b29b      	uxth	r3, r3
 8009316:	3b01      	subs	r3, #1
 8009318:	b29a      	uxth	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009326:	b29b      	uxth	r3, r3
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1cb      	bne.n	80092c4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	2200      	movs	r2, #0
 8009334:	2140      	movs	r1, #64	; 0x40
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 fb15 	bl	8009966 <UART_WaitOnFlagUntilTimeout>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e009      	b.n	800935a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2220      	movs	r2, #32
 800934a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	e000      	b.n	800935a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009358:	2302      	movs	r3, #2
  }
}
 800935a:	4618      	mov	r0, r3
 800935c:	3720      	adds	r7, #32
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800936c:	2300      	movs	r3, #0
 800936e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009370:	2300      	movs	r3, #0
 8009372:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	689a      	ldr	r2, [r3, #8]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	431a      	orrs	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	4313      	orrs	r3, r2
 800938a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009396:	f023 030c 	bic.w	r3, r3, #12
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	6812      	ldr	r2, [r2, #0]
 800939e:	6939      	ldr	r1, [r7, #16]
 80093a0:	430b      	orrs	r3, r1
 80093a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	430a      	orrs	r2, r1
 80093b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	430a      	orrs	r2, r1
 80093dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4aa9      	ldr	r2, [pc, #676]	; (8009688 <UART_SetConfig+0x324>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d121      	bne.n	800942c <UART_SetConfig+0xc8>
 80093e8:	4ba8      	ldr	r3, [pc, #672]	; (800968c <UART_SetConfig+0x328>)
 80093ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ec:	f003 0303 	and.w	r3, r3, #3
 80093f0:	2b03      	cmp	r3, #3
 80093f2:	d817      	bhi.n	8009424 <UART_SetConfig+0xc0>
 80093f4:	a201      	add	r2, pc, #4	; (adr r2, 80093fc <UART_SetConfig+0x98>)
 80093f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fa:	bf00      	nop
 80093fc:	0800940d 	.word	0x0800940d
 8009400:	08009419 	.word	0x08009419
 8009404:	0800941f 	.word	0x0800941f
 8009408:	08009413 	.word	0x08009413
 800940c:	2301      	movs	r3, #1
 800940e:	77fb      	strb	r3, [r7, #31]
 8009410:	e0b2      	b.n	8009578 <UART_SetConfig+0x214>
 8009412:	2302      	movs	r3, #2
 8009414:	77fb      	strb	r3, [r7, #31]
 8009416:	e0af      	b.n	8009578 <UART_SetConfig+0x214>
 8009418:	2304      	movs	r3, #4
 800941a:	77fb      	strb	r3, [r7, #31]
 800941c:	e0ac      	b.n	8009578 <UART_SetConfig+0x214>
 800941e:	2308      	movs	r3, #8
 8009420:	77fb      	strb	r3, [r7, #31]
 8009422:	e0a9      	b.n	8009578 <UART_SetConfig+0x214>
 8009424:	2310      	movs	r3, #16
 8009426:	77fb      	strb	r3, [r7, #31]
 8009428:	bf00      	nop
 800942a:	e0a5      	b.n	8009578 <UART_SetConfig+0x214>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a97      	ldr	r2, [pc, #604]	; (8009690 <UART_SetConfig+0x32c>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d123      	bne.n	800947e <UART_SetConfig+0x11a>
 8009436:	4b95      	ldr	r3, [pc, #596]	; (800968c <UART_SetConfig+0x328>)
 8009438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800943e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009442:	d012      	beq.n	800946a <UART_SetConfig+0x106>
 8009444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009448:	d802      	bhi.n	8009450 <UART_SetConfig+0xec>
 800944a:	2b00      	cmp	r3, #0
 800944c:	d007      	beq.n	800945e <UART_SetConfig+0xfa>
 800944e:	e012      	b.n	8009476 <UART_SetConfig+0x112>
 8009450:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009454:	d00c      	beq.n	8009470 <UART_SetConfig+0x10c>
 8009456:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800945a:	d003      	beq.n	8009464 <UART_SetConfig+0x100>
 800945c:	e00b      	b.n	8009476 <UART_SetConfig+0x112>
 800945e:	2300      	movs	r3, #0
 8009460:	77fb      	strb	r3, [r7, #31]
 8009462:	e089      	b.n	8009578 <UART_SetConfig+0x214>
 8009464:	2302      	movs	r3, #2
 8009466:	77fb      	strb	r3, [r7, #31]
 8009468:	e086      	b.n	8009578 <UART_SetConfig+0x214>
 800946a:	2304      	movs	r3, #4
 800946c:	77fb      	strb	r3, [r7, #31]
 800946e:	e083      	b.n	8009578 <UART_SetConfig+0x214>
 8009470:	2308      	movs	r3, #8
 8009472:	77fb      	strb	r3, [r7, #31]
 8009474:	e080      	b.n	8009578 <UART_SetConfig+0x214>
 8009476:	2310      	movs	r3, #16
 8009478:	77fb      	strb	r3, [r7, #31]
 800947a:	bf00      	nop
 800947c:	e07c      	b.n	8009578 <UART_SetConfig+0x214>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a84      	ldr	r2, [pc, #528]	; (8009694 <UART_SetConfig+0x330>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d123      	bne.n	80094d0 <UART_SetConfig+0x16c>
 8009488:	4b80      	ldr	r3, [pc, #512]	; (800968c <UART_SetConfig+0x328>)
 800948a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009490:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009494:	d012      	beq.n	80094bc <UART_SetConfig+0x158>
 8009496:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800949a:	d802      	bhi.n	80094a2 <UART_SetConfig+0x13e>
 800949c:	2b00      	cmp	r3, #0
 800949e:	d007      	beq.n	80094b0 <UART_SetConfig+0x14c>
 80094a0:	e012      	b.n	80094c8 <UART_SetConfig+0x164>
 80094a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80094a6:	d00c      	beq.n	80094c2 <UART_SetConfig+0x15e>
 80094a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80094ac:	d003      	beq.n	80094b6 <UART_SetConfig+0x152>
 80094ae:	e00b      	b.n	80094c8 <UART_SetConfig+0x164>
 80094b0:	2300      	movs	r3, #0
 80094b2:	77fb      	strb	r3, [r7, #31]
 80094b4:	e060      	b.n	8009578 <UART_SetConfig+0x214>
 80094b6:	2302      	movs	r3, #2
 80094b8:	77fb      	strb	r3, [r7, #31]
 80094ba:	e05d      	b.n	8009578 <UART_SetConfig+0x214>
 80094bc:	2304      	movs	r3, #4
 80094be:	77fb      	strb	r3, [r7, #31]
 80094c0:	e05a      	b.n	8009578 <UART_SetConfig+0x214>
 80094c2:	2308      	movs	r3, #8
 80094c4:	77fb      	strb	r3, [r7, #31]
 80094c6:	e057      	b.n	8009578 <UART_SetConfig+0x214>
 80094c8:	2310      	movs	r3, #16
 80094ca:	77fb      	strb	r3, [r7, #31]
 80094cc:	bf00      	nop
 80094ce:	e053      	b.n	8009578 <UART_SetConfig+0x214>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a70      	ldr	r2, [pc, #448]	; (8009698 <UART_SetConfig+0x334>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d123      	bne.n	8009522 <UART_SetConfig+0x1be>
 80094da:	4b6c      	ldr	r3, [pc, #432]	; (800968c <UART_SetConfig+0x328>)
 80094dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80094e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094e6:	d012      	beq.n	800950e <UART_SetConfig+0x1aa>
 80094e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094ec:	d802      	bhi.n	80094f4 <UART_SetConfig+0x190>
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d007      	beq.n	8009502 <UART_SetConfig+0x19e>
 80094f2:	e012      	b.n	800951a <UART_SetConfig+0x1b6>
 80094f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094f8:	d00c      	beq.n	8009514 <UART_SetConfig+0x1b0>
 80094fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094fe:	d003      	beq.n	8009508 <UART_SetConfig+0x1a4>
 8009500:	e00b      	b.n	800951a <UART_SetConfig+0x1b6>
 8009502:	2300      	movs	r3, #0
 8009504:	77fb      	strb	r3, [r7, #31]
 8009506:	e037      	b.n	8009578 <UART_SetConfig+0x214>
 8009508:	2302      	movs	r3, #2
 800950a:	77fb      	strb	r3, [r7, #31]
 800950c:	e034      	b.n	8009578 <UART_SetConfig+0x214>
 800950e:	2304      	movs	r3, #4
 8009510:	77fb      	strb	r3, [r7, #31]
 8009512:	e031      	b.n	8009578 <UART_SetConfig+0x214>
 8009514:	2308      	movs	r3, #8
 8009516:	77fb      	strb	r3, [r7, #31]
 8009518:	e02e      	b.n	8009578 <UART_SetConfig+0x214>
 800951a:	2310      	movs	r3, #16
 800951c:	77fb      	strb	r3, [r7, #31]
 800951e:	bf00      	nop
 8009520:	e02a      	b.n	8009578 <UART_SetConfig+0x214>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a5d      	ldr	r2, [pc, #372]	; (800969c <UART_SetConfig+0x338>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d123      	bne.n	8009574 <UART_SetConfig+0x210>
 800952c:	4b57      	ldr	r3, [pc, #348]	; (800968c <UART_SetConfig+0x328>)
 800952e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009530:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009538:	d012      	beq.n	8009560 <UART_SetConfig+0x1fc>
 800953a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800953e:	d802      	bhi.n	8009546 <UART_SetConfig+0x1e2>
 8009540:	2b00      	cmp	r3, #0
 8009542:	d007      	beq.n	8009554 <UART_SetConfig+0x1f0>
 8009544:	e012      	b.n	800956c <UART_SetConfig+0x208>
 8009546:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800954a:	d00c      	beq.n	8009566 <UART_SetConfig+0x202>
 800954c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009550:	d003      	beq.n	800955a <UART_SetConfig+0x1f6>
 8009552:	e00b      	b.n	800956c <UART_SetConfig+0x208>
 8009554:	2300      	movs	r3, #0
 8009556:	77fb      	strb	r3, [r7, #31]
 8009558:	e00e      	b.n	8009578 <UART_SetConfig+0x214>
 800955a:	2302      	movs	r3, #2
 800955c:	77fb      	strb	r3, [r7, #31]
 800955e:	e00b      	b.n	8009578 <UART_SetConfig+0x214>
 8009560:	2304      	movs	r3, #4
 8009562:	77fb      	strb	r3, [r7, #31]
 8009564:	e008      	b.n	8009578 <UART_SetConfig+0x214>
 8009566:	2308      	movs	r3, #8
 8009568:	77fb      	strb	r3, [r7, #31]
 800956a:	e005      	b.n	8009578 <UART_SetConfig+0x214>
 800956c:	2310      	movs	r3, #16
 800956e:	77fb      	strb	r3, [r7, #31]
 8009570:	bf00      	nop
 8009572:	e001      	b.n	8009578 <UART_SetConfig+0x214>
 8009574:	2310      	movs	r3, #16
 8009576:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	69db      	ldr	r3, [r3, #28]
 800957c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009580:	f040 808e 	bne.w	80096a0 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8009584:	7ffb      	ldrb	r3, [r7, #31]
 8009586:	2b08      	cmp	r3, #8
 8009588:	d85e      	bhi.n	8009648 <UART_SetConfig+0x2e4>
 800958a:	a201      	add	r2, pc, #4	; (adr r2, 8009590 <UART_SetConfig+0x22c>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095b5 	.word	0x080095b5
 8009594:	080095d5 	.word	0x080095d5
 8009598:	080095f5 	.word	0x080095f5
 800959c:	08009649 	.word	0x08009649
 80095a0:	08009611 	.word	0x08009611
 80095a4:	08009649 	.word	0x08009649
 80095a8:	08009649 	.word	0x08009649
 80095ac:	08009649 	.word	0x08009649
 80095b0:	08009631 	.word	0x08009631
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095b4:	f7fe fb4a 	bl	8007c4c <HAL_RCC_GetPCLK1Freq>
 80095b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	005a      	lsls	r2, r3, #1
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	085b      	lsrs	r3, r3, #1
 80095c4:	441a      	add	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	61bb      	str	r3, [r7, #24]
        break;
 80095d2:	e03c      	b.n	800964e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095d4:	f7fe fb5c 	bl	8007c90 <HAL_RCC_GetPCLK2Freq>
 80095d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	005a      	lsls	r2, r3, #1
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	085b      	lsrs	r3, r3, #1
 80095e4:	441a      	add	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	61bb      	str	r3, [r7, #24]
        break;
 80095f2:	e02c      	b.n	800964e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	085b      	lsrs	r3, r3, #1
 80095fa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80095fe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	6852      	ldr	r2, [r2, #4]
 8009606:	fbb3 f3f2 	udiv	r3, r3, r2
 800960a:	b29b      	uxth	r3, r3
 800960c:	61bb      	str	r3, [r7, #24]
        break;
 800960e:	e01e      	b.n	800964e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009610:	f7fe faa6 	bl	8007b60 <HAL_RCC_GetSysClockFreq>
 8009614:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	005a      	lsls	r2, r3, #1
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	085b      	lsrs	r3, r3, #1
 8009620:	441a      	add	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	fbb2 f3f3 	udiv	r3, r2, r3
 800962a:	b29b      	uxth	r3, r3
 800962c:	61bb      	str	r3, [r7, #24]
        break;
 800962e:	e00e      	b.n	800964e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	085b      	lsrs	r3, r3, #1
 8009636:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009642:	b29b      	uxth	r3, r3
 8009644:	61bb      	str	r3, [r7, #24]
        break;
 8009646:	e002      	b.n	800964e <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	75fb      	strb	r3, [r7, #23]
        break;
 800964c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	2b0f      	cmp	r3, #15
 8009652:	d916      	bls.n	8009682 <UART_SetConfig+0x31e>
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800965a:	d212      	bcs.n	8009682 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	b29b      	uxth	r3, r3
 8009660:	f023 030f 	bic.w	r3, r3, #15
 8009664:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	085b      	lsrs	r3, r3, #1
 800966a:	b29b      	uxth	r3, r3
 800966c:	f003 0307 	and.w	r3, r3, #7
 8009670:	b29a      	uxth	r2, r3
 8009672:	897b      	ldrh	r3, [r7, #10]
 8009674:	4313      	orrs	r3, r2
 8009676:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	897a      	ldrh	r2, [r7, #10]
 800967e:	60da      	str	r2, [r3, #12]
 8009680:	e07e      	b.n	8009780 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	75fb      	strb	r3, [r7, #23]
 8009686:	e07b      	b.n	8009780 <UART_SetConfig+0x41c>
 8009688:	40013800 	.word	0x40013800
 800968c:	40021000 	.word	0x40021000
 8009690:	40004400 	.word	0x40004400
 8009694:	40004800 	.word	0x40004800
 8009698:	40004c00 	.word	0x40004c00
 800969c:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 80096a0:	7ffb      	ldrb	r3, [r7, #31]
 80096a2:	2b08      	cmp	r3, #8
 80096a4:	d85b      	bhi.n	800975e <UART_SetConfig+0x3fa>
 80096a6:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <UART_SetConfig+0x348>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	080096d1 	.word	0x080096d1
 80096b0:	080096ef 	.word	0x080096ef
 80096b4:	0800970d 	.word	0x0800970d
 80096b8:	0800975f 	.word	0x0800975f
 80096bc:	08009729 	.word	0x08009729
 80096c0:	0800975f 	.word	0x0800975f
 80096c4:	0800975f 	.word	0x0800975f
 80096c8:	0800975f 	.word	0x0800975f
 80096cc:	08009747 	.word	0x08009747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096d0:	f7fe fabc 	bl	8007c4c <HAL_RCC_GetPCLK1Freq>
 80096d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	085a      	lsrs	r2, r3, #1
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	441a      	add	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	61bb      	str	r3, [r7, #24]
        break;
 80096ec:	e03a      	b.n	8009764 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096ee:	f7fe facf 	bl	8007c90 <HAL_RCC_GetPCLK2Freq>
 80096f2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	085a      	lsrs	r2, r3, #1
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	441a      	add	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	fbb2 f3f3 	udiv	r3, r2, r3
 8009706:	b29b      	uxth	r3, r3
 8009708:	61bb      	str	r3, [r7, #24]
        break;
 800970a:	e02b      	b.n	8009764 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	085b      	lsrs	r3, r3, #1
 8009712:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8009716:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	6852      	ldr	r2, [r2, #4]
 800971e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009722:	b29b      	uxth	r3, r3
 8009724:	61bb      	str	r3, [r7, #24]
        break;
 8009726:	e01d      	b.n	8009764 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009728:	f7fe fa1a 	bl	8007b60 <HAL_RCC_GetSysClockFreq>
 800972c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	085a      	lsrs	r2, r3, #1
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	441a      	add	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009740:	b29b      	uxth	r3, r3
 8009742:	61bb      	str	r3, [r7, #24]
        break;
 8009744:	e00e      	b.n	8009764 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	085b      	lsrs	r3, r3, #1
 800974c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	fbb2 f3f3 	udiv	r3, r2, r3
 8009758:	b29b      	uxth	r3, r3
 800975a:	61bb      	str	r3, [r7, #24]
        break;
 800975c:	e002      	b.n	8009764 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	75fb      	strb	r3, [r7, #23]
        break;
 8009762:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	2b0f      	cmp	r3, #15
 8009768:	d908      	bls.n	800977c <UART_SetConfig+0x418>
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009770:	d204      	bcs.n	800977c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	69ba      	ldr	r2, [r7, #24]
 8009778:	60da      	str	r2, [r3, #12]
 800977a:	e001      	b.n	8009780 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800978c:	7dfb      	ldrb	r3, [r7, #23]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3720      	adds	r7, #32
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop

08009798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00a      	beq.n	80097c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	430a      	orrs	r2, r1
 80097c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	f003 0302 	and.w	r3, r3, #2
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00a      	beq.n	80097e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	430a      	orrs	r2, r1
 80097e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e8:	f003 0304 	and.w	r3, r3, #4
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00a      	beq.n	8009806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	430a      	orrs	r2, r1
 8009804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980a:	f003 0308 	and.w	r3, r3, #8
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	430a      	orrs	r2, r1
 8009826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	f003 0310 	and.w	r3, r3, #16
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00a      	beq.n	800984a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	f003 0320 	and.w	r3, r3, #32
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00a      	beq.n	800986c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	430a      	orrs	r2, r1
 800986a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009874:	2b00      	cmp	r3, #0
 8009876:	d01a      	beq.n	80098ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	430a      	orrs	r2, r1
 800988c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009896:	d10a      	bne.n	80098ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	430a      	orrs	r2, r1
 80098ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00a      	beq.n	80098d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	605a      	str	r2, [r3, #4]
  }
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af02      	add	r7, sp, #8
 80098e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80098ea:	f7fb fbc9 	bl	8005080 <HAL_GetTick>
 80098ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 0308 	and.w	r3, r3, #8
 80098fa:	2b08      	cmp	r3, #8
 80098fc:	d10e      	bne.n	800991c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f82a 	bl	8009966 <UART_WaitOnFlagUntilTimeout>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	e020      	b.n	800995e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0304 	and.w	r3, r3, #4
 8009926:	2b04      	cmp	r3, #4
 8009928:	d10e      	bne.n	8009948 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800992a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f814 	bl	8009966 <UART_WaitOnFlagUntilTimeout>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e00a      	b.n	800995e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2220      	movs	r2, #32
 800994c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2220      	movs	r2, #32
 8009952:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	af00      	add	r7, sp, #0
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	60b9      	str	r1, [r7, #8]
 8009970:	603b      	str	r3, [r7, #0]
 8009972:	4613      	mov	r3, r2
 8009974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009976:	e05d      	b.n	8009a34 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997e:	d059      	beq.n	8009a34 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009980:	f7fb fb7e 	bl	8005080 <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	69ba      	ldr	r2, [r7, #24]
 800998c:	429a      	cmp	r2, r3
 800998e:	d302      	bcc.n	8009996 <UART_WaitOnFlagUntilTimeout+0x30>
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d11b      	bne.n	80099ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80099a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	689a      	ldr	r2, [r3, #8]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f022 0201 	bic.w	r2, r2, #1
 80099b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2220      	movs	r2, #32
 80099ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2220      	movs	r2, #32
 80099c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e042      	b.n	8009a54 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0304 	and.w	r3, r3, #4
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d02b      	beq.n	8009a34 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	69db      	ldr	r3, [r3, #28]
 80099e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099ea:	d123      	bne.n	8009a34 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099f4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a04:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689a      	ldr	r2, [r3, #8]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f022 0201 	bic.w	r2, r2, #1
 8009a14:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2220      	movs	r2, #32
 8009a20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2220      	movs	r2, #32
 8009a26:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e00f      	b.n	8009a54 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	69da      	ldr	r2, [r3, #28]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	bf0c      	ite	eq
 8009a44:	2301      	moveq	r3, #1
 8009a46:	2300      	movne	r3, #0
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	79fb      	ldrb	r3, [r7, #7]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d092      	beq.n	8009978 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <VBS_GetAvBusVoltage_d>:
  * @brief  It return latest averaged Vbus measurement expressed in u16Volt
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  return ( pHandle->AvBusVoltage_d );
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	88db      	ldrh	r3, [r3, #6]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volts
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volts
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	88db      	ldrh	r3, [r3, #6]
 8009a80:	60fb      	str	r3, [r7, #12]
  temp *= pHandle->ConversionFactor;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	885b      	ldrh	r3, [r3, #2]
 8009a86:	461a      	mov	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	fb02 f303 	mul.w	r3, r2, r3
 8009a8e:	60fb      	str	r3, [r7, #12]
  temp /= 65536u;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	0c1b      	lsrs	r3, r3, #16
 8009a94:	60fb      	str	r3, [r7, #12]

  return ( ( uint16_t )temp );
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	b29b      	uxth	r3, r3
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3714      	adds	r7, #20
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b089      	sub	sp, #36	; 0x24
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	6039      	str	r1, [r7, #0]
  uint16_t table_element;
  uint32_t uw_temp;
  int32_t  sw_temp;
  qd_t local_vqd = Vqd;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	60fb      	str	r3, [r7, #12]

  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8009ab4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009ab8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009abc:	fb02 f203 	mul.w	r2, r2, r3
            ( int32_t )( Vqd.d ) * Vqd.d;
 8009ac0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ac4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8009ac8:	fb01 f303 	mul.w	r3, r1, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8009acc:	4413      	add	r3, r2
 8009ace:	61fb      	str	r3, [r7, #28]

  uw_temp = ( uint32_t ) sw_temp;
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	61bb      	str	r3, [r7, #24]

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	fb03 f302 	mul.w	r3, r3, r2
 8009ae2:	69ba      	ldr	r2, [r7, #24]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d930      	bls.n	8009b4a <Circle_Limitation+0xa4>
  {

    uw_temp /= ( uint32_t )( 16777216 );
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	0e1b      	lsrs	r3, r3, #24
 8009aec:	61bb      	str	r3, [r7, #24]

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8009af4:	461a      	mov	r2, r3
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	1a9b      	subs	r3, r3, r2
 8009afa:	61bb      	str	r3, [r7, #24]

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	005b      	lsls	r3, r3, #1
 8009b04:	4413      	add	r3, r2
 8009b06:	889b      	ldrh	r3, [r3, #4]
 8009b08:	82fb      	strh	r3, [r7, #22]

    sw_temp = Vqd.q * ( int32_t )table_element;
 8009b0a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	8afb      	ldrh	r3, [r7, #22]
 8009b12:	fb03 f302 	mul.w	r3, r3, r2
 8009b16:	61fb      	str	r3, [r7, #28]
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	da02      	bge.n	8009b24 <Circle_Limitation+0x7e>
 8009b1e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8009b22:	337f      	adds	r3, #127	; 0x7f
 8009b24:	13db      	asrs	r3, r3, #15
 8009b26:	b21b      	sxth	r3, r3
 8009b28:	81bb      	strh	r3, [r7, #12]

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8009b2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	8afb      	ldrh	r3, [r7, #22]
 8009b32:	fb03 f302 	mul.w	r3, r3, r2
 8009b36:	61fb      	str	r3, [r7, #28]
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	da02      	bge.n	8009b44 <Circle_Limitation+0x9e>
 8009b3e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8009b42:	337f      	adds	r3, #127	; 0x7f
 8009b44:	13db      	asrs	r3, r3, #15
 8009b46:	b21b      	sxth	r3, r3
 8009b48:	81fb      	strh	r3, [r7, #14]
  }

  return ( local_vqd );
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	613b      	str	r3, [r7, #16]
 8009b4e:	2300      	movs	r3, #0
 8009b50:	8a3a      	ldrh	r2, [r7, #16]
 8009b52:	f362 030f 	bfi	r3, r2, #0, #16
 8009b56:	8a7a      	ldrh	r2, [r7, #18]
 8009b58:	f362 431f 	bfi	r3, r2, #16, #16
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3724      	adds	r7, #36	; 0x24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <FCP_Init>:
 * @todo Complete documentation
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  pHandle->RxTimeoutCountdown = 0;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	825a      	strh	r2, [r3, #18]

  pHandle->TxFrame.Code = 0x0;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	751a      	strb	r2, [r3, #20]
  pHandle->TxFrame.Size = 0;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	755a      	strb	r2, [r3, #21]
  pHandle->TxFrame.FrameCRC = 0;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pHandle->TxFrameLevel = 0;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  pHandle->RxFrame.Code = 0x0;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
  pHandle->RxFrame.Size = 0;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
}
 8009bc2:	bf00      	nop
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <FCP_SetClient>:
__weak void FCP_SetClient( FCP_Handle_t * pHandle,
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b085      	sub	sp, #20
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	60f8      	str	r0, [r7, #12]
 8009bd6:	60b9      	str	r1, [r7, #8]
 8009bd8:	607a      	str	r2, [r7, #4]
 8009bda:	603b      	str	r3, [r7, #0]
  if ( MC_NULL != pHandle )
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00b      	beq.n	8009bfa <FCP_SetClient+0x2c>
  {
    pHandle->ClientEntity = pClient;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	601a      	str	r2, [r3, #0]
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	605a      	str	r2, [r3, #4]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	609a      	str	r2, [r3, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	60da      	str	r2, [r3, #12]
  }
}
 8009bfa:	bf00      	nop
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <FCP_CalcCRC>:
    pHandle->RxTimeout = Timeout;
  }
}

__weak uint8_t FCP_CalcCRC( FCP_Frame_t * pFrame )
{
 8009c06:	b480      	push	{r7}
 8009c08:	b085      	sub	sp, #20
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  uint8_t nCRC = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]
  uint16_t nSum = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	81bb      	strh	r3, [r7, #12]
  uint8_t idx;

  if( MC_NULL != pFrame )
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d027      	beq.n	8009c6c <FCP_CalcCRC+0x66>
  {
    nSum += pFrame->Code;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	89bb      	ldrh	r3, [r7, #12]
 8009c24:	4413      	add	r3, r2
 8009c26:	81bb      	strh	r3, [r7, #12]
    nSum += pFrame->Size;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	785b      	ldrb	r3, [r3, #1]
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	89bb      	ldrh	r3, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	81bb      	strh	r3, [r7, #12]

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8009c34:	2300      	movs	r3, #0
 8009c36:	72fb      	strb	r3, [r7, #11]
 8009c38:	e00a      	b.n	8009c50 <FCP_CalcCRC+0x4a>
    {
      nSum += pFrame->Buffer[idx];
 8009c3a:	7afb      	ldrb	r3, [r7, #11]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	4413      	add	r3, r2
 8009c40:	789b      	ldrb	r3, [r3, #2]
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	89bb      	ldrh	r3, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	81bb      	strh	r3, [r7, #12]
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8009c4a:	7afb      	ldrb	r3, [r7, #11]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	72fb      	strb	r3, [r7, #11]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	785b      	ldrb	r3, [r3, #1]
 8009c54:	7afa      	ldrb	r2, [r7, #11]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d3ef      	bcc.n	8009c3a <FCP_CalcCRC+0x34>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
 8009c5a:	89bb      	ldrh	r3, [r7, #12]
 8009c5c:	73fb      	strb	r3, [r7, #15]
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8009c5e:	89bb      	ldrh	r3, [r7, #12]
 8009c60:	0a1b      	lsrs	r3, r3, #8
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
 8009c68:	4413      	add	r3, r2
 8009c6a:	73fb      	strb	r3, [r7, #15]
  }

  return nCRC ;
 8009c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3714      	adds	r7, #20
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr

08009c7a <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8009c7a:	b480      	push	{r7}
 8009c7c:	b085      	sub	sp, #20
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009c82:	2300      	movs	r3, #0
 8009c84:	81fb      	strh	r3, [r7, #14]
 8009c86:	e007      	b.n	8009c98 <MPM_Clear+0x1e>
  {
    pHandle->hMeasBuffer[i] = 0;
 8009c88:	89fa      	ldrh	r2, [r7, #14]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009c92:	89fb      	ldrh	r3, [r7, #14]
 8009c94:	3301      	adds	r3, #1
 8009c96:	81fb      	strh	r3, [r7, #14]
 8009c98:	89fb      	ldrh	r3, [r7, #14]
 8009c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8009c9c:	d9f4      	bls.n	8009c88 <MPM_Clear+0xe>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

}
 8009cae:	bf00      	nop
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <MPM_CalcElMotorPower>:
  *         motor power.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak int16_t MPM_CalcElMotorPower( MotorPowMeas_Handle_t * pHandle, int16_t CurrentMotorPower )
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b085      	sub	sp, #20
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	807b      	strh	r3, [r7, #2]
  uint16_t i;
  int32_t wAux = 0;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60bb      	str	r3, [r7, #8]

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	887a      	ldrh	r2, [r7, #2]
 8009cd6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
  pHandle->hNextMeasBufferIndex++;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8009cec:	3301      	adds	r3, #1
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8009cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8009cfe:	d903      	bls.n	8009d08 <MPM_CalcElMotorPower+0x4e>
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009d08:	2300      	movs	r3, #0
 8009d0a:	81fb      	strh	r3, [r7, #14]
 8009d0c:	e00a      	b.n	8009d24 <MPM_CalcElMotorPower+0x6a>
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8009d0e:	89fa      	ldrh	r2, [r7, #14]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8009d16:	461a      	mov	r2, r3
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	60bb      	str	r3, [r7, #8]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009d1e:	89fb      	ldrh	r3, [r7, #14]
 8009d20:	3301      	adds	r3, #1
 8009d22:	81fb      	strh	r3, [r7, #14]
 8009d24:	89fb      	ldrh	r3, [r7, #14]
 8009d26:	2b7f      	cmp	r3, #127	; 0x7f
 8009d28:	d9f1      	bls.n	8009d0e <MPM_CalcElMotorPower+0x54>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	da00      	bge.n	8009d32 <MPM_CalcElMotorPower+0x78>
 8009d30:	337f      	adds	r3, #127	; 0x7f
 8009d32:	11db      	asrs	r3, r3, #7
 8009d34:	60bb      	str	r3, [r7, #8]
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	b21a      	sxth	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
 8009d40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <MPM_GetAvrgElMotorPowerW>:
  *         expressed in watt.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  return ( pHandle->hAvrgElMotorPowerW );
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <NTC_SetFaultState>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Updated internal fault status
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b085      	sub	sp, #20
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	8a1a      	ldrh	r2, [r3, #16]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	8b5b      	ldrh	r3, [r3, #26]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d902      	bls.n	8009d84 <NTC_SetFaultState+0x1a>
  {
    hFault = MC_OVER_TEMP;
 8009d7e:	2308      	movs	r3, #8
 8009d80:	81fb      	strh	r3, [r7, #14]
 8009d82:	e00b      	b.n	8009d9c <NTC_SetFaultState+0x32>
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	8a1a      	ldrh	r2, [r3, #16]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	8b9b      	ldrh	r3, [r3, #28]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d202      	bcs.n	8009d96 <NTC_SetFaultState+0x2c>
  {
    hFault = MC_NO_ERROR;
 8009d90:	2300      	movs	r3, #0
 8009d92:	81fb      	strh	r3, [r7, #14]
 8009d94:	e002      	b.n	8009d9c <NTC_SetFaultState+0x32>
  }
  else
  {
    hFault = pHandle->hFaultState;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	8adb      	ldrh	r3, [r3, #22]
 8009d9a:	81fb      	strh	r3, [r7, #14]
  }
  return hFault;
 8009d9c:	89fb      	ldrh	r3, [r7, #14]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3714      	adds	r7, #20
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <NTC_Init>:
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 *
 *  @p pPWMnCurrentSensor : Handle on the PWMC component to be used for regular conversions
 */
__weak void NTC_Init( NTC_Handle_t * pHandle )
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b082      	sub	sp, #8
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]

  if ( pHandle->bSensorType == REAL_SENSOR )
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10d      	bne.n	8009dd6 <NTC_Init+0x2c>
  {
    /* Need to be register with RegularConvManager */
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7f9 f990 	bl	80030e4 <RCM_RegisterRegConv>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    NTC_Clear( pHandle );
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f80c 	bl	8009dec <NTC_Clear>
  {
    pHandle->hFaultState = MC_NO_ERROR;
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
  }

}
 8009dd4:	e006      	b.n	8009de4 <NTC_Init+0x3a>
    pHandle->hFaultState = MC_NO_ERROR;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	82da      	strh	r2, [r3, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	8a5a      	ldrh	r2, [r3, #18]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	821a      	strh	r2, [r3, #16]
}
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <NTC_Clear>:
 * @brief Initializes internal average temperature computed value
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  pHandle->hAvTemp_d = 0u;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	821a      	strh	r2, [r3, #16]
}
 8009dfa:	bf00      	nop
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b084      	sub	sp, #16
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d12e      	bne.n	8009e74 <NTC_CalcAvTemp+0x6e>
  {
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7f9 fa17 	bl	8003250 <RCM_ExecRegularConv>
 8009e22:	4603      	mov	r3, r0
 8009e24:	81fb      	strh	r3, [r7, #14]

    if ( hAux != 0xFFFFu )
 8009e26:	89fb      	ldrh	r3, [r7, #14]
 8009e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d019      	beq.n	8009e64 <NTC_CalcAvTemp+0x5e>
    {
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	8b1b      	ldrh	r3, [r3, #24]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	60bb      	str	r3, [r7, #8]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	8a1b      	ldrh	r3, [r3, #16]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	fb02 f303 	mul.w	r3, r2, r3
 8009e44:	60bb      	str	r3, [r7, #8]
      wtemp += hAux;
 8009e46:	89fb      	ldrh	r3, [r7, #14]
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	60bb      	str	r3, [r7, #8]
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	8b1b      	ldrh	r3, [r3, #24]
 8009e52:	461a      	mov	r2, r3
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e5a:	60bb      	str	r3, [r7, #8]

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	821a      	strh	r2, [r3, #16]
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff ff80 	bl	8009d6a <NTC_SetFaultState>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	82da      	strh	r2, [r3, #22]
 8009e72:	e002      	b.n	8009e7a <NTC_CalcAvTemp+0x74>
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	82da      	strh	r2, [r3, #22]
  }

  return ( pHandle->hFaultState );
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	8adb      	ldrh	r3, [r3, #22]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <NTC_GetAvTemp_C>:
  * @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @r AverageTemperature : Latest averaged temperature measured (in Celsius degrees)
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
 8009e86:	b480      	push	{r7}
 8009e88:	b085      	sub	sp, #20
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d11d      	bne.n	8009ed2 <NTC_GetAvTemp_C+0x4c>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	8a1b      	ldrh	r3, [r3, #16]
 8009e9a:	60fb      	str	r3, [r7, #12]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	1a9b      	subs	r3, r3, r2
 8009ea6:	60fb      	str	r3, [r7, #12]
    wTemp *= pHandle->hSensitivity;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	fb02 f303 	mul.w	r3, r2, r3
 8009eb6:	60fb      	str	r3, [r7, #12]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	da02      	bge.n	8009ec4 <NTC_GetAvTemp_C+0x3e>
 8009ebe:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8009ec2:	33ff      	adds	r3, #255	; 0xff
 8009ec4:	141b      	asrs	r3, r3, #16
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ecc:	4413      	add	r3, r2
 8009ece:	60fb      	str	r3, [r7, #12]
 8009ed0:	e002      	b.n	8009ed8 <NTC_GetAvTemp_C+0x52>
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	8a9b      	ldrh	r3, [r3, #20]
 8009ed6:	60fb      	str	r3, [r7, #12]
  }
  return ( ( int16_t )wTemp );
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	b21b      	sxth	r3, r3
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <PID_HandleInit>:
 * @brief  It initializes the handle
 * @param  pHandle: handler of the current instance of the PID component
 * @retval None
 */
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	809a      	strh	r2, [r3, #4]
  pHandle->hKiGain =  pHandle->hDefKiGain;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	80da      	strh	r2, [r3, #6]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	845a      	strh	r2, [r3, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	609a      	str	r2, [r3, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009f1a:	bf00      	nop
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <PID_SetKP>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	460b      	mov	r3, r1
 8009f30:	807b      	strh	r3, [r7, #2]
  pHandle->hKpGain = hKpGain;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	887a      	ldrh	r2, [r7, #2]
 8009f36:	809a      	strh	r2, [r3, #4]
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <PID_SetKI>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	807b      	strh	r3, [r7, #2]
  pHandle->hKiGain = hKiGain;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	887a      	ldrh	r2, [r7, #2]
 8009f54:	80da      	strh	r2, [r3, #6]
}
 8009f56:	bf00      	nop
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <PID_GetKP>:
 * @brief  It returns the Kp gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKpGain );
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <PID_GetKI>:
 * @brief  It returns the Ki gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKiGain );
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <PID_SetIntegralTerm>:
 * pHandle: handler of the current instance of the PID component
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
 8009f96:	b480      	push	{r7}
 8009f98:	b083      	sub	sp, #12
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	6039      	str	r1, [r7, #0]
  pHandle->wIntegralTerm = wIntegralTermValue;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	609a      	str	r2, [r3, #8]

  return;
 8009fa6:	bf00      	nop
}
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <PID_GetKPDivisor>:
 * @brief  It returns the Kp gain divisor
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b083      	sub	sp, #12
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKpDivisor );
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	8b1b      	ldrh	r3, [r3, #24]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <PID_GetKIDivisor>:
 * @brief  It returns the Ki gain divisor of the passed PI object
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKiDivisor );
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	8b5b      	ldrh	r3, [r3, #26]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <PID_SetKD>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b083      	sub	sp, #12
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	460b      	mov	r3, r1
 8009fec:	807b      	strh	r3, [r7, #2]
  pHandle->hKdGain = hKdGain;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	887a      	ldrh	r2, [r7, #2]
 8009ff2:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <PID_GetKD>:
 * @brief  It returns the Kd gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  return pHandle->hKdGain;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
}
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
	...

0800a01c <PI_Controller>:
 * @param  wProcessVarError: current process variable error, intended as the reference
 *         value minus the present process variable value
 * @retval computed PI output
 */
__weak int16_t PI_Controller( PID_Handle_t * pHandle, int32_t wProcessVarError )
{
 800a01c:	b480      	push	{r7}
 800a01e:	b089      	sub	sp, #36	; 0x24
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  int32_t wProportional_Term, wIntegral_Term, wOutput_32, wIntegral_sum_temp;
  int32_t wDischarge = 0;
 800a026:	2300      	movs	r3, #0
 800a028:	617b      	str	r3, [r7, #20]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	8a9b      	ldrh	r3, [r3, #20]
 800a02e:	827b      	strh	r3, [r7, #18]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	8adb      	ldrh	r3, [r3, #22]
 800a034:	823b      	strh	r3, [r7, #16]

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a03c:	461a      	mov	r2, r3
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	fb02 f303 	mul.w	r3, r2, r3
 800a044:	60fb      	str	r3, [r7, #12]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d103      	bne.n	800a058 <PI_Controller+0x3c>
  {
    pHandle->wIntegralTerm = 0;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	609a      	str	r2, [r3, #8]
 800a056:	e03a      	b.n	800a0ce <PI_Controller+0xb2>
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a05e:	461a      	mov	r2, r3
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	fb02 f303 	mul.w	r3, r2, r3
 800a066:	60bb      	str	r3, [r7, #8]
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	4413      	add	r3, r2
 800a070:	61bb      	str	r3, [r7, #24]

    if ( wIntegral_sum_temp < 0 )
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	2b00      	cmp	r3, #0
 800a076:	da0a      	bge.n	800a08e <PI_Controller+0x72>
    {
      if ( pHandle->wIntegralTerm > 0 )
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	dd0f      	ble.n	800a0a0 <PI_Controller+0x84>
      {
        if ( wIntegral_Term > 0 )
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	dd0c      	ble.n	800a0a0 <PI_Controller+0x84>
        {
          wIntegral_sum_temp = INT32_MAX;
 800a086:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a08a:	61bb      	str	r3, [r7, #24]
 800a08c:	e008      	b.n	800a0a0 <PI_Controller+0x84>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	da04      	bge.n	800a0a0 <PI_Controller+0x84>
      {
        if ( wIntegral_Term < 0 )
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	da01      	bge.n	800a0a0 <PI_Controller+0x84>
        {
          wIntegral_sum_temp = -INT32_MAX;
 800a09c:	4b27      	ldr	r3, [pc, #156]	; (800a13c <PI_Controller+0x120>)
 800a09e:	61bb      	str	r3, [r7, #24]
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	69ba      	ldr	r2, [r7, #24]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	dd04      	ble.n	800a0b4 <PI_Controller+0x98>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68da      	ldr	r2, [r3, #12]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	609a      	str	r2, [r3, #8]
 800a0b2:	e00c      	b.n	800a0ce <PI_Controller+0xb2>
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	69ba      	ldr	r2, [r7, #24]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	da04      	bge.n	800a0c8 <PI_Controller+0xac>
    {
      pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	691a      	ldr	r2, [r3, #16]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	609a      	str	r2, [r3, #8]
 800a0c6:	e002      	b.n	800a0ce <PI_Controller+0xb2>
    }
    else
    {
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	609a      	str	r2, [r3, #8]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	8b9b      	ldrh	r3, [r3, #28]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	fa43 f202 	asr.w	r2, r3, r2
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	6879      	ldr	r1, [r7, #4]
 800a0e0:	8bc9      	ldrh	r1, [r1, #30]
 800a0e2:	410b      	asrs	r3, r1
 800a0e4:	4413      	add	r3, r2
 800a0e6:	61fb      	str	r3, [r7, #28]
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 800a0e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0ec:	69fa      	ldr	r2, [r7, #28]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	dd08      	ble.n	800a104 <PI_Controller+0xe8>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 800a0f2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	617b      	str	r3, [r7, #20]
    wOutput_32 = hUpperOutputLimit;
 800a0fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a100:	61fb      	str	r3, [r7, #28]
 800a102:	e00c      	b.n	800a11e <PI_Controller+0x102>
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 800a104:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a108:	69fa      	ldr	r2, [r7, #28]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	da07      	bge.n	800a11e <PI_Controller+0x102>
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 800a10e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	617b      	str	r3, [r7, #20]
    wOutput_32 = hLowerOutputLimit;
 800a118:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a11c:	61fb      	str	r3, [r7, #28]
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	689a      	ldr	r2, [r3, #8]
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	441a      	add	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	609a      	str	r2, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	b21b      	sxth	r3, r3
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3724      	adds	r7, #36	; 0x24
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	80000001 	.word	0x80000001

0800a140 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 800a140:	b590      	push	{r4, r7, lr}
 800a142:	b089      	sub	sp, #36	; 0x24
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a14e:	f107 0310 	add.w	r3, r7, #16
 800a152:	320c      	adds	r2, #12
 800a154:	6810      	ldr	r0, [r2, #0]
 800a156:	6018      	str	r0, [r3, #0]
  qd_t Vqd = pHandle->pFOCVars->Vqd;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a15e:	f107 030c 	add.w	r3, r7, #12
 800a162:	3216      	adds	r2, #22
 800a164:	6810      	ldr	r0, [r2, #0]
 800a166:	6018      	str	r0, [r3, #0]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800a168:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a16c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a170:	fb02 f203 	mul.w	r2, r2, r3
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800a174:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a178:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800a17c:	fb01 f303 	mul.w	r3, r1, r3
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800a180:	4413      	add	r3, r2
 800a182:	61fb      	str	r3, [r7, #28]
  wAux /= 65536;
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	2b00      	cmp	r3, #0
 800a188:	da02      	bge.n	800a190 <PQD_CalcElMotorPower+0x50>
 800a18a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800a18e:	33ff      	adds	r3, #255	; 0xff
 800a190:	141b      	asrs	r3, r3, #16
 800a192:	61fb      	str	r3, [r7, #28]

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7ff fc67 	bl	8009a74 <VBS_GetAvBusVoltage_V>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	fb03 f304 	mul.w	r3, r3, r4
 800a1ac:	61bb      	str	r3, [r7, #24]
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	4a16      	ldr	r2, [pc, #88]	; (800a20c <PQD_CalcElMotorPower+0xcc>)
 800a1b2:	fb82 1203 	smull	r1, r2, r2, r3
 800a1b6:	1192      	asrs	r2, r2, #6
 800a1b8:	17db      	asrs	r3, r3, #31
 800a1ba:	1ad3      	subs	r3, r2, r3
 800a1bc:	61bb      	str	r3, [r7, #24]

  wAux3 = wAux * wAux2;
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	fb02 f303 	mul.w	r3, r2, r3
 800a1c6:	617b      	str	r3, [r7, #20]
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	005b      	lsls	r3, r3, #1
 800a1ce:	4413      	add	r3, r2
 800a1d0:	005b      	lsls	r3, r3, #1
 800a1d2:	617b      	str	r3, [r7, #20]
  wAux3 /= 10;
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	4a0e      	ldr	r2, [pc, #56]	; (800a210 <PQD_CalcElMotorPower+0xd0>)
 800a1d8:	fb82 1203 	smull	r1, r2, r2, r3
 800a1dc:	1092      	asrs	r2, r2, #2
 800a1de:	17db      	asrs	r3, r3, #31
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	617b      	str	r3, [r7, #20]
  wAux3 /= 65536;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	da02      	bge.n	800a1f0 <PQD_CalcElMotorPower+0xb0>
 800a1ea:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800a1ee:	33ff      	adds	r3, #255	; 0xff
 800a1f0:	141b      	asrs	r3, r3, #16
 800a1f2:	617b      	str	r3, [r7, #20]

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	b212      	sxth	r2, r2
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7ff fd5c 	bl	8009cba <MPM_CalcElMotorPower>

}
 800a202:	bf00      	nop
 800a204:	3724      	adds	r7, #36	; 0x24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd90      	pop	{r4, r7, pc}
 800a20a:	bf00      	nop
 800a20c:	1b4e81b5 	.word	0x1b4e81b5
 800a210:	66666667 	.word	0x66666667

0800a214 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800a21c:	4b08      	ldr	r3, [pc, #32]	; (800a240 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a21e:	69da      	ldr	r2, [r3, #28]
 800a220:	4907      	ldr	r1, [pc, #28]	; (800a240 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4313      	orrs	r3, r2
 800a226:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800a228:	4b05      	ldr	r3, [pc, #20]	; (800a240 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a22a:	69da      	ldr	r2, [r3, #28]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4013      	ands	r3, r2
 800a230:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a232:	68fb      	ldr	r3, [r7, #12]
}
 800a234:	bf00      	nop
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr
 800a240:	40021000 	.word	0x40021000

0800a244 <LL_APB1_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 800a24c:	4b07      	ldr	r3, [pc, #28]	; (800a26c <LL_APB1_GRP1_IsEnabledClock+0x28>)
 800a24e:	69da      	ldr	r2, [r3, #28]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4013      	ands	r3, r2
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	429a      	cmp	r2, r3
 800a258:	bf0c      	ite	eq
 800a25a:	2301      	moveq	r3, #1
 800a25c:	2300      	movne	r3, #0
 800a25e:	b2db      	uxtb	r3, r3
}
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	40021000 	.word	0x40021000

0800a270 <LL_APB1_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800a278:	4b06      	ldr	r3, [pc, #24]	; (800a294 <LL_APB1_GRP1_DisableClock+0x24>)
 800a27a:	69da      	ldr	r2, [r3, #28]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	43db      	mvns	r3, r3
 800a280:	4904      	ldr	r1, [pc, #16]	; (800a294 <LL_APB1_GRP1_DisableClock+0x24>)
 800a282:	4013      	ands	r3, r2
 800a284:	61cb      	str	r3, [r1, #28]
}
 800a286:	bf00      	nop
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	40021000 	.word	0x40021000

0800a298 <LL_TIM_GetCounterMode>:
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <LL_TIM_SetTriggerOutput>:
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	431a      	orrs	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	605a      	str	r2, [r3, #4]
}
 800a2ce:	bf00      	nop
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <LL_TIM_ClearFlag_CC1>:
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b083      	sub	sp, #12
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f06f 0202 	mvn.w	r2, #2
 800a2e8:	611a      	str	r2, [r3, #16]
}
 800a2ea:	bf00      	nop
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <LL_TIM_IsActiveFlag_CC1>:
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b083      	sub	sp, #12
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	f003 0302 	and.w	r3, r3, #2
 800a306:	2b02      	cmp	r3, #2
 800a308:	d101      	bne.n	800a30e <LL_TIM_IsActiveFlag_CC1+0x18>
 800a30a:	2301      	movs	r3, #1
 800a30c:	e000      	b.n	800a310 <LL_TIM_IsActiveFlag_CC1+0x1a>
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	f043 0201 	orr.w	r2, r3, #1
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	615a      	str	r2, [r3, #20]
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800a342:	2001      	movs	r0, #1
 800a344:	f7ff ff7e 	bl	800a244 <LL_APB1_GRP1_IsEnabledClock>
 800a348:	6078      	str	r0, [r7, #4]
  if ( isTIM2ClockOn == 0 )
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10a      	bne.n	800a366 <startTimers+0x2a>
  {
    /* Temporary Enable TIM2 clock if not already on */
    LL_APB1_GRP1_EnableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800a350:	2001      	movs	r0, #1
 800a352:	f7ff ff5f 	bl	800a214 <LL_APB1_GRP1_EnableClock>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
 800a356:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a35a:	f7ff ffdf 	bl	800a31c <LL_TIM_GenerateEvent_UPDATE>
    LL_APB1_GRP1_DisableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800a35e:	2001      	movs	r0, #1
 800a360:	f7ff ff86 	bl	800a270 <LL_APB1_GRP1_DisableClock>
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 800a364:	e013      	b.n	800a38e <startTimers+0x52>
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 800a366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a370:	603b      	str	r3, [r7, #0]
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
 800a372:	2120      	movs	r1, #32
 800a374:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a378:	f7ff ff9c 	bl	800a2b4 <LL_TIM_SetTriggerOutput>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
 800a37c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a380:	f7ff ffcc 	bl	800a31c <LL_TIM_GenerateEvent_UPDATE>
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800a38a:	f7ff ff93 	bl	800a2b4 <LL_TIM_SetTriggerOutput>
}
 800a38e:	bf00      	nop
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, uint8_t *cnt )
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b086      	sub	sp, #24
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	60b9      	str	r1, [r7, #8]
 800a3a0:	603b      	str	r3, [r7, #0]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	71fb      	strb	r3, [r7, #7]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( LL_TIM_GetCounterMode(TIMx) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f7ff ff76 	bl	800a298 <LL_TIM_GetCounterMode>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b60      	cmp	r3, #96	; 0x60
 800a3b0:	d105      	bne.n	800a3be <waitForPolarizationEnd+0x28>
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 800a3b2:	79fb      	ldrb	r3, [r7, #7]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	015b      	lsls	r3, r3, #5
 800a3ba:	82bb      	strh	r3, [r7, #20]
 800a3bc:	e005      	b.n	800a3ca <waitForPolarizationEnd+0x34>
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 800a3be:	79fb      	ldrb	r3, [r7, #7]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	085b      	lsrs	r3, r3, #1
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	015b      	lsls	r3, r3, #5
 800a3c8:	82bb      	strh	r3, [r7, #20]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f7ff ff85 	bl	800a2da <LL_TIM_ClearFlag_CC1>
  hCalibrationPeriodCounter = 0u;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	82fb      	strh	r3, [r7, #22]
  while (*cnt < NB_CONVERSIONS)
 800a3d4:	e017      	b.n	800a406 <waitForPolarizationEnd+0x70>
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f7ff ff8d 	bl	800a2f6 <LL_TIM_IsActiveFlag_CC1>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d011      	beq.n	800a406 <waitForPolarizationEnd+0x70>
    {
      LL_TIM_ClearFlag_CC1(TIMx);
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f7ff ff79 	bl	800a2da <LL_TIM_ClearFlag_CC1>
      hCalibrationPeriodCounter++;
 800a3e8:	8afb      	ldrh	r3, [r7, #22]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	82fb      	strh	r3, [r7, #22]
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800a3ee:	8afa      	ldrh	r2, [r7, #22]
 800a3f0:	8abb      	ldrh	r3, [r7, #20]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d307      	bcc.n	800a406 <waitForPolarizationEnd+0x70>
      {
        if (*cnt < NB_CONVERSIONS)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	2b0f      	cmp	r3, #15
 800a3fc:	d803      	bhi.n	800a406 <waitForPolarizationEnd+0x70>
        {
          *SWerror = 1u;
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	2201      	movs	r2, #1
 800a402:	801a      	strh	r2, [r3, #0]
          break;
 800a404:	e003      	b.n	800a40e <waitForPolarizationEnd+0x78>
  while (*cnt < NB_CONVERSIONS)
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	2b0f      	cmp	r3, #15
 800a40c:	d9e3      	bls.n	800a3d6 <waitForPolarizationEnd+0x40>
        }
      }
    }
  }
}
 800a40e:	bf00      	nop
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <PWMC_GetPhaseCurrents>:
  * @param  pHandle handle on the target PWMC component
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b082      	sub	sp, #8
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	6039      	str	r1, [r7, #0]
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	4798      	blx	r3
}
 800a42a:	bf00      	nop
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 800a432:	b580      	push	{r7, lr}
 800a434:	b08a      	sub	sp, #40	; 0x28
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	6039      	str	r1, [r7, #0]
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800a43c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a440:	461a      	mov	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a446:	fb03 f302 	mul.w	r3, r3, r2
 800a44a:	61bb      	str	r3, [r7, #24]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800a44c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a450:	461a      	mov	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a458:	fb03 f202 	mul.w	r2, r3, r2
 800a45c:	4613      	mov	r3, r2
 800a45e:	07db      	lsls	r3, r3, #31
 800a460:	1a9b      	subs	r3, r3, r2
 800a462:	005b      	lsls	r3, r3, #1
 800a464:	617b      	str	r3, [r7, #20]

  wX = wUBeta;
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	613b      	str	r3, [r7, #16]
  wY = ( wUBeta + wUAlpha ) / 2;
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	4413      	add	r3, r2
 800a470:	0fda      	lsrs	r2, r3, #31
 800a472:	4413      	add	r3, r2
 800a474:	105b      	asrs	r3, r3, #1
 800a476:	60fb      	str	r3, [r7, #12]
  wZ = ( wUBeta - wUAlpha ) / 2;
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	0fda      	lsrs	r2, r3, #31
 800a480:	4413      	add	r3, r2
 800a482:	105b      	asrs	r3, r3, #1
 800a484:	60bb      	str	r3, [r7, #8]

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f280 80bd 	bge.w	800a608 <PWMC_SetPhaseVoltage+0x1d6>
  {
    if ( wZ < 0 )
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	da3c      	bge.n	800a50e <PWMC_SetPhaseVoltage+0xdc>
    {
      pHandle->Sector = SECTOR_5;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2204      	movs	r2, #4
 800a498:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4a2:	089b      	lsrs	r3, r3, #2
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	da03      	bge.n	800a4ba <PWMC_SetPhaseVoltage+0x88>
 800a4b2:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800a4b6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a4ba:	149b      	asrs	r3, r3, #18
 800a4bc:	440b      	add	r3, r1
 800a4be:	627b      	str	r3, [r7, #36]	; 0x24
      wTimePhB = wTimePhA + wZ / 131072;
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	da03      	bge.n	800a4ce <PWMC_SetPhaseVoltage+0x9c>
 800a4c6:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a4ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a4ce:	145b      	asrs	r3, r3, #17
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	4413      	add	r3, r2
 800a4d6:	623b      	str	r3, [r7, #32]
      wTimePhC = wTimePhA - wY / 131072;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	da03      	bge.n	800a4e6 <PWMC_SetPhaseVoltage+0xb4>
 800a4de:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a4e2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a4e6:	145b      	asrs	r3, r3, #17
 800a4e8:	425b      	negs	r3, r3
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	4413      	add	r3, r2
 800a4f0:	61fb      	str	r3, [r7, #28]
      pHandle->lowDuty = wTimePhC;
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	879a      	strh	r2, [r3, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	87da      	strh	r2, [r3, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	b29a      	uxth	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800a50c:	e138      	b.n	800a780 <PWMC_SetPhaseVoltage+0x34e>
    }
    else /* wZ >= 0 */
      if ( wX <= 0 )
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	dc3c      	bgt.n	800a58e <PWMC_SetPhaseVoltage+0x15c>
      {
        pHandle->Sector = SECTOR_4;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2203      	movs	r2, #3
 800a518:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a522:	089b      	lsrs	r3, r3, #2
 800a524:	b29b      	uxth	r3, r3
 800a526:	4619      	mov	r1, r3
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	da03      	bge.n	800a53a <PWMC_SetPhaseVoltage+0x108>
 800a532:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800a536:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a53a:	149b      	asrs	r3, r3, #18
 800a53c:	440b      	add	r3, r1
 800a53e:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhB = wTimePhA + wZ / 131072;
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	da03      	bge.n	800a54e <PWMC_SetPhaseVoltage+0x11c>
 800a546:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a54a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a54e:	145b      	asrs	r3, r3, #17
 800a550:	461a      	mov	r2, r3
 800a552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a554:	4413      	add	r3, r2
 800a556:	623b      	str	r3, [r7, #32]
        wTimePhC = wTimePhB - wX / 131072;
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	da03      	bge.n	800a566 <PWMC_SetPhaseVoltage+0x134>
 800a55e:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a562:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a566:	145b      	asrs	r3, r3, #17
 800a568:	425b      	negs	r3, r3
 800a56a:	461a      	mov	r2, r3
 800a56c:	6a3b      	ldr	r3, [r7, #32]
 800a56e:	4413      	add	r3, r2
 800a570:	61fb      	str	r3, [r7, #28]
        pHandle->lowDuty = wTimePhC;
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	b29a      	uxth	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800a57a:	6a3b      	ldr	r3, [r7, #32]
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800a582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a584:	b29a      	uxth	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800a58c:	e0f8      	b.n	800a780 <PWMC_SetPhaseVoltage+0x34e>
      }
      else /* wX > 0 */
      {
        pHandle->Sector = SECTOR_3;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2202      	movs	r2, #2
 800a592:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a59c:	089b      	lsrs	r3, r3, #2
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	da03      	bge.n	800a5b4 <PWMC_SetPhaseVoltage+0x182>
 800a5ac:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800a5b0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a5b4:	149b      	asrs	r3, r3, #18
 800a5b6:	440b      	add	r3, r1
 800a5b8:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhC = wTimePhA - wY / 131072;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	da03      	bge.n	800a5c8 <PWMC_SetPhaseVoltage+0x196>
 800a5c0:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a5c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a5c8:	145b      	asrs	r3, r3, #17
 800a5ca:	425b      	negs	r3, r3
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d0:	4413      	add	r3, r2
 800a5d2:	61fb      	str	r3, [r7, #28]
        wTimePhB = wTimePhC + wX / 131072;
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	da03      	bge.n	800a5e2 <PWMC_SetPhaseVoltage+0x1b0>
 800a5da:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a5de:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a5e2:	145b      	asrs	r3, r3, #17
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	623b      	str	r3, [r7, #32]
        pHandle->lowDuty = wTimePhB;
 800a5ec:	6a3b      	ldr	r3, [r7, #32]
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800a606:	e0bb      	b.n	800a780 <PWMC_SetPhaseVoltage+0x34e>
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	db3c      	blt.n	800a688 <PWMC_SetPhaseVoltage+0x256>
    {
      pHandle->Sector = SECTOR_2;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a61c:	089b      	lsrs	r3, r3, #2
 800a61e:	b29b      	uxth	r3, r3
 800a620:	4619      	mov	r1, r3
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	2b00      	cmp	r3, #0
 800a62a:	da03      	bge.n	800a634 <PWMC_SetPhaseVoltage+0x202>
 800a62c:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800a630:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a634:	149b      	asrs	r3, r3, #18
 800a636:	440b      	add	r3, r1
 800a638:	627b      	str	r3, [r7, #36]	; 0x24
      wTimePhB = wTimePhA + wZ / 131072;
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	da03      	bge.n	800a648 <PWMC_SetPhaseVoltage+0x216>
 800a640:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a644:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a648:	145b      	asrs	r3, r3, #17
 800a64a:	461a      	mov	r2, r3
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	4413      	add	r3, r2
 800a650:	623b      	str	r3, [r7, #32]
      wTimePhC = wTimePhA - wY / 131072;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	da03      	bge.n	800a660 <PWMC_SetPhaseVoltage+0x22e>
 800a658:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a65c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a660:	145b      	asrs	r3, r3, #17
 800a662:	425b      	negs	r3, r3
 800a664:	461a      	mov	r2, r3
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	4413      	add	r3, r2
 800a66a:	61fb      	str	r3, [r7, #28]
      pHandle->lowDuty = wTimePhB;
 800a66c:	6a3b      	ldr	r3, [r7, #32]
 800a66e:	b29a      	uxth	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	879a      	strh	r2, [r3, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	b29a      	uxth	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	b29a      	uxth	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800a686:	e07b      	b.n	800a780 <PWMC_SetPhaseVoltage+0x34e>
    }
    else /* wZ < 0 */
      if ( wX <= 0 )
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	dc3c      	bgt.n	800a708 <PWMC_SetPhaseVoltage+0x2d6>
      {
        pHandle->Sector = SECTOR_6;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2205      	movs	r2, #5
 800a692:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a69c:	089b      	lsrs	r3, r3, #2
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	da03      	bge.n	800a6b4 <PWMC_SetPhaseVoltage+0x282>
 800a6ac:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800a6b0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a6b4:	149b      	asrs	r3, r3, #18
 800a6b6:	440b      	add	r3, r1
 800a6b8:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhC = wTimePhA - wY / 131072;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	da03      	bge.n	800a6c8 <PWMC_SetPhaseVoltage+0x296>
 800a6c0:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a6c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a6c8:	145b      	asrs	r3, r3, #17
 800a6ca:	425b      	negs	r3, r3
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	4413      	add	r3, r2
 800a6d2:	61fb      	str	r3, [r7, #28]
        wTimePhB = wTimePhC + wX / 131072;
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	da03      	bge.n	800a6e2 <PWMC_SetPhaseVoltage+0x2b0>
 800a6da:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a6de:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a6e2:	145b      	asrs	r3, r3, #17
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	623b      	str	r3, [r7, #32]
        pHandle->lowDuty = wTimePhA;
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800a706:	e03b      	b.n	800a780 <PWMC_SetPhaseVoltage+0x34e>
      }
      else /* wX > 0 */
      {
        pHandle->Sector = SECTOR_1;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a716:	089b      	lsrs	r3, r3, #2
 800a718:	b29b      	uxth	r3, r3
 800a71a:	4619      	mov	r1, r3
 800a71c:	693a      	ldr	r2, [r7, #16]
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	2b00      	cmp	r3, #0
 800a724:	da03      	bge.n	800a72e <PWMC_SetPhaseVoltage+0x2fc>
 800a726:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800a72a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a72e:	149b      	asrs	r3, r3, #18
 800a730:	440b      	add	r3, r1
 800a732:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhB = wTimePhA + wZ / 131072;
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	2b00      	cmp	r3, #0
 800a738:	da03      	bge.n	800a742 <PWMC_SetPhaseVoltage+0x310>
 800a73a:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a73e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a742:	145b      	asrs	r3, r3, #17
 800a744:	461a      	mov	r2, r3
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	4413      	add	r3, r2
 800a74a:	623b      	str	r3, [r7, #32]
        wTimePhC = wTimePhB - wX / 131072;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	da03      	bge.n	800a75a <PWMC_SetPhaseVoltage+0x328>
 800a752:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800a756:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a75a:	145b      	asrs	r3, r3, #17
 800a75c:	425b      	negs	r3, r3
 800a75e:	461a      	mov	r2, r3
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	4413      	add	r3, r2
 800a764:	61fb      	str	r3, [r7, #28]
        pHandle->lowDuty = wTimePhA;
 800a766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a768:	b29a      	uxth	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	b29a      	uxth	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	b29a      	uxth	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      }
  }

  pHandle->CntPhA = ( uint16_t )wTimePhA;
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	b29a      	uxth	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	865a      	strh	r2, [r3, #50]	; 0x32
  pHandle->CntPhB = ( uint16_t )wTimePhB;
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	869a      	strh	r2, [r3, #52]	; 0x34
  pHandle->CntPhC = ( uint16_t )wTimePhC;
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	b29a      	uxth	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	86da      	strh	r2, [r3, #54]	; 0x36

  if ( pHandle->DTTest == 1u )
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d147      	bne.n	800a832 <PWMC_SetPhaseVoltage+0x400>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	dd09      	ble.n	800a7c0 <PWMC_SetPhaseVoltage+0x38e>
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a7b6:	4413      	add	r3, r2
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	865a      	strh	r2, [r3, #50]	; 0x32
 800a7be:	e008      	b.n	800a7d2 <PWMC_SetPhaseVoltage+0x3a0>
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	865a      	strh	r2, [r3, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	dd09      	ble.n	800a7f0 <PWMC_SetPhaseVoltage+0x3be>
    {
      pHandle->CntPhB += pHandle->DTCompCnt;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a7e6:	4413      	add	r3, r2
 800a7e8:	b29a      	uxth	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	869a      	strh	r2, [r3, #52]	; 0x34
 800a7ee:	e008      	b.n	800a802 <PWMC_SetPhaseVoltage+0x3d0>
    }
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	869a      	strh	r2, [r3, #52]	; 0x34
    }

    if ( pHandle->Ic > 0 )
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dd09      	ble.n	800a820 <PWMC_SetPhaseVoltage+0x3ee>
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a816:	4413      	add	r3, r2
 800a818:	b29a      	uxth	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	86da      	strh	r2, [r3, #54]	; 0x36
 800a81e:	e008      	b.n	800a832 <PWMC_SetPhaseVoltage+0x400>
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	86da      	strh	r2, [r3, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	4798      	blx	r3
 800a83a:	4603      	mov	r3, r0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3728      	adds	r7, #40	; 0x28
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <PWMC_SwitchOffPWM>:
/**
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  pHandle->pFctSwitchOffPwm( pHandle );
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	4798      	blx	r3
}
 800a854:	bf00      	nop
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	70fb      	strb	r3, [r7, #3]
  bool retVal = false;
 800a868:	2300      	movs	r3, #0
 800a86a:	73fb      	strb	r3, [r7, #15]
  if ( action == CRC_START )
 800a86c:	78fb      	ldrb	r3, [r7, #3]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d114      	bne.n	800a89c <PWMC_CurrentReadingCalibr+0x40>
  {
    PWMC_SwitchOffPWM( pHandle );
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7ff ffe6 	bl	800a844 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d124      	bne.n	800a8d8 <PWMC_CurrentReadingCalibr+0x7c>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	4798      	blx	r3
      retVal = true;
 800a896:	2301      	movs	r3, #1
 800a898:	73fb      	strb	r3, [r7, #15]
 800a89a:	e01d      	b.n	800a8d8 <PWMC_CurrentReadingCalibr+0x7c>
    }
  }
  else if ( action == CRC_EXEC )
 800a89c:	78fb      	ldrb	r3, [r7, #3]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d11a      	bne.n	800a8d8 <PWMC_CurrentReadingCalibr+0x7c>
  {
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d013      	beq.n	800a8d4 <PWMC_CurrentReadingCalibr+0x78>
    {
      pHandle->OffCalibrWaitTimeCounter--;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d108      	bne.n	800a8d8 <PWMC_CurrentReadingCalibr+0x7c>
      {
        pHandle->pFctCurrReadingCalib( pHandle );
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	4798      	blx	r3
        retVal = true;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	73fb      	strb	r3, [r7, #15]
 800a8d2:	e001      	b.n	800a8d8 <PWMC_CurrentReadingCalibr+0x7c>
      }
    }
    else
    {
      retVal = true;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  else
  {
  }
  return retVal;
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <PWMC_CheckOverCurrent>:

/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b082      	sub	sp, #8
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	69db      	ldr	r3, [r3, #28]
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	4798      	blx	r3
 800a8f2:	4603      	mov	r3, r0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <LL_DBGMCU_APB2_GRP1_FreezePeriph>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800a904:	4b05      	ldr	r3, [pc, #20]	; (800a91c <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800a906:	68da      	ldr	r2, [r3, #12]
 800a908:	4904      	ldr	r1, [pc, #16]	; (800a91c <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	60cb      	str	r3, [r1, #12]
}
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	e0042000 	.word	0xe0042000

0800a920 <LL_ADC_INJ_SetSequencerDiscont>:
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	431a      	orrs	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	60da      	str	r2, [r3, #12]
}
 800a93a:	bf00      	nop
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <LL_ADC_INJ_SetQueueMode>:
{
 800a946:	b480      	push	{r7}
 800a948:	b083      	sub	sp, #12
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM, QueueMode);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	431a      	orrs	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	60da      	str	r2, [r3, #12]
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <LL_ADC_EnableInternalRegulator>:
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800a988:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a98c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	609a      	str	r2, [r3, #8]
}
 800a994:	bf00      	nop
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <LL_ADC_IsInternalRegulatorEnabled>:
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0)) == (ADC_CR_ADVREGEN_0));
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9b4:	bf0c      	ite	eq
 800a9b6:	2301      	moveq	r3, #1
 800a9b8:	2300      	movne	r3, #0
 800a9ba:	b2db      	uxtb	r3, r3
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <LL_ADC_Enable>:
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a9dc:	f043 0201 	orr.w	r2, r3, #1
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	609a      	str	r2, [r3, #8]
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <LL_ADC_IsEnabled>:
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	bf0c      	ite	eq
 800aa04:	2301      	moveq	r3, #1
 800aa06:	2300      	movne	r3, #0
 800aa08:	b2db      	uxtb	r3, r3
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	370c      	adds	r7, #12
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <LL_ADC_StartCalibration>:
{
 800aa16:	b480      	push	{r7}
 800aa18:	b083      	sub	sp, #12
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
 800aa1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800aa28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800aa32:	4313      	orrs	r3, r2
 800aa34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	609a      	str	r2, [r3, #8]
}
 800aa3c:	bf00      	nop
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <LL_ADC_IsCalibrationOnGoing>:
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa5c:	bf0c      	ite	eq
 800aa5e:	2301      	moveq	r3, #1
 800aa60:	2300      	movne	r3, #0
 800aa62:	b2db      	uxtb	r3, r3
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <LL_ADC_INJ_StartConversion>:
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800aa84:	f043 0208 	orr.w	r2, r3, #8
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	609a      	str	r2, [r3, #8]
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <LL_ADC_INJ_StopConversion>:
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aaa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800aaac:	f043 0220 	orr.w	r2, r3, #32
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	609a      	str	r2, [r3, #8]
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <LL_ADC_IsActiveFlag_ADRDY>:
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 0301 	and.w	r3, r3, #1
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	bf0c      	ite	eq
 800aad4:	2301      	moveq	r3, #1
 800aad6:	2300      	movne	r3, #0
 800aad8:	b2db      	uxtb	r3, r3
}
 800aada:	4618      	mov	r0, r3
 800aadc:	370c      	adds	r7, #12
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <LL_ADC_ClearFlag_EOC>:
{
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2204      	movs	r2, #4
 800aaf2:	601a      	str	r2, [r3, #0]
}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <LL_ADC_ClearFlag_JEOC>:
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2220      	movs	r2, #32
 800ab0c:	601a      	str	r2, [r3, #0]
}
 800ab0e:	bf00      	nop
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr

0800ab1a <LL_ADC_ClearFlag_JEOS>:
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b083      	sub	sp, #12
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2240      	movs	r2, #64	; 0x40
 800ab26:	601a      	str	r2, [r3, #0]
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <LL_ADC_EnableIT_JEOS>:
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	605a      	str	r2, [r3, #4]
}
 800ab48:	bf00      	nop
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <LL_ADC_DisableIT_EOC>:
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	f023 0204 	bic.w	r2, r3, #4
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	605a      	str	r2, [r3, #4]
}
 800ab68:	bf00      	nop
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <LL_ADC_DisableIT_JEOC>:
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f023 0220 	bic.w	r2, r3, #32
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	605a      	str	r2, [r3, #4]
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <LL_TIM_DisableCounter>:
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f023 0201 	bic.w	r2, r3, #1
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	601a      	str	r2, [r3, #0]
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <LL_TIM_SetCounter>:
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	683a      	ldr	r2, [r7, #0]
 800abc2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <LL_TIM_SetRepetitionCounter>:
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	631a      	str	r2, [r3, #48]	; 0x30
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <LL_TIM_CC_EnableChannel>:
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a1a      	ldr	r2, [r3, #32]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	431a      	orrs	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	621a      	str	r2, [r3, #32]
}
 800ac02:	bf00      	nop
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <LL_TIM_CC_DisableChannel>:
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b083      	sub	sp, #12
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a1a      	ldr	r2, [r3, #32]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	43db      	mvns	r3, r3
 800ac20:	401a      	ands	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	621a      	str	r2, [r3, #32]
}
 800ac26:	bf00      	nop
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
	...

0800ac34 <LL_TIM_OC_SetMode>:
{
 800ac34:	b4b0      	push	{r4, r5, r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d028      	beq.n	800ac98 <LL_TIM_OC_SetMode+0x64>
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	2b04      	cmp	r3, #4
 800ac4a:	d023      	beq.n	800ac94 <LL_TIM_OC_SetMode+0x60>
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2b10      	cmp	r3, #16
 800ac50:	d01e      	beq.n	800ac90 <LL_TIM_OC_SetMode+0x5c>
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	2b40      	cmp	r3, #64	; 0x40
 800ac56:	d019      	beq.n	800ac8c <LL_TIM_OC_SetMode+0x58>
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac5e:	d013      	beq.n	800ac88 <LL_TIM_OC_SetMode+0x54>
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac66:	d00d      	beq.n	800ac84 <LL_TIM_OC_SetMode+0x50>
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac6e:	d007      	beq.n	800ac80 <LL_TIM_OC_SetMode+0x4c>
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac76:	d101      	bne.n	800ac7c <LL_TIM_OC_SetMode+0x48>
 800ac78:	2307      	movs	r3, #7
 800ac7a:	e00e      	b.n	800ac9a <LL_TIM_OC_SetMode+0x66>
 800ac7c:	2308      	movs	r3, #8
 800ac7e:	e00c      	b.n	800ac9a <LL_TIM_OC_SetMode+0x66>
 800ac80:	2306      	movs	r3, #6
 800ac82:	e00a      	b.n	800ac9a <LL_TIM_OC_SetMode+0x66>
 800ac84:	2305      	movs	r3, #5
 800ac86:	e008      	b.n	800ac9a <LL_TIM_OC_SetMode+0x66>
 800ac88:	2304      	movs	r3, #4
 800ac8a:	e006      	b.n	800ac9a <LL_TIM_OC_SetMode+0x66>
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	e004      	b.n	800ac9a <LL_TIM_OC_SetMode+0x66>
 800ac90:	2302      	movs	r3, #2
 800ac92:	e002      	b.n	800ac9a <LL_TIM_OC_SetMode+0x66>
 800ac94:	2301      	movs	r3, #1
 800ac96:	e000      	b.n	800ac9a <LL_TIM_OC_SetMode+0x66>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	3318      	adds	r3, #24
 800aca0:	461a      	mov	r2, r3
 800aca2:	4629      	mov	r1, r5
 800aca4:	4b0c      	ldr	r3, [pc, #48]	; (800acd8 <LL_TIM_OC_SetMode+0xa4>)
 800aca6:	5c5b      	ldrb	r3, [r3, r1]
 800aca8:	4413      	add	r3, r2
 800acaa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800acac:	6822      	ldr	r2, [r4, #0]
 800acae:	4629      	mov	r1, r5
 800acb0:	4b0a      	ldr	r3, [pc, #40]	; (800acdc <LL_TIM_OC_SetMode+0xa8>)
 800acb2:	5c5b      	ldrb	r3, [r3, r1]
 800acb4:	4619      	mov	r1, r3
 800acb6:	4b0a      	ldr	r3, [pc, #40]	; (800ace0 <LL_TIM_OC_SetMode+0xac>)
 800acb8:	408b      	lsls	r3, r1
 800acba:	43db      	mvns	r3, r3
 800acbc:	401a      	ands	r2, r3
 800acbe:	4629      	mov	r1, r5
 800acc0:	4b06      	ldr	r3, [pc, #24]	; (800acdc <LL_TIM_OC_SetMode+0xa8>)
 800acc2:	5c5b      	ldrb	r3, [r3, r1]
 800acc4:	4619      	mov	r1, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	408b      	lsls	r3, r1
 800acca:	4313      	orrs	r3, r2
 800accc:	6023      	str	r3, [r4, #0]
}
 800acce:	bf00      	nop
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bcb0      	pop	{r4, r5, r7}
 800acd6:	4770      	bx	lr
 800acd8:	0800edd4 	.word	0x0800edd4
 800acdc:	0800ede0 	.word	0x0800ede0
 800ace0:	00010073 	.word	0x00010073

0800ace4 <LL_TIM_OC_EnablePreload>:
{
 800ace4:	b4b0      	push	{r4, r5, r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d028      	beq.n	800ad46 <LL_TIM_OC_EnablePreload+0x62>
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	2b04      	cmp	r3, #4
 800acf8:	d023      	beq.n	800ad42 <LL_TIM_OC_EnablePreload+0x5e>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b10      	cmp	r3, #16
 800acfe:	d01e      	beq.n	800ad3e <LL_TIM_OC_EnablePreload+0x5a>
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b40      	cmp	r3, #64	; 0x40
 800ad04:	d019      	beq.n	800ad3a <LL_TIM_OC_EnablePreload+0x56>
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad0c:	d013      	beq.n	800ad36 <LL_TIM_OC_EnablePreload+0x52>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad14:	d00d      	beq.n	800ad32 <LL_TIM_OC_EnablePreload+0x4e>
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad1c:	d007      	beq.n	800ad2e <LL_TIM_OC_EnablePreload+0x4a>
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad24:	d101      	bne.n	800ad2a <LL_TIM_OC_EnablePreload+0x46>
 800ad26:	2307      	movs	r3, #7
 800ad28:	e00e      	b.n	800ad48 <LL_TIM_OC_EnablePreload+0x64>
 800ad2a:	2308      	movs	r3, #8
 800ad2c:	e00c      	b.n	800ad48 <LL_TIM_OC_EnablePreload+0x64>
 800ad2e:	2306      	movs	r3, #6
 800ad30:	e00a      	b.n	800ad48 <LL_TIM_OC_EnablePreload+0x64>
 800ad32:	2305      	movs	r3, #5
 800ad34:	e008      	b.n	800ad48 <LL_TIM_OC_EnablePreload+0x64>
 800ad36:	2304      	movs	r3, #4
 800ad38:	e006      	b.n	800ad48 <LL_TIM_OC_EnablePreload+0x64>
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	e004      	b.n	800ad48 <LL_TIM_OC_EnablePreload+0x64>
 800ad3e:	2302      	movs	r3, #2
 800ad40:	e002      	b.n	800ad48 <LL_TIM_OC_EnablePreload+0x64>
 800ad42:	2301      	movs	r3, #1
 800ad44:	e000      	b.n	800ad48 <LL_TIM_OC_EnablePreload+0x64>
 800ad46:	2300      	movs	r3, #0
 800ad48:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	3318      	adds	r3, #24
 800ad4e:	461a      	mov	r2, r3
 800ad50:	4629      	mov	r1, r5
 800ad52:	4b09      	ldr	r3, [pc, #36]	; (800ad78 <LL_TIM_OC_EnablePreload+0x94>)
 800ad54:	5c5b      	ldrb	r3, [r3, r1]
 800ad56:	4413      	add	r3, r2
 800ad58:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800ad5a:	6822      	ldr	r2, [r4, #0]
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	4b07      	ldr	r3, [pc, #28]	; (800ad7c <LL_TIM_OC_EnablePreload+0x98>)
 800ad60:	5c5b      	ldrb	r3, [r3, r1]
 800ad62:	4619      	mov	r1, r3
 800ad64:	2308      	movs	r3, #8
 800ad66:	408b      	lsls	r3, r1
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	6023      	str	r3, [r4, #0]
}
 800ad6c:	bf00      	nop
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bcb0      	pop	{r4, r5, r7}
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	0800edd4 	.word	0x0800edd4
 800ad7c:	0800ede0 	.word	0x0800ede0

0800ad80 <LL_TIM_OC_DisablePreload>:
{
 800ad80:	b4b0      	push	{r4, r5, r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d028      	beq.n	800ade2 <LL_TIM_OC_DisablePreload+0x62>
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	2b04      	cmp	r3, #4
 800ad94:	d023      	beq.n	800adde <LL_TIM_OC_DisablePreload+0x5e>
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	2b10      	cmp	r3, #16
 800ad9a:	d01e      	beq.n	800adda <LL_TIM_OC_DisablePreload+0x5a>
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	2b40      	cmp	r3, #64	; 0x40
 800ada0:	d019      	beq.n	800add6 <LL_TIM_OC_DisablePreload+0x56>
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ada8:	d013      	beq.n	800add2 <LL_TIM_OC_DisablePreload+0x52>
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adb0:	d00d      	beq.n	800adce <LL_TIM_OC_DisablePreload+0x4e>
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adb8:	d007      	beq.n	800adca <LL_TIM_OC_DisablePreload+0x4a>
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adc0:	d101      	bne.n	800adc6 <LL_TIM_OC_DisablePreload+0x46>
 800adc2:	2307      	movs	r3, #7
 800adc4:	e00e      	b.n	800ade4 <LL_TIM_OC_DisablePreload+0x64>
 800adc6:	2308      	movs	r3, #8
 800adc8:	e00c      	b.n	800ade4 <LL_TIM_OC_DisablePreload+0x64>
 800adca:	2306      	movs	r3, #6
 800adcc:	e00a      	b.n	800ade4 <LL_TIM_OC_DisablePreload+0x64>
 800adce:	2305      	movs	r3, #5
 800add0:	e008      	b.n	800ade4 <LL_TIM_OC_DisablePreload+0x64>
 800add2:	2304      	movs	r3, #4
 800add4:	e006      	b.n	800ade4 <LL_TIM_OC_DisablePreload+0x64>
 800add6:	2303      	movs	r3, #3
 800add8:	e004      	b.n	800ade4 <LL_TIM_OC_DisablePreload+0x64>
 800adda:	2302      	movs	r3, #2
 800addc:	e002      	b.n	800ade4 <LL_TIM_OC_DisablePreload+0x64>
 800adde:	2301      	movs	r3, #1
 800ade0:	e000      	b.n	800ade4 <LL_TIM_OC_DisablePreload+0x64>
 800ade2:	2300      	movs	r3, #0
 800ade4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	3318      	adds	r3, #24
 800adea:	461a      	mov	r2, r3
 800adec:	4629      	mov	r1, r5
 800adee:	4b09      	ldr	r3, [pc, #36]	; (800ae14 <LL_TIM_OC_DisablePreload+0x94>)
 800adf0:	5c5b      	ldrb	r3, [r3, r1]
 800adf2:	4413      	add	r3, r2
 800adf4:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800adf6:	6822      	ldr	r2, [r4, #0]
 800adf8:	4629      	mov	r1, r5
 800adfa:	4b07      	ldr	r3, [pc, #28]	; (800ae18 <LL_TIM_OC_DisablePreload+0x98>)
 800adfc:	5c5b      	ldrb	r3, [r3, r1]
 800adfe:	4619      	mov	r1, r3
 800ae00:	2308      	movs	r3, #8
 800ae02:	408b      	lsls	r3, r1
 800ae04:	43db      	mvns	r3, r3
 800ae06:	4013      	ands	r3, r2
 800ae08:	6023      	str	r3, [r4, #0]
}
 800ae0a:	bf00      	nop
 800ae0c:	370c      	adds	r7, #12
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bcb0      	pop	{r4, r5, r7}
 800ae12:	4770      	bx	lr
 800ae14:	0800edd4 	.word	0x0800edd4
 800ae18:	0800ede0 	.word	0x0800ede0

0800ae1c <LL_TIM_OC_SetCompareCH1>:
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800ae2c:	bf00      	nop
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <LL_TIM_OC_SetCompareCH2>:
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <LL_TIM_OC_SetCompareCH3>:
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <LL_TIM_OC_SetCompareCH4>:
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	683a      	ldr	r2, [r7, #0]
 800ae7e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ae80:	bf00      	nop
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <LL_TIM_SetTriggerOutput>:
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	431a      	orrs	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	605a      	str	r2, [r3, #4]
}
 800aea6:	bf00      	nop
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr

0800aeb2 <LL_TIM_EnableAllOutputs>:
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b083      	sub	sp, #12
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aebe:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	645a      	str	r2, [r3, #68]	; 0x44
}
 800aec6:	bf00      	nop
 800aec8:	370c      	adds	r7, #12
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr

0800aed2 <LL_TIM_DisableAllOutputs>:
{
 800aed2:	b480      	push	{r7}
 800aed4:	b083      	sub	sp, #12
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aede:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	645a      	str	r2, [r3, #68]	; 0x44
}
 800aee6:	bf00      	nop
 800aee8:	370c      	adds	r7, #12
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <LL_TIM_ClearFlag_UPDATE>:
{
 800aef2:	b480      	push	{r7}
 800aef4:	b083      	sub	sp, #12
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f06f 0201 	mvn.w	r2, #1
 800af00:	611a      	str	r2, [r3, #16]
}
 800af02:	bf00      	nop
 800af04:	370c      	adds	r7, #12
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr

0800af0e <LL_TIM_IsActiveFlag_UPDATE>:
{
 800af0e:	b480      	push	{r7}
 800af10:	b083      	sub	sp, #12
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	f003 0301 	and.w	r3, r3, #1
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d101      	bne.n	800af26 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800af22:	2301      	movs	r3, #1
 800af24:	e000      	b.n	800af28 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <LL_TIM_ClearFlag_BRK>:
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af42:	611a      	str	r2, [r3, #16]
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <LL_TIM_ClearFlag_BRK2>:
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800af5e:	611a      	str	r2, [r3, #16]
}
 800af60:	bf00      	nop
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <LL_TIM_IsActiveFlag_BRK2>:
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af80:	d101      	bne.n	800af86 <LL_TIM_IsActiveFlag_BRK2+0x1a>
 800af82:	2301      	movs	r3, #1
 800af84:	e000      	b.n	800af88 <LL_TIM_IsActiveFlag_BRK2+0x1c>
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <LL_TIM_EnableIT_UPDATE>:
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	f043 0201 	orr.w	r2, r3, #1
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	60da      	str	r2, [r3, #12]
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <LL_TIM_DisableIT_UPDATE>:
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	f023 0201 	bic.w	r2, r3, #1
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	60da      	str	r2, [r3, #12]
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <LL_TIM_EnableIT_BRK>:
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	60da      	str	r2, [r3, #12]
}
 800afe8:	bf00      	nop
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <LL_TIM_GenerateEvent_UPDATE>:
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	f043 0201 	orr.w	r2, r3, #1
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	615a      	str	r2, [r3, #20]
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	683a      	ldr	r2, [r7, #0]
 800b022:	619a      	str	r2, [r3, #24]
}
 800b024:	bf00      	nop
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b040:	bf00      	nop
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <LL_DAC_Enable>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	f003 0310 	and.w	r3, r3, #16
 800b060:	2101      	movs	r1, #1
 800b062:	fa01 f303 	lsl.w	r3, r1, r3
 800b066:	431a      	orrs	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <LL_DAC_IsEnabled>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DAC_IsEnabled(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	f003 0310 	and.w	r3, r3, #16
 800b08c:	2101      	movs	r1, #1
 800b08e:	fa01 f303 	lsl.w	r3, r1, r3
 800b092:	401a      	ands	r2, r3
                   DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	f003 0310 	and.w	r3, r3, #16
 800b09a:	2101      	movs	r1, #1
 800b09c:	fa01 f303 	lsl.w	r3, r1, r3
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	bf0c      	ite	eq
 800b0a4:	2301      	moveq	r3, #1
 800b0a6:	2300      	movne	r3, #0
 800b0a8:	b2db      	uxtb	r3, r3
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	370c      	adds	r7, #12
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <LL_DAC_TrigSWConversion>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_TrigSWConversion(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	b083      	sub	sp, #12
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->SWTRIGR,
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	685a      	ldr	r2, [r3, #4]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	f003 0303 	and.w	r3, r3, #3
 800b0ca:	431a      	orrs	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	605a      	str	r2, [r3, #4]
          (DAC_Channel & DAC_SWTR_CHX_MASK));
}
 800b0d0:	bf00      	nop
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <LL_DAC_ConvertData12LeftAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 800b0dc:	b490      	push	{r4, r7}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	3308      	adds	r3, #8
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800b0f4:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800b0f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	fa92 f2a2 	rbit	r2, r2
 800b100:	613a      	str	r2, [r7, #16]
  return result;
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	fab2 f282 	clz	r2, r2
 800b108:	b2d2      	uxtb	r2, r2
 800b10a:	40d3      	lsrs	r3, r2
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	440b      	add	r3, r1
 800b110:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	4313      	orrs	r3, r2
 800b120:	6023      	str	r3, [r4, #0]
             DAC_DHR12L1_DACC1DHR,
             Data);
}
 800b122:	bf00      	nop
 800b124:	3718      	adds	r7, #24
 800b126:	46bd      	mov	sp, r7
 800b128:	bc90      	pop	{r4, r7}
 800b12a:	4770      	bx	lr

0800b12c <LL_COMP_GetInputMinus>:
  *         (1) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302x6/8, STM32F303x6/8, STM32F328xx, STM32F334xx.\n
  *         (2) Parameter available only on devices STM32F303x6/8, STM32F328x8, STM32F334xx.\n
  *         (3) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302xx.\n
  */
__STATIC_INLINE uint32_t LL_COMP_GetInputMinus(COMP_TypeDef *COMPx)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <LL_COMP_Enable>:
  * @rmtoll CSR      COMPxEN        LL_COMP_Enable
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f043 0201 	orr.w	r2, r3, #1
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	601a      	str	r2, [r3, #0]
}
 800b15c:	bf00      	nop
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <LL_COMP_Lock>:
  * @rmtoll CSR      COMPxLOCK      LL_COMP_Lock
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	601a      	str	r2, [r3, #0]
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <R3_1_Init>:
  *         in three shunt topology using STM32F30X and shared ADC
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_Init( PWMC_R3_1_Handle_t * pHandle )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b088      	sub	sp, #32
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	61fb      	str	r3, [r7, #28]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	61bb      	str	r3, [r7, #24]
  COMP_TypeDef * COMP_OCPCx = pHandle->pParams_str->CompOCPCSelection;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	617b      	str	r3, [r7, #20]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	613b      	str	r3, [r7, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	60bb      	str	r3, [r7, #8]

  /*Check that _Super is the first member of the structure PWMC_R3_1_Handle_t */
  if ( ( uint32_t )pHandle == ( uint32_t )&pHandle->_Super )
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	f040 8095 	bne.w	800b2f6 <R3_1_Init+0x16e>
  {
    /* disable IT and flags in case of LL driver usage
     * workaround for unwanted interrupt enabling done by LL driver */
    LL_ADC_DisableIT_EOC( ADCx );
 800b1cc:	68b8      	ldr	r0, [r7, #8]
 800b1ce:	f7ff fcc1 	bl	800ab54 <LL_ADC_DisableIT_EOC>
    LL_ADC_ClearFlag_EOC( ADCx );
 800b1d2:	68b8      	ldr	r0, [r7, #8]
 800b1d4:	f7ff fc87 	bl	800aae6 <LL_ADC_ClearFlag_EOC>
    LL_ADC_DisableIT_JEOC( ADCx );
 800b1d8:	68b8      	ldr	r0, [r7, #8]
 800b1da:	f7ff fccb 	bl	800ab74 <LL_ADC_DisableIT_JEOC>
    LL_ADC_ClearFlag_JEOC( ADCx );
 800b1de:	68b8      	ldr	r0, [r7, #8]
 800b1e0:	f7ff fc8e 	bl	800ab00 <LL_ADC_ClearFlag_JEOC>

    if ( TIMx == TIM1 )
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	4a46      	ldr	r2, [pc, #280]	; (800b300 <R3_1_Init+0x178>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d103      	bne.n	800b1f4 <R3_1_Init+0x6c>
    {
      /* TIM1 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM1_STOP );
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	f7ff fb85 	bl	800a8fc <LL_DBGMCU_APB2_GRP1_FreezePeriph>
 800b1f2:	e002      	b.n	800b1fa <R3_1_Init+0x72>
    }
#ifdef TIM8    
    else
    {
      /* TIM8 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM8_STOP );
 800b1f4:	2002      	movs	r0, #2
 800b1f6:	f7ff fb81 	bl	800a8fc <LL_DBGMCU_APB2_GRP1_FreezePeriph>
    }
#endif
    /* Over current protection phase A */
    if ( COMP_OCPAx != NULL )
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d028      	beq.n	800b252 <R3_1_Init+0xca>
    {
      /* Inverting input*/
      if ( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b204:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d01c      	beq.n	800b246 <R3_1_Init+0xbe>
      {
        if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 800b20c:	69f8      	ldr	r0, [r7, #28]
 800b20e:	f7ff ff8d 	bl	800b12c <LL_COMP_GetInputMinus>
 800b212:	4603      	mov	r3, r0
 800b214:	2b40      	cmp	r3, #64	; 0x40
 800b216:	d108      	bne.n	800b22a <R3_1_Init+0xa2>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_1, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b21c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800b220:	4619      	mov	r1, r3
 800b222:	4838      	ldr	r0, [pc, #224]	; (800b304 <R3_1_Init+0x17c>)
 800b224:	f000 fe48 	bl	800beb8 <R3_1_SetAOReferenceVoltage>
 800b228:	e00d      	b.n	800b246 <R3_1_Init+0xbe>
        }
#if defined(DAC_CHANNEL2_SUPPORT)
        else if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH2 )
 800b22a:	69f8      	ldr	r0, [r7, #28]
 800b22c:	f7ff ff7e 	bl	800b12c <LL_COMP_GetInputMinus>
 800b230:	4603      	mov	r3, r0
 800b232:	2b50      	cmp	r3, #80	; 0x50
 800b234:	d107      	bne.n	800b246 <R3_1_Init+0xbe>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_2, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b23a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800b23e:	4619      	mov	r1, r3
 800b240:	4831      	ldr	r0, [pc, #196]	; (800b308 <R3_1_Init+0x180>)
 800b242:	f000 fe39 	bl	800beb8 <R3_1_SetAOReferenceVoltage>
        else
        {
        }
      }
      /* Output */
      LL_COMP_Enable ( COMP_OCPAx );
 800b246:	69f8      	ldr	r0, [r7, #28]
 800b248:	f7ff ff7e 	bl	800b148 <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPAx );
 800b24c:	69f8      	ldr	r0, [r7, #28]
 800b24e:	f7ff ff8b 	bl	800b168 <LL_COMP_Lock>
    }

    /* Over current protection phase B */
    if ( COMP_OCPBx != NULL )
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d005      	beq.n	800b264 <R3_1_Init+0xdc>
    {
      LL_COMP_Enable ( COMP_OCPBx );
 800b258:	69b8      	ldr	r0, [r7, #24]
 800b25a:	f7ff ff75 	bl	800b148 <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPBx );
 800b25e:	69b8      	ldr	r0, [r7, #24]
 800b260:	f7ff ff82 	bl	800b168 <LL_COMP_Lock>
    }

    /* Over current protection phase C */
    if ( COMP_OCPCx != NULL )
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d005      	beq.n	800b276 <R3_1_Init+0xee>
    {
      LL_COMP_Enable ( COMP_OCPCx );
 800b26a:	6978      	ldr	r0, [r7, #20]
 800b26c:	f7ff ff6c 	bl	800b148 <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPCx );
 800b270:	6978      	ldr	r0, [r7, #20]
 800b272:	f7ff ff79 	bl	800b168 <LL_COMP_Lock>
    }

    /* Over voltage protection */
    if ( COMP_OVPx != NULL )
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d028      	beq.n	800b2ce <R3_1_Init+0x146>
    {
      /* Inverting input*/
      if ( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE )
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b280:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b284:	2b01      	cmp	r3, #1
 800b286:	d01c      	beq.n	800b2c2 <R3_1_Init+0x13a>
      {
        if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 800b288:	6938      	ldr	r0, [r7, #16]
 800b28a:	f7ff ff4f 	bl	800b12c <LL_COMP_GetInputMinus>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b40      	cmp	r3, #64	; 0x40
 800b292:	d108      	bne.n	800b2a6 <R3_1_Init+0x11e>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_1, ( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b298:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800b29c:	4619      	mov	r1, r3
 800b29e:	4819      	ldr	r0, [pc, #100]	; (800b304 <R3_1_Init+0x17c>)
 800b2a0:	f000 fe0a 	bl	800beb8 <R3_1_SetAOReferenceVoltage>
 800b2a4:	e00d      	b.n	800b2c2 <R3_1_Init+0x13a>
        }
#if defined(DAC_CHANNEL2_SUPPORT)
        else if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH2 )
 800b2a6:	6938      	ldr	r0, [r7, #16]
 800b2a8:	f7ff ff40 	bl	800b12c <LL_COMP_GetInputMinus>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b50      	cmp	r3, #80	; 0x50
 800b2b0:	d107      	bne.n	800b2c2 <R3_1_Init+0x13a>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_2, ( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2b6:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	4812      	ldr	r0, [pc, #72]	; (800b308 <R3_1_Init+0x180>)
 800b2be:	f000 fdfb 	bl	800beb8 <R3_1_SetAOReferenceVoltage>
        else
        {
        }
      }
      /* Output */
      LL_COMP_Enable ( COMP_OVPx );
 800b2c2:	6938      	ldr	r0, [r7, #16]
 800b2c4:	f7ff ff40 	bl	800b148 <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OVPx );
 800b2c8:	6938      	ldr	r0, [r7, #16]
 800b2ca:	f7ff ff4d 	bl	800b168 <LL_COMP_Lock>
    }
    
    if (LL_ADC_IsEnabled (ADCx) == 0)
 800b2ce:	68b8      	ldr	r0, [r7, #8]
 800b2d0:	f7ff fb8e 	bl	800a9f0 <LL_ADC_IsEnabled>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d108      	bne.n	800b2ec <R3_1_Init+0x164>
    {
      R3_1_ADCxInit (ADCx);
 800b2da:	68b8      	ldr	r0, [r7, #8]
 800b2dc:	f000 f816 	bl	800b30c <R3_1_ADCxInit>
      /* Only the Interrupt of the first ADC is enabled. 
       * As Both ADCs are fired by HW at the same moment 
       * It is safe to consider that both conversion are ready at the same time*/
      LL_ADC_ClearFlag_JEOS( ADCx );
 800b2e0:	68b8      	ldr	r0, [r7, #8]
 800b2e2:	f7ff fc1a 	bl	800ab1a <LL_ADC_ClearFlag_JEOS>
      LL_ADC_EnableIT_JEOS( ADCx );
 800b2e6:	68b8      	ldr	r0, [r7, #8]
 800b2e8:	f7ff fc24 	bl	800ab34 <LL_ADC_EnableIT_JEOS>
    }
    else 
    {
      /* Nothing to do ADCx_1 already configured */
    }
    R3_1_TIMxInit( TIMx, &pHandle->_Super );
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	f000 f84f 	bl	800b394 <R3_1_TIMxInit>
  }
}
 800b2f6:	bf00      	nop
 800b2f8:	3720      	adds	r7, #32
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	40012c00 	.word	0x40012c00
 800b304:	02100001 	.word	0x02100001
 800b308:	15430012 	.word	0x15430012

0800b30c <R3_1_ADCxInit>:

static void R3_1_ADCxInit( ADC_TypeDef * ADCx )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
     
  if ( LL_ADC_IsInternalRegulatorEnabled(ADCx) == 0u)
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7ff fb43 	bl	800a9a0 <LL_ADC_IsInternalRegulatorEnabled>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d111      	bne.n	800b344 <R3_1_ADCxInit+0x38>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(ADCx);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f7ff fb23 	bl	800a96c <LL_ADC_EnableInternalRegulator>
  
    /* Wait for Regulator Startup time */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 800b326:	4b19      	ldr	r3, [pc, #100]	; (800b38c <R3_1_ADCxInit+0x80>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	099b      	lsrs	r3, r3, #6
 800b32c:	4a18      	ldr	r2, [pc, #96]	; (800b390 <R3_1_ADCxInit+0x84>)
 800b32e:	fba2 2303 	umull	r2, r3, r2, r3
 800b332:	099b      	lsrs	r3, r3, #6
 800b334:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800b336:	e002      	b.n	800b33e <R3_1_ADCxInit+0x32>
    {
      wait_loop_index--;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1f9      	bne.n	800b338 <R3_1_ADCxInit+0x2c>
    }
  }
  
  LL_ADC_StartCalibration( ADCx, LL_ADC_SINGLE_ENDED );
 800b344:	217f      	movs	r1, #127	; 0x7f
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7ff fb65 	bl	800aa16 <LL_ADC_StartCalibration>
  while ( LL_ADC_IsCalibrationOnGoing( ADCx) == 1u) 
 800b34c:	bf00      	nop
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7ff fb7a 	bl	800aa48 <LL_ADC_IsCalibrationOnGoing>
 800b354:	4603      	mov	r3, r0
 800b356:	2b01      	cmp	r3, #1
 800b358:	d0f9      	beq.n	800b34e <R3_1_ADCxInit+0x42>
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800b35a:	e002      	b.n	800b362 <R3_1_ADCxInit+0x56>
  { 
    LL_ADC_Enable(  ADCx );
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff fb33 	bl	800a9c8 <LL_ADC_Enable>
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7ff fbac 	bl	800aac0 <LL_ADC_IsActiveFlag_ADRDY>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d0f6      	beq.n	800b35c <R3_1_ADCxInit+0x50>
  }
  /* Clear JSQR from CubeMX setting to avoid not wanting conversion*/
  LL_ADC_INJ_StartConversion( ADCx ); 
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7ff fb7e 	bl	800aa70 <LL_ADC_INJ_StartConversion>
  LL_ADC_INJ_StopConversion(ADCx);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7ff fb8f 	bl	800aa98 <LL_ADC_INJ_StopConversion>
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );
 800b37a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7ff fae1 	bl	800a946 <LL_ADC_INJ_SetQueueMode>
 }
 800b384:	bf00      	nop
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	20000690 	.word	0x20000690
 800b390:	053e2d63 	.word	0x053e2d63

0800b394 <R3_1_TIMxInit>:
  * @param TIMx: Timer to be initialized
  * @param pHandle: handler of the current instance of the PWM component
  * @retval none
  */
static void R3_1_TIMxInit( TIM_TypeDef * TIMx, PWMC_Handle_t * pHdl )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	60bb      	str	r3, [r7, #8]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  uint32_t Brk2Timeout = 1000;
 800b3a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3a6:	60fb      	str	r3, [r7, #12]

  /* disable main TIM counter to ensure
   * a synchronous start by TIM2 trigger */
  LL_TIM_DisableCounter( TIMx );
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f7ff fbf3 	bl	800ab94 <LL_TIM_DisableCounter>
  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7ff fd6b 	bl	800ae8c <LL_TIM_SetTriggerOutput>

  /* Enables the TIMx Preload on CC1 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH1 );
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f7ff fc93 	bl	800ace4 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC2 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH2 );
 800b3be:	2110      	movs	r1, #16
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f7ff fc8f 	bl	800ace4 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC3 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH3 );
 800b3c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7ff fc8a 	bl	800ace4 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC4 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH4 );
 800b3d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f7ff fc85 	bl	800ace4 <LL_TIM_OC_EnablePreload>
  /* Prepare timer for synchronization */
  LL_TIM_GenerateEvent_UPDATE( TIMx );
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7ff fe0a 	bl	800aff4 <LL_TIM_GenerateEvent_UPDATE>
  if ( pHandle->pParams_str->FreqRatio == 2u )
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d11f      	bne.n	800b42c <R3_1_TIMxInit+0x98>
  {
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3f0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d110      	bne.n	800b41a <R3_1_TIMxInit+0x86>
    {
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3fc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800b400:	2b03      	cmp	r3, #3
 800b402:	d10a      	bne.n	800b41a <R3_1_TIMxInit+0x86>
      {
        /* Set TIMx repetition counter to 1 */
        LL_TIM_SetRepetitionCounter( TIMx, 1 );
 800b404:	2101      	movs	r1, #1
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f7ff fbe2 	bl	800abd0 <LL_TIM_SetRepetitionCounter>
        LL_TIM_GenerateEvent_UPDATE( TIMx );
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f7ff fdf1 	bl	800aff4 <LL_TIM_GenerateEvent_UPDATE>
        /* Repetition counter will be set to 3 at next Update */
        LL_TIM_SetRepetitionCounter( TIMx, 3 );
 800b412:	2103      	movs	r1, #3
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff fbdb 	bl	800abd0 <LL_TIM_SetRepetitionCounter>
      }
    }
    LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b420:	3b01      	subs	r3, #1
 800b422:	4619      	mov	r1, r3
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7ff fbc5 	bl	800abb4 <LL_TIM_SetCounter>
 800b42a:	e024      	b.n	800b476 <R3_1_TIMxInit+0xe2>
  }
  else /* bFreqRatio equal to 1 or 3 */
  {
    if ( pHandle->_Super.Motor == M1 )
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b432:	2b00      	cmp	r3, #0
 800b434:	d11f      	bne.n	800b476 <R3_1_TIMxInit+0xe2>
    {
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b43a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d108      	bne.n	800b454 <R3_1_TIMxInit+0xc0>
      {
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b448:	3b01      	subs	r3, #1
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7ff fbb1 	bl	800abb4 <LL_TIM_SetCounter>
 800b452:	e010      	b.n	800b476 <R3_1_TIMxInit+0xe2>
      }
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b458:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d10a      	bne.n	800b476 <R3_1_TIMxInit+0xe2>
      {
        /* Set TIMx repetition counter to 1 */
        LL_TIM_SetRepetitionCounter( TIMx, 1 );
 800b460:	2101      	movs	r1, #1
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff fbb4 	bl	800abd0 <LL_TIM_SetRepetitionCounter>
        LL_TIM_GenerateEvent_UPDATE( TIMx );
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7ff fdc3 	bl	800aff4 <LL_TIM_GenerateEvent_UPDATE>
        /* Repetition counter will be set to 3 at next Update */
        LL_TIM_SetRepetitionCounter( TIMx, 3 );
 800b46e:	2103      	movs	r1, #3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7ff fbad 	bl	800abd0 <LL_TIM_SetRepetitionCounter>
    }
    else
    {
    }
  }
  LL_TIM_ClearFlag_BRK( TIMx );
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7ff fd5c 	bl	800af34 <LL_TIM_ClearFlag_BRK>
  
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b480:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00f      	beq.n	800b4a8 <R3_1_TIMxInit+0x114>
  {
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800b488:	e005      	b.n	800b496 <R3_1_TIMxInit+0x102>
    {
      LL_TIM_ClearFlag_BRK2( TIMx );
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7ff fd60 	bl	800af50 <LL_TIM_ClearFlag_BRK2>
      Brk2Timeout--;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3b01      	subs	r3, #1
 800b494:	60fb      	str	r3, [r7, #12]
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7ff fd68 	bl	800af6c <LL_TIM_IsActiveFlag_BRK2>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d102      	bne.n	800b4a8 <R3_1_TIMxInit+0x114>
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1f0      	bne.n	800b48a <R3_1_TIMxInit+0xf6>
    }   
  }
  LL_TIM_EnableIT_BRK( TIMx );
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f7ff fd93 	bl	800afd4 <LL_TIM_EnableIT_BRK>
}
 800b4ae:	bf00      	nop
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
	...

0800b4b8 <R3_1_CurrentReadingPolarization>:
  *         motor
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
void R3_1_CurrentReadingPolarization( PWMC_Handle_t * pHdl )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b086      	sub	sp, #24
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	60fb      	str	r3, [r7, #12]

  pHandle->PhaseAOffset = 0u;
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	65da      	str	r2, [r3, #92]	; 0x5c
  pHandle->PhaseBOffset = 0u;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	661a      	str	r2, [r3, #96]	; 0x60
  pHandle->PhaseCOffset = 0u;
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	665a      	str	r2, [r3, #100]	; 0x64

  pHandle->PolarizationCounter = 0u;
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  /* It forces inactive level on TIMx CHy and CHyN */
  LL_TIM_CC_DisableChannel(TIMx, TIMxCCER_MASK_CH123);
 800b4ee:	f240 5155 	movw	r1, #1365	; 0x555
 800b4f2:	6938      	ldr	r0, [r7, #16]
 800b4f4:	f7ff fb8b 	bl	800ac0e <LL_TIM_CC_DisableChannel>

  /* Offset calibration for all phases */
  /* Change function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	4a53      	ldr	r2, [pc, #332]	; (800b648 <R3_1_CurrentReadingPolarization+0x190>)
 800b4fc:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	4a52      	ldr	r2, [pc, #328]	; (800b64c <R3_1_CurrentReadingPolarization+0x194>)
 800b502:	619a      	str	r2, [r3, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	2240      	movs	r2, #64	; 0x40
 800b508:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
     
  /* We want to polarize calibration Phase A and Phase B, so we select SECTOR_5 */
  pHandle->PolarizationSector=SECTOR_5;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	2204      	movs	r2, #4
 800b510:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  /* Required to force first polarization conversion on SECTOR_5*/
  pHandle->_Super.Sector = SECTOR_5;   
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	2204      	movs	r2, #4
 800b518:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 fb2d 	bl	800bb7e <R3_1_SwitchOnPWM>
  
  /* IF CH4 is enabled, it means that JSQR is now configured to sample polarization current*/
  //while ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 0u )
  //{
  //}
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 800b524:	bf00      	nop
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b52e:	2b70      	cmp	r3, #112	; 0x70
 800b530:	d1f9      	bne.n	800b526 <R3_1_CurrentReadingPolarization+0x6e>
  {
  }
  /* It is the right time to start the ADC without unwanted conversion */
  /* Start ADC to wait for external trigger. This is series dependant*/
  LL_ADC_INJ_StartConversion( ADCx );
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f7ff fa9c 	bl	800aa70 <LL_ADC_INJ_StartConversion>
  
  /* Wait for NB_CONVERSIONS to be executed */
  waitForPolarizationEnd( TIMx,
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	f103 0138 	add.w	r1, r3, #56	; 0x38
  		                  &pHandle->_Super.SWerror,
  						  pHandle->pParams_str->RepetitionCounter,
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  waitForPolarizationEnd( TIMx,
 800b542:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	336e      	adds	r3, #110	; 0x6e
 800b54a:	6938      	ldr	r0, [r7, #16]
 800b54c:	f7fe ff23 	bl	800a396 <waitForPolarizationEnd>
  						  &pHandle->PolarizationCounter );

  R3_1_SwitchOffPWM( &pHandle->_Super );
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	4618      	mov	r0, r3
 800b554:	f000 fbb4 	bl	800bcc0 <R3_1_SwitchOffPWM>
  
  /* Offset calibration for C phase */
  pHandle->PolarizationCounter = 0u;
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  
  /* Change function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	4a3b      	ldr	r2, [pc, #236]	; (800b650 <R3_1_CurrentReadingPolarization+0x198>)
 800b564:	605a      	str	r2, [r3, #4]
  /* We want to polarize Phase C, so we select SECTOR_1 */
  pHandle->PolarizationSector=SECTOR_1;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2200      	movs	r2, #0
 800b56a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  /* Required to force first polarization conversion on SECTOR_1*/
  pHandle->_Super.Sector = SECTOR_1; 
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 fb00 	bl	800bb7e <R3_1_SwitchOnPWM>

  /* Wait for NB_CONVERSIONS to be executed */
  waitForPolarizationEnd( TIMx,
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f103 0138 	add.w	r1, r3, #56	; 0x38
  		                  &pHandle->_Super.SWerror,
  						  pHandle->pParams_str->RepetitionCounter,
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  waitForPolarizationEnd( TIMx,
 800b588:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	336e      	adds	r3, #110	; 0x6e
 800b590:	6938      	ldr	r0, [r7, #16]
 800b592:	f7fe ff00 	bl	800a396 <waitForPolarizationEnd>
  						  &pHandle->PolarizationCounter );
  
  R3_1_SwitchOffPWM( &pHandle->_Super );
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 fb91 	bl	800bcc0 <R3_1_SwitchOffPWM>
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5a2:	091a      	lsrs	r2, r3, #4
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	65da      	str	r2, [r3, #92]	; 0x5c
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5ac:	091a      	lsrs	r2, r3, #4
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	661a      	str	r2, [r3, #96]	; 0x60
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5b6:	091a      	lsrs	r2, r3, #4
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Change back function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	4a25      	ldr	r2, [pc, #148]	; (800b654 <R3_1_CurrentReadingPolarization+0x19c>)
 800b5c0:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	4a24      	ldr	r2, [pc, #144]	; (800b658 <R3_1_CurrentReadingPolarization+0x1a0>)
 800b5c6:	619a      	str	r2, [r3, #24]

  /* It over write TIMx CCRy wrongly written by FOC during calibration so as to
     force 50% duty cycle on the three inverer legs */
  /* Disable TIMx preload */
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH1);
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	6938      	ldr	r0, [r7, #16]
 800b5cc:	f7ff fbd8 	bl	800ad80 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH2);  
 800b5d0:	2110      	movs	r1, #16
 800b5d2:	6938      	ldr	r0, [r7, #16]
 800b5d4:	f7ff fbd4 	bl	800ad80 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH3);
 800b5d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b5dc:	6938      	ldr	r0, [r7, #16]
 800b5de:	f7ff fbcf 	bl	800ad80 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6938      	ldr	r0, [r7, #16]
 800b5ec:	f7ff fc16 	bl	800ae1c <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 (TIMx, pHandle->Half_PWMPeriod);
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	6938      	ldr	r0, [r7, #16]
 800b5fa:	f7ff fc1d 	bl	800ae38 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 (TIMx, pHandle->Half_PWMPeriod);
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b604:	4619      	mov	r1, r3
 800b606:	6938      	ldr	r0, [r7, #16]
 800b608:	f7ff fc24 	bl	800ae54 <LL_TIM_OC_SetCompareCH3>
  /* Enable TIMx preload */
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH1);
 800b60c:	2101      	movs	r1, #1
 800b60e:	6938      	ldr	r0, [r7, #16]
 800b610:	f7ff fb68 	bl	800ace4 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH2);  
 800b614:	2110      	movs	r1, #16
 800b616:	6938      	ldr	r0, [r7, #16]
 800b618:	f7ff fb64 	bl	800ace4 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH3);
 800b61c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b620:	6938      	ldr	r0, [r7, #16]
 800b622:	f7ff fb5f 	bl	800ace4 <LL_TIM_OC_EnablePreload>

  /* It re-enable drive of TIMx CHy and CHyN by TIMx CHyRef*/
  LL_TIM_CC_EnableChannel(TIMx, TIMxCCER_MASK_CH123);
 800b626:	f240 5155 	movw	r1, #1365	; 0x555
 800b62a:	6938      	ldr	r0, [r7, #16]
 800b62c:	f7ff fade 	bl	800abec <LL_TIM_CC_EnableChannel>
  
  /* At the end of calibration, all phases are at 50% we will sample A&B */
  pHandle->_Super.Sector=SECTOR_5;
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	2204      	movs	r2, #4
 800b634:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  pHandle->BrakeActionLock = false;
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

}
 800b640:	bf00      	nop
 800b642:	3718      	adds	r7, #24
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	0800b9d5 	.word	0x0800b9d5
 800b64c:	0800b87d 	.word	0x0800b87d
 800b650:	0800ba65 	.word	0x0800ba65
 800b654:	0800b65d 	.word	0x0800b65d
 800b658:	0800b8b3 	.word	0x0800b8b3

0800b65c <R3_1_GetPhaseCurrents>:
  * @brief  It computes and return latest converted motor phase currents motor
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in Curr_Components format
  */ 
__weak void R3_1_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b088      	sub	sp, #32
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;  
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	61fb      	str	r3, [r7, #28]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	61bb      	str	r3, [r7, #24]
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b678:	75fb      	strb	r3, [r7, #23]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	3308      	adds	r3, #8
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4413      	add	r3, r2
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	613b      	str	r3, [r7, #16]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b690:	7dfb      	ldrb	r3, [r7, #23]
 800b692:	330e      	adds	r3, #14
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4413      	add	r3, r2
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	60fb      	str	r3, [r7, #12]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800b69e:	2100      	movs	r1, #0
 800b6a0:	69b8      	ldr	r0, [r7, #24]
 800b6a2:	f7ff fbf3 	bl	800ae8c <LL_TIM_SetTriggerOutput>
  
  switch ( Sector )
 800b6a6:	7dfb      	ldrb	r3, [r7, #23]
 800b6a8:	2b05      	cmp	r3, #5
 800b6aa:	f200 80c6 	bhi.w	800b83a <R3_1_GetPhaseCurrents+0x1de>
 800b6ae:	a201      	add	r2, pc, #4	; (adr r2, 800b6b4 <R3_1_GetPhaseCurrents+0x58>)
 800b6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b4:	0800b73f 	.word	0x0800b73f
 800b6b8:	0800b7bd 	.word	0x0800b7bd
 800b6bc:	0800b7bd 	.word	0x0800b7bd
 800b6c0:	0800b6cd 	.word	0x0800b6cd
 800b6c4:	0800b6cd 	.word	0x0800b6cd
 800b6c8:	0800b73f 	.word	0x0800b73f
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b6de:	dc04      	bgt.n	800b6ea <R3_1_GetPhaseCurrents+0x8e>
      {
        Iab->a = -INT16_MAX;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	f248 0201 	movw	r2, #32769	; 0x8001
 800b6e6:	801a      	strh	r2, [r3, #0]
 800b6e8:	e00c      	b.n	800b704 <R3_1_GetPhaseCurrents+0xa8>
      }
      else  if ( Aux > INT16_MAX )
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6f0:	db04      	blt.n	800b6fc <R3_1_GetPhaseCurrents+0xa0>
      {
        Iab->a = INT16_MAX;
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b6f8:	801a      	strh	r2, [r3, #0]
 800b6fa:	e003      	b.n	800b704 <R3_1_GetPhaseCurrents+0xa8>
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	b21a      	sxth	r2, r3
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	801a      	strh	r2, [r3, #0]
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b708:	461a      	mov	r2, r3
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	1ad3      	subs	r3, r2, r3
 800b70e:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b716:	dc04      	bgt.n	800b722 <R3_1_GetPhaseCurrents+0xc6>
      {
        Iab->b = -INT16_MAX;
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	f248 0201 	movw	r2, #32769	; 0x8001
 800b71e:	805a      	strh	r2, [r3, #2]
      }
      else
      {
        Iab->b = ( int16_t )Aux;
      }
      break;
 800b720:	e08c      	b.n	800b83c <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux > INT16_MAX )
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b728:	db04      	blt.n	800b734 <R3_1_GetPhaseCurrents+0xd8>
        Iab->b = INT16_MAX;
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b730:	805a      	strh	r2, [r3, #2]
      break;
 800b732:	e083      	b.n	800b83c <R3_1_GetPhaseCurrents+0x1e0>
        Iab->b = ( int16_t )Aux;
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	b21a      	sxth	r2, r3
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	805a      	strh	r2, [r3, #2]
      break;
 800b73c:	e07e      	b.n	800b83c <R3_1_GetPhaseCurrents+0x1e0>

    case SECTOR_6:
    case SECTOR_1:
      /* Current on Phase A is not accessible     */
      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b742:	461a      	mov	r2, r3
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	1ad3      	subs	r3, r2, r3
 800b748:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b750:	dc04      	bgt.n	800b75c <R3_1_GetPhaseCurrents+0x100>
      {
        Iab->b = -INT16_MAX;
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	f248 0201 	movw	r2, #32769	; 0x8001
 800b758:	805a      	strh	r2, [r3, #2]
 800b75a:	e00c      	b.n	800b776 <R3_1_GetPhaseCurrents+0x11a>
      }
      else  if ( Aux > INT16_MAX )
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b762:	db04      	blt.n	800b76e <R3_1_GetPhaseCurrents+0x112>
      {
        Iab->b = INT16_MAX;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b76a:	805a      	strh	r2, [r3, #2]
 800b76c:	e003      	b.n	800b776 <R3_1_GetPhaseCurrents+0x11a>
      }
      else
      {
        Iab->b = ( int16_t )Aux;
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	b21a      	sxth	r2, r3
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	805a      	strh	r2, [r3, #2]
      }

      /* Ia = -Ic -Ib */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	69fa      	ldr	r2, [r7, #28]
 800b77a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b77c:	1a9b      	subs	r3, r3, r2
 800b77e:	60bb      	str	r3, [r7, #8]
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b786:	461a      	mov	r2, r3
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	1a9b      	subs	r3, r3, r2
 800b78c:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux > INT16_MAX )
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b794:	db04      	blt.n	800b7a0 <R3_1_GetPhaseCurrents+0x144>
      {
        Iab->a = INT16_MAX;
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b79c:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        Iab->a = ( int16_t )Aux;
      }
      break;
 800b79e:	e04d      	b.n	800b83c <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux < -INT16_MAX )
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b7a6:	dc04      	bgt.n	800b7b2 <R3_1_GetPhaseCurrents+0x156>
        Iab->a = -INT16_MAX;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	f248 0201 	movw	r2, #32769	; 0x8001
 800b7ae:	801a      	strh	r2, [r3, #0]
      break;
 800b7b0:	e044      	b.n	800b83c <R3_1_GetPhaseCurrents+0x1e0>
        Iab->a = ( int16_t )Aux;
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	b21a      	sxth	r2, r3
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	801a      	strh	r2, [r3, #0]
      break;
 800b7ba:	e03f      	b.n	800b83c <R3_1_GetPhaseCurrents+0x1e0>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b7ce:	dc04      	bgt.n	800b7da <R3_1_GetPhaseCurrents+0x17e>
      {
        Iab->a = -INT16_MAX;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	f248 0201 	movw	r2, #32769	; 0x8001
 800b7d6:	801a      	strh	r2, [r3, #0]
 800b7d8:	e00c      	b.n	800b7f4 <R3_1_GetPhaseCurrents+0x198>
      }
      else  if ( Aux > INT16_MAX )
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7e0:	db04      	blt.n	800b7ec <R3_1_GetPhaseCurrents+0x190>
      {
        Iab->a = INT16_MAX;
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b7e8:	801a      	strh	r2, [r3, #0]
 800b7ea:	e003      	b.n	800b7f4 <R3_1_GetPhaseCurrents+0x198>
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	b21a      	sxth	r2, r3
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	801a      	strh	r2, [r3, #0]
      }

      /* Ib = -Ic -Ia */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	69fa      	ldr	r2, [r7, #28]
 800b7f8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b7fa:	1a9b      	subs	r3, r3, r2
 800b7fc:	60bb      	str	r3, [r7, #8]
      Aux -= ( int32_t )Iab->a;             /* Ib */
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b804:	461a      	mov	r2, r3
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	1a9b      	subs	r3, r3, r2
 800b80a:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux > INT16_MAX )
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b812:	db04      	blt.n	800b81e <R3_1_GetPhaseCurrents+0x1c2>
      {
        Iab->b = INT16_MAX;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b81a:	805a      	strh	r2, [r3, #2]
      }
      else
      {
        Iab->b = ( int16_t )Aux;
      }
      break;
 800b81c:	e00e      	b.n	800b83c <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux < -INT16_MAX )
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b824:	dc04      	bgt.n	800b830 <R3_1_GetPhaseCurrents+0x1d4>
        Iab->b = -INT16_MAX;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	f248 0201 	movw	r2, #32769	; 0x8001
 800b82c:	805a      	strh	r2, [r3, #2]
      break;
 800b82e:	e005      	b.n	800b83c <R3_1_GetPhaseCurrents+0x1e0>
        Iab->b = ( int16_t )Aux;
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	b21a      	sxth	r2, r3
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	805a      	strh	r2, [r3, #2]
      break;
 800b838:	e000      	b.n	800b83c <R3_1_GetPhaseCurrents+0x1e0>

    default:
      break;
 800b83a:	bf00      	nop
  }

  pHandle->_Super.Ia = Iab->a;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  pHandle->_Super.Ib = Iab->b;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b84e:	69fb      	ldr	r3, [r7, #28]
 800b850:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	425b      	negs	r3, r3
 800b85e:	b29a      	uxth	r2, r3
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b866:	b29b      	uxth	r3, r3
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	b21a      	sxth	r2, r3
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800b874:	bf00      	nop
 800b876:	3720      	adds	r7, #32
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <R3_1_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_1_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b89c:	3b01      	subs	r3, #1
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	f000 f863 	bl	800b96e <R3_1_WriteTIMRegisters>
 800b8a8:	4603      	mov	r3, r0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <R3_1_SetADCSampPointSectX>:
  *         And call the WriteTIMRegisters method.
  * @param  pHandle Pointer on the target component instance
  * @retval none
  */
uint16_t R3_1_SetADCSampPointSectX( PWMC_Handle_t * pHdl )
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b086      	sub	sp, #24
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	613b      	str	r3, [r7, #16]
#endif /* __ICCARM__ */
  uint16_t SamplingPoint;
  uint16_t DeltaDuty;

  /* Verify that sampling is possible in the middle of PWM by checking the smallest duty cycle */
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b8c8:	1ad3      	subs	r3, r2, r3
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8d0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d909      	bls.n	800b8ec <R3_1_SetADCSampPointSectX+0x3a>
     * (AB are chosen) for all sectors in order to not induce current discontinuities when there are differences
     * between offsets */

    /* sector number needed by GetPhaseCurrent, phase A and B are sampled which corresponds
     * to sector 4 or 5  */
    pHandle->_Super.Sector = SECTOR_5;
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	2204      	movs	r2, #4
 800b8dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* set sampling  point trigger in the middle of PWM period */
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	82fb      	strh	r3, [r7, #22]
 800b8ea:	e035      	b.n	800b958 <R3_1_SetADCSampPointSectX+0xa6>
    /* ADC Injected sequence configuration. The stator phase with minimum value of complementary
        duty cycle is set as first. In every sector there is always one phase with maximum complementary duty,
        one with minimum complementary duty and one with variable complementary duty. In this case, phases
        with variable complementary duty and with maximum duty are converted and the first will be always
        the phase with variable complementary duty cycle */
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8f4:	1ad3      	subs	r3, r2, r3
 800b8f6:	81fb      	strh	r3, [r7, #14]

    /* Definition of crossing point */
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 800b8f8:	89fa      	ldrh	r2, [r7, #14]
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b904:	1acb      	subs	r3, r1, r3
 800b906:	b29b      	uxth	r3, r3
 800b908:	005b      	lsls	r3, r3, #1
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d908      	bls.n	800b920 <R3_1_SetADCSampPointSectX+0x6e>
    {
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b916:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	82fb      	strh	r3, [r7, #22]
 800b91e:	e01b      	b.n	800b958 <R3_1_SetADCSampPointSectX+0xa6>
    }
    else
    {
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b928:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800b92c:	4413      	add	r3, r2
 800b92e:	82fb      	strh	r3, [r7, #22]

      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b936:	8afa      	ldrh	r2, [r7, #22]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d30d      	bcc.n	800b958 <R3_1_SetADCSampPointSectX+0xa6>
      {
         /* ADC trigger edge must be changed from positive to negative */
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	2280      	movs	r2, #128	; 0x80
 800b940:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b94a:	005b      	lsls	r3, r3, #1
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	8afb      	ldrh	r3, [r7, #22]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	b29b      	uxth	r3, r3
 800b954:	3b01      	subs	r3, #1
 800b956:	82fb      	strh	r3, [r7, #22]
      }
    }
  }
  return R3_1_WriteTIMRegisters( &pHandle->_Super, SamplingPoint );
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	8afa      	ldrh	r2, [r7, #22]
 800b95c:	4611      	mov	r1, r2
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 f805 	bl	800b96e <R3_1_WriteTIMRegisters>
 800b964:	4603      	mov	r3, r0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3718      	adds	r7, #24
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <R3_1_WriteTIMRegisters>:
  *         motor
  * @param  pHandle handler of the current instance of the PWM component
  * @retval none
  */
__STATIC_INLINE uint16_t R3_1_WriteTIMRegisters( PWMC_Handle_t * pHdl, uint16_t SamplingPoint )
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b086      	sub	sp, #24
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	460b      	mov	r3, r1
 800b978:	807b      	strh	r3, [r7, #2]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	60fb      	str	r3, [r7, #12]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b98a:	4619      	mov	r1, r3
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f7ff fa45 	bl	800ae1c <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b996:	4619      	mov	r1, r3
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f7ff fa4d 	bl	800ae38 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f7ff fa55 	bl	800ae54 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );
 800b9aa:	887b      	ldrh	r3, [r7, #2]
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f7ff fa5e 	bl	800ae70 <LL_TIM_OC_SetCompareCH4>

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <R3_1_WriteTIMRegisters+0x58>
  {
    Aux = MC_FOC_DURATION;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	82fb      	strh	r3, [r7, #22]
 800b9c4:	e001      	b.n	800b9ca <R3_1_WriteTIMRegisters+0x5c>
  }
  else
  {
    Aux = MC_NO_ERROR;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	82fb      	strh	r3, [r7, #22]
  }
  return Aux;
 800b9ca:	8afb      	ldrh	r3, [r7, #22]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3718      	adds	r7, #24
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <R3_1_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHandle Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_1_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	613b      	str	r3, [r7, #16]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4413      	add	r3, r2
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	60fb      	str	r3, [r7, #12]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ba0a:	330e      	adds	r3, #14
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	60bb      	str	r3, [r7, #8]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800ba16:	2100      	movs	r1, #0
 800ba18:	6938      	ldr	r0, [r7, #16]
 800ba1a:	f7ff fa37 	bl	800ae8c <LL_TIM_SetTriggerOutput>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800ba24:	2b0f      	cmp	r3, #15
 800ba26:	d813      	bhi.n	800ba50 <R3_1_HFCurrentsPolarizationAB+0x7c>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	441a      	add	r2, r3
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	65da      	str	r2, [r3, #92]	; 0x5c
    pHandle-> PhaseBOffset += ADCDataReg2;
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	441a      	add	r2, r3
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	661a      	str	r2, [r3, #96]	; 0x60
    pHandle->PolarizationCounter++;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800ba46:	3301      	adds	r3, #1
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	2200      	movs	r2, #0
 800ba54:	801a      	strh	r2, [r3, #0]
  Iab->b = 0;
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	805a      	strh	r2, [r3, #2]
}
 800ba5c:	bf00      	nop
 800ba5e:	3718      	adds	r7, #24
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <R3_1_HFCurrentsPolarizationC>:
  *         the offset computation.
  * @param  pHandle Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_1_HFCurrentsPolarizationC( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	613b      	str	r3, [r7, #16]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ba84:	330e      	adds	r3, #14
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	60fb      	str	r3, [r7, #12]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800ba90:	2100      	movs	r1, #0
 800ba92:	6938      	ldr	r0, [r7, #16]
 800ba94:	f7ff f9fa 	bl	800ae8c <LL_TIM_SetTriggerOutput>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800ba9e:	2b0f      	cmp	r3, #15
 800baa0:	d80d      	bhi.n	800babe <R3_1_HFCurrentsPolarizationC+0x5a>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	441a      	add	r2, r3
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	665a      	str	r2, [r3, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800bab4:	3301      	adds	r3, #1
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	2200      	movs	r2, #0
 800bac2:	801a      	strh	r2, [r3, #0]
  Iab->b = 0;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	2200      	movs	r2, #0
 800bac8:	805a      	strh	r2, [r3, #2]
}
 800baca:	bf00      	nop
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <R3_1_TurnOnLowSides>:
  *         called each motor start-up when using high voltage drivers
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = true;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2201      	movs	r2, #1
 800baea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7ff f9fc 	bl	800aef2 <LL_TIM_ClearFlag_UPDATE>

  /*Turn on the three low side switches */
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
 800bafa:	2100      	movs	r1, #0
 800bafc:	68b8      	ldr	r0, [r7, #8]
 800bafe:	f7ff f98d 	bl	800ae1c <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
 800bb02:	2100      	movs	r1, #0
 800bb04:	68b8      	ldr	r0, [r7, #8]
 800bb06:	f7ff f997 	bl	800ae38 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	68b8      	ldr	r0, [r7, #8]
 800bb0e:	f7ff f9a1 	bl	800ae54 <LL_TIM_OC_SetCompareCH3>

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800bb12:	bf00      	nop
 800bb14:	68b8      	ldr	r0, [r7, #8]
 800bb16:	f7ff f9fa 	bl	800af0e <LL_TIM_IsActiveFlag_UPDATE>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d0f9      	beq.n	800bb14 <R3_1_TurnOnLowSides+0x42>
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
 800bb20:	68b8      	ldr	r0, [r7, #8]
 800bb22:	f7ff f9c6 	bl	800aeb2 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb2a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d121      	bne.n	800bb76 <R3_1_TurnOnLowSides+0xa4>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb36:	699a      	ldr	r2, [r3, #24]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb3c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800bb40:	4619      	mov	r1, r3
 800bb42:	4610      	mov	r0, r2
 800bb44:	f7ff fa66 	bl	800b014 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb4c:	69da      	ldr	r2, [r3, #28]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb52:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800bb56:	4619      	mov	r1, r3
 800bb58:	4610      	mov	r0, r2
 800bb5a:	f7ff fa5b 	bl	800b014 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb62:	6a1a      	ldr	r2, [r3, #32]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb68:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	4610      	mov	r0, r2
 800bb70:	f7ff fa50 	bl	800b014 <LL_GPIO_SetOutputPin>
  }
  return;
 800bb74:	bf00      	nop
 800bb76:	bf00      	nop
}
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <R3_1_SwitchOnPWM>:
  *         bit
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = false;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bba0:	085b      	lsrs	r3, r3, #1
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	4619      	mov	r1, r3
 800bba6:	68b8      	ldr	r0, [r7, #8]
 800bba8:	f7ff f938 	bl	800ae1c <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bbb2:	085b      	lsrs	r3, r3, #1
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	68b8      	ldr	r0, [r7, #8]
 800bbba:	f7ff f93d 	bl	800ae38 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bbc4:	085b      	lsrs	r3, r3, #1
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	4619      	mov	r1, r3
 800bbca:	68b8      	ldr	r0, [r7, #8]
 800bbcc:	f7ff f942 	bl	800ae54 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bbd6:	3b05      	subs	r3, #5
 800bbd8:	4619      	mov	r1, r3
 800bbda:	68b8      	ldr	r0, [r7, #8]
 800bbdc:	f7ff f948 	bl	800ae70 <LL_TIM_OC_SetCompareCH4>

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800bbe0:	68b8      	ldr	r0, [r7, #8]
 800bbe2:	f7ff f986 	bl	800aef2 <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800bbe6:	bf00      	nop
 800bbe8:	68b8      	ldr	r0, [r7, #8]
 800bbea:	f7ff f990 	bl	800af0e <LL_TIM_IsActiveFlag_UPDATE>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d0f9      	beq.n	800bbe8 <R3_1_SwitchOnPWM+0x6a>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800bbf4:	68b8      	ldr	r0, [r7, #8]
 800bbf6:	f7ff f97c 	bl	800aef2 <LL_TIM_ClearFlag_UPDATE>

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbfe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );
 800bc06:	68b8      	ldr	r0, [r7, #8]
 800bc08:	f7ff f953 	bl	800aeb2 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc10:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d149      	bne.n	800bcac <R3_1_SwitchOnPWM+0x12e>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	6a1a      	ldr	r2, [r3, #32]
 800bc1c:	f240 5355 	movw	r3, #1365	; 0x555
 800bc20:	4013      	ands	r3, r2
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d021      	beq.n	800bc6a <R3_1_SwitchOnPWM+0xec>
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc2a:	699a      	ldr	r2, [r3, #24]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc30:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800bc34:	4619      	mov	r1, r3
 800bc36:	4610      	mov	r0, r2
 800bc38:	f7ff f9ec 	bl	800b014 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc40:	69da      	ldr	r2, [r3, #28]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc46:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	4610      	mov	r0, r2
 800bc4e:	f7ff f9e1 	bl	800b014 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc56:	6a1a      	ldr	r2, [r3, #32]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc5c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800bc60:	4619      	mov	r1, r3
 800bc62:	4610      	mov	r0, r2
 800bc64:	f7ff f9d6 	bl	800b014 <LL_GPIO_SetOutputPin>
 800bc68:	e020      	b.n	800bcac <R3_1_SwitchOnPWM+0x12e>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc6e:	699a      	ldr	r2, [r3, #24]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc74:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800bc78:	4619      	mov	r1, r3
 800bc7a:	4610      	mov	r0, r2
 800bc7c:	f7ff f9d8 	bl	800b030 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc84:	69da      	ldr	r2, [r3, #28]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc8a:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800bc8e:	4619      	mov	r1, r3
 800bc90:	4610      	mov	r0, r2
 800bc92:	f7ff f9cd 	bl	800b030 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc9a:	6a1a      	ldr	r2, [r3, #32]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bca0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800bca4:	4619      	mov	r1, r3
 800bca6:	4610      	mov	r0, r2
 800bca8:	f7ff f9c2 	bl	800b030 <LL_GPIO_ResetOutputPin>
    }
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800bcac:	68b8      	ldr	r0, [r7, #8]
 800bcae:	f7ff f920 	bl	800aef2 <LL_TIM_ClearFlag_UPDATE>
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
 800bcb2:	68b8      	ldr	r0, [r7, #8]
 800bcb4:	f7ff f96e 	bl	800af94 <LL_TIM_EnableIT_UPDATE>
}
 800bcb8:	bf00      	nop
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <R3_1_SwitchOffPWM>:
/**
 * @brief  Disables PWM generation on the proper Timer peripheral acting on  MOE bit
 * @param pHdl handler of the current instance of the PWM component
 */
__weak void R3_1_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	60bb      	str	r3, [r7, #8]

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );
 800bcd4:	68b8      	ldr	r0, [r7, #8]
 800bcd6:	f7ff f96d 	bl	800afb4 <LL_TIM_DisableIT_UPDATE>

  pHandle->_Super.TurnOnLowSidesAction = false;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
 800bce2:	68b8      	ldr	r0, [r7, #8]
 800bce4:	f7ff f8f5 	bl	800aed2 <LL_TIM_DisableAllOutputs>
  if ( pHandle->BrakeActionLock == true )
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d126      	bne.n	800bd40 <R3_1_SwitchOffPWM+0x80>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcf6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800bcfa:	2b02      	cmp	r3, #2
 800bcfc:	d120      	bne.n	800bd40 <R3_1_SwitchOffPWM+0x80>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd02:	699a      	ldr	r2, [r3, #24]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd08:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	4610      	mov	r0, r2
 800bd10:	f7ff f98e 	bl	800b030 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd18:	69da      	ldr	r2, [r3, #28]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd1e:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800bd22:	4619      	mov	r1, r3
 800bd24:	4610      	mov	r0, r2
 800bd26:	f7ff f983 	bl	800b030 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd2e:	6a1a      	ldr	r2, [r3, #32]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd34:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800bd38:	4619      	mov	r1, r3
 800bd3a:	4610      	mov	r0, r2
 800bd3c:	f7ff f978 	bl	800b030 <LL_GPIO_ResetOutputPin>
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800bd40:	68b8      	ldr	r0, [r7, #8]
 800bd42:	f7ff f8d6 	bl	800aef2 <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800bd46:	bf00      	nop
 800bd48:	68b8      	ldr	r0, [r7, #8]
 800bd4a:	f7ff f8e0 	bl	800af0e <LL_TIM_IsActiveFlag_UPDATE>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d0f9      	beq.n	800bd48 <R3_1_SwitchOffPWM+0x88>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800bd54:	68b8      	ldr	r0, [r7, #8]
 800bd56:	f7ff f8cc 	bl	800aef2 <LL_TIM_ClearFlag_UPDATE>

}
 800bd5a:	bf00      	nop
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <R3_1_TIMx_UP_IRQHandler>:
  *        sampling point
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_TIMx_UP_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b084      	sub	sp, #16
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	60bb      	str	r3, [r7, #8]
  
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bd84:	3314      	adds	r3, #20
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	4413      	add	r3, r2
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 800bd92:	431a      	orrs	r2, r3
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* enable ADC trigger source */
    //LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_OC4REF);
 800bd98:	2170      	movs	r1, #112	; 0x70
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f7ff f876 	bl	800ae8c <LL_TIM_SetTriggerOutput>
    
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2240      	movs	r2, #64	; 0x40
 800bda4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	3346      	adds	r3, #70	; 0x46
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <R3_1_BRK2_IRQHandler>:
  * @brief  It contains the TIMx Break2 event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_BRK2_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  if ( pHandle->BrakeActionLock == false )
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800bdc2:	f083 0301 	eor.w	r3, r3, #1
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d026      	beq.n	800be1a <R3_1_BRK2_IRQHandler+0x66>
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdd0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800bdd4:	2b02      	cmp	r3, #2
 800bdd6:	d120      	bne.n	800be1a <R3_1_BRK2_IRQHandler+0x66>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bddc:	699a      	ldr	r2, [r3, #24]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bde2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800bde6:	4619      	mov	r1, r3
 800bde8:	4610      	mov	r0, r2
 800bdea:	f7ff f921 	bl	800b030 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdf2:	69da      	ldr	r2, [r3, #28]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdf8:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	4610      	mov	r0, r2
 800be00:	f7ff f916 	bl	800b030 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be08:	6a1a      	ldr	r2, [r3, #32]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be0e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800be12:	4619      	mov	r1, r3
 800be14:	4610      	mov	r0, r2
 800be16:	f7ff f90b 	bl	800b030 <LL_GPIO_ResetOutputPin>
    }
  }
  pHandle->OverCurrentFlag = true;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2201      	movs	r2, #1
 800be1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return &( pHandle->_Super.Motor );
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	3346      	adds	r3, #70	; 0x46
}
 800be26:	4618      	mov	r0, r3
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <R3_1_BRK_IRQHandler>:
  * @brief  It contains the TIMx Break1 event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_BRK_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800be2e:	b480      	push	{r7}
 800be30:	b083      	sub	sp, #12
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]

  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be48:	645a      	str	r2, [r3, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2201      	movs	r2, #1
 800be4e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  pHandle->BrakeActionLock = true;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2201      	movs	r2, #1
 800be56:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  return &( pHandle->_Super.Motor );
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	3346      	adds	r3, #70	; 0x46
}
 800be5e:	4618      	mov	r0, r3
 800be60:	370c      	adds	r7, #12
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <R3_1_IsOverCurrentOccurred>:
  * @param  pHandle Pointer on the target component instance
  * @retval uint16_t It returns MC_BREAK_IN whether an overcurrent has been
  *                  detected since last method call, MC_NO_FAULTS otherwise.
  */
__weak uint16_t R3_1_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
 800be6a:	b480      	push	{r7}
 800be6c:	b085      	sub	sp, #20
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	60bb      	str	r3, [r7, #8]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  uint16_t retVal = MC_NO_FAULTS;
 800be76:	2300      	movs	r3, #0
 800be78:	81fb      	strh	r3, [r7, #14]

  if ( pHandle->OverVoltageFlag == true )
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800be80:	2b00      	cmp	r3, #0
 800be82:	d005      	beq.n	800be90 <R3_1_IsOverCurrentOccurred+0x26>
  {
    retVal = MC_OVER_VOLT;
 800be84:	2302      	movs	r3, #2
 800be86:	81fb      	strh	r3, [r7, #14]
    pHandle->OverVoltageFlag = false;
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  }

  if ( pHandle->OverCurrentFlag == true )
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800be96:	2b00      	cmp	r3, #0
 800be98:	d007      	beq.n	800beaa <R3_1_IsOverCurrentOccurred+0x40>
  {
    retVal |= MC_BREAK_IN;
 800be9a:	89fb      	ldrh	r3, [r7, #14]
 800be9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bea0:	81fb      	strh	r3, [r7, #14]
    pHandle->OverCurrentFlag = false;
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	2200      	movs	r2, #0
 800bea6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  }

  return retVal;
 800beaa:	89fb      	ldrh	r3, [r7, #14]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <R3_1_SetAOReferenceVoltage>:
  * @param  hDACVref Value of DAC reference expressed as 16bit unsigned integer.
  *         Ex. 0 = 0V 65536 = VDD_DAC.
  * @retval none
  */
static void R3_1_SetAOReferenceVoltage( uint32_t DAC_Channel, uint16_t hDACVref )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	460b      	mov	r3, r1
 800bec2:	807b      	strh	r3, [r7, #2]
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 800bec4:	887b      	ldrh	r3, [r7, #2]
 800bec6:	461a      	mov	r2, r3
 800bec8:	6879      	ldr	r1, [r7, #4]
 800beca:	481d      	ldr	r0, [pc, #116]	; (800bf40 <R3_1_SetAOReferenceVoltage+0x88>)
 800becc:	f7ff f906 	bl	800b0dc <LL_DAC_ConvertData12LeftAligned>

  /* Enable DAC Channel */
  LL_DAC_TrigSWConversion ( DAC1, DAC_Channel );
 800bed0:	6879      	ldr	r1, [r7, #4]
 800bed2:	481b      	ldr	r0, [pc, #108]	; (800bf40 <R3_1_SetAOReferenceVoltage+0x88>)
 800bed4:	f7ff f8ef 	bl	800b0b6 <LL_DAC_TrigSWConversion>
  
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 800bed8:	6879      	ldr	r1, [r7, #4]
 800beda:	4819      	ldr	r0, [pc, #100]	; (800bf40 <R3_1_SetAOReferenceVoltage+0x88>)
 800bedc:	f7ff f8cc 	bl	800b078 <LL_DAC_IsEnabled>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d112      	bne.n	800bf0c <R3_1_SetAOReferenceVoltage+0x54>
  { /* If DAC is already enable, we wait LL_DAC_DELAY_VOLTAGE_SETTLING_US*/
    uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));      
 800bee6:	4b17      	ldr	r3, [pc, #92]	; (800bf44 <R3_1_SetAOReferenceVoltage+0x8c>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a17      	ldr	r2, [pc, #92]	; (800bf48 <R3_1_SetAOReferenceVoltage+0x90>)
 800beec:	fba2 2303 	umull	r2, r3, r2, r3
 800bef0:	0cda      	lsrs	r2, r3, #19
 800bef2:	4613      	mov	r3, r2
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	4413      	add	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800befc:	e002      	b.n	800bf04 <R3_1_SetAOReferenceVoltage+0x4c>
    {
      wait_loop_index--;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	3b01      	subs	r3, #1
 800bf02:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1f9      	bne.n	800befe <R3_1_SetAOReferenceVoltage+0x46>
    while(wait_loop_index != 0UL)
    {
      wait_loop_index--;
    }    
  }
}
 800bf0a:	e014      	b.n	800bf36 <R3_1_SetAOReferenceVoltage+0x7e>
    LL_DAC_Enable ( DAC1, DAC_Channel );
 800bf0c:	6879      	ldr	r1, [r7, #4]
 800bf0e:	480c      	ldr	r0, [pc, #48]	; (800bf40 <R3_1_SetAOReferenceVoltage+0x88>)
 800bf10:	f7ff f89c 	bl	800b04c <LL_DAC_Enable>
    uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));      
 800bf14:	4b0b      	ldr	r3, [pc, #44]	; (800bf44 <R3_1_SetAOReferenceVoltage+0x8c>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a0b      	ldr	r2, [pc, #44]	; (800bf48 <R3_1_SetAOReferenceVoltage+0x90>)
 800bf1a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf1e:	0cda      	lsrs	r2, r3, #19
 800bf20:	4613      	mov	r3, r2
 800bf22:	011b      	lsls	r3, r3, #4
 800bf24:	1a9b      	subs	r3, r3, r2
 800bf26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800bf28:	e002      	b.n	800bf30 <R3_1_SetAOReferenceVoltage+0x78>
      wait_loop_index--;
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1f9      	bne.n	800bf2a <R3_1_SetAOReferenceVoltage+0x72>
}
 800bf36:	bf00      	nop
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	40007400 	.word	0x40007400
 800bf44:	20000690 	.word	0x20000690
 800bf48:	431bde83 	.word	0x431bde83

0800bf4c <R3_1_RLDetectionModeEnable>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @param  hDuty to be applied in uint16_t
  * @retval none
  */
void R3_1_RLDetectionModeEnable( PWMC_Handle_t * pHdl )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	60bb      	str	r3, [r7, #8]
  
  if ( pHandle->_Super.RLDetectionMode == false )
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800bf66:	f083 0301 	eor.w	r3, r3, #1
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d047      	beq.n	800c000 <R3_1_RLDetectionModeEnable+0xb4>
  {
    /*  Channel1 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 800bf70:	2260      	movs	r2, #96	; 0x60
 800bf72:	2101      	movs	r1, #1
 800bf74:	68b8      	ldr	r0, [r7, #8]
 800bf76:	f7fe fe5d 	bl	800ac34 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1 );
 800bf7a:	2101      	movs	r1, #1
 800bf7c:	68b8      	ldr	r0, [r7, #8]
 800bf7e:	f7fe fe35 	bl	800abec <LL_TIM_CC_EnableChannel>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800bf82:	2104      	movs	r1, #4
 800bf84:	68b8      	ldr	r0, [r7, #8]
 800bf86:	f7fe fe42 	bl	800ac0e <LL_TIM_CC_DisableChannel>
    LL_TIM_OC_SetCompareCH1( TIMx, 0u );
 800bf8a:	2100      	movs	r1, #0
 800bf8c:	68b8      	ldr	r0, [r7, #8]
 800bf8e:	f7fe ff45 	bl	800ae1c <LL_TIM_OC_SetCompareCH1>

    /*  Channel2 configuration */
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf96:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d10d      	bne.n	800bfba <R3_1_RLDetectionModeEnable+0x6e>
    {
      LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_ACTIVE );
 800bf9e:	2210      	movs	r2, #16
 800bfa0:	2110      	movs	r1, #16
 800bfa2:	68b8      	ldr	r0, [r7, #8]
 800bfa4:	f7fe fe46 	bl	800ac34 <LL_TIM_OC_SetMode>
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800bfa8:	2110      	movs	r1, #16
 800bfaa:	68b8      	ldr	r0, [r7, #8]
 800bfac:	f7fe fe2f 	bl	800ac0e <LL_TIM_CC_DisableChannel>
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800bfb0:	2140      	movs	r1, #64	; 0x40
 800bfb2:	68b8      	ldr	r0, [r7, #8]
 800bfb4:	f7fe fe1a 	bl	800abec <LL_TIM_CC_EnableChannel>
 800bfb8:	e012      	b.n	800bfe0 <R3_1_RLDetectionModeEnable+0x94>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfbe:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d10c      	bne.n	800bfe0 <R3_1_RLDetectionModeEnable+0x94>
    {
      LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_INACTIVE );
 800bfc6:	2220      	movs	r2, #32
 800bfc8:	2110      	movs	r1, #16
 800bfca:	68b8      	ldr	r0, [r7, #8]
 800bfcc:	f7fe fe32 	bl	800ac34 <LL_TIM_OC_SetMode>
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800bfd0:	2110      	movs	r1, #16
 800bfd2:	68b8      	ldr	r0, [r7, #8]
 800bfd4:	f7fe fe0a 	bl	800abec <LL_TIM_CC_EnableChannel>
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800bfd8:	2140      	movs	r1, #64	; 0x40
 800bfda:	68b8      	ldr	r0, [r7, #8]
 800bfdc:	f7fe fe17 	bl	800ac0e <LL_TIM_CC_DisableChannel>
    else
    {
    }

    /*  Channel3 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM2 );
 800bfe0:	2270      	movs	r2, #112	; 0x70
 800bfe2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bfe6:	68b8      	ldr	r0, [r7, #8]
 800bfe8:	f7fe fe24 	bl	800ac34 <LL_TIM_OC_SetMode>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3 );
 800bfec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bff0:	68b8      	ldr	r0, [r7, #8]
 800bff2:	f7fe fe0c 	bl	800ac0e <LL_TIM_CC_DisableChannel>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800bff6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bffa:	68b8      	ldr	r0, [r7, #8]
 800bffc:	f7fe fe07 	bl	800ac0e <LL_TIM_CC_DisableChannel>
   
  }

  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	4a09      	ldr	r2, [pc, #36]	; (800c028 <R3_1_RLDetectionModeEnable+0xdc>)
 800c004:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	4a08      	ldr	r2, [pc, #32]	; (800c02c <R3_1_RLDetectionModeEnable+0xe0>)
 800c00a:	615a      	str	r2, [r3, #20]
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4a08      	ldr	r2, [pc, #32]	; (800c030 <R3_1_RLDetectionModeEnable+0xe4>)
 800c010:	60da      	str	r2, [r3, #12]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	4a07      	ldr	r2, [pc, #28]	; (800c034 <R3_1_RLDetectionModeEnable+0xe8>)
 800c016:	609a      	str	r2, [r3, #8]

  pHandle->_Super.RLDetectionMode = true;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
}
 800c020:	bf00      	nop
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	0800c225 	.word	0x0800c225
 800c02c:	0800c2a1 	.word	0x0800c2a1
 800c030:	0800c335 	.word	0x0800c335
 800c034:	0800bcc1 	.word	0x0800bcc1

0800c038 <R3_1_RLDetectionModeDisable>:
 * @brief  It is used to disable the PWM mode for R/L detection.
 * @param  pHdl: handler of the current instance of the PWM component
 * @retval none
 */
void R3_1_RLDetectionModeDisable( PWMC_Handle_t * pHdl )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	60bb      	str	r3, [r7, #8]

  if ( pHandle->_Super.RLDetectionMode == true )
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 809e 	beq.w	800c194 <R3_1_RLDetectionModeDisable+0x15c>

    /* The folowing while cycles ensure the identification of the positive counting mode of TIM1
     * for correct reactivation of Repetition Counter value of TIM1.*/

    /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 800c058:	bf00      	nop
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f003 0310 	and.w	r3, r3, #16
 800c062:	2b00      	cmp	r3, #0
 800c064:	d0f9      	beq.n	800c05a <R3_1_RLDetectionModeDisable+0x22>
    {
    }
    /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction.*/
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 800c066:	bf00      	nop
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 0310 	and.w	r3, r3, #16
 800c070:	2b10      	cmp	r3, #16
 800c072:	d0f9      	beq.n	800c068 <R3_1_RLDetectionModeDisable+0x30>
    {
    } 

    /* Repetition Counter of TIM1 User value reactivation END*/    /*  Channel1 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 800c074:	2260      	movs	r2, #96	; 0x60
 800c076:	2101      	movs	r1, #1
 800c078:	68b8      	ldr	r0, [r7, #8]
 800c07a:	f7fe fddb 	bl	800ac34 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1 );
 800c07e:	2101      	movs	r1, #1
 800c080:	68b8      	ldr	r0, [r7, #8]
 800c082:	f7fe fdb3 	bl	800abec <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c08a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d104      	bne.n	800c09c <R3_1_RLDetectionModeDisable+0x64>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800c092:	2104      	movs	r1, #4
 800c094:	68b8      	ldr	r0, [r7, #8]
 800c096:	f7fe fda9 	bl	800abec <LL_TIM_CC_EnableChannel>
 800c09a:	e009      	b.n	800c0b0 <R3_1_RLDetectionModeDisable+0x78>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0a0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	d103      	bne.n	800c0b0 <R3_1_RLDetectionModeDisable+0x78>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800c0a8:	2104      	movs	r1, #4
 800c0aa:	68b8      	ldr	r0, [r7, #8]
 800c0ac:	f7fe fdaf 	bl	800ac0e <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c0b6:	085b      	lsrs	r3, r3, #1
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	68b8      	ldr	r0, [r7, #8]
 800c0be:	f7fe fead 	bl	800ae1c <LL_TIM_OC_SetCompareCH1>

    /*  Channel2 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1 );
 800c0c2:	2260      	movs	r2, #96	; 0x60
 800c0c4:	2110      	movs	r1, #16
 800c0c6:	68b8      	ldr	r0, [r7, #8]
 800c0c8:	f7fe fdb4 	bl	800ac34 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800c0cc:	2110      	movs	r1, #16
 800c0ce:	68b8      	ldr	r0, [r7, #8]
 800c0d0:	f7fe fd8c 	bl	800abec <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0d8:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d104      	bne.n	800c0ea <R3_1_RLDetectionModeDisable+0xb2>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800c0e0:	2140      	movs	r1, #64	; 0x40
 800c0e2:	68b8      	ldr	r0, [r7, #8]
 800c0e4:	f7fe fd82 	bl	800abec <LL_TIM_CC_EnableChannel>
 800c0e8:	e009      	b.n	800c0fe <R3_1_RLDetectionModeDisable+0xc6>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0ee:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d103      	bne.n	800c0fe <R3_1_RLDetectionModeDisable+0xc6>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800c0f6:	2140      	movs	r1, #64	; 0x40
 800c0f8:	68b8      	ldr	r0, [r7, #8]
 800c0fa:	f7fe fd88 	bl	800ac0e <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH2( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c104:	085b      	lsrs	r3, r3, #1
 800c106:	b29b      	uxth	r3, r3
 800c108:	4619      	mov	r1, r3
 800c10a:	68b8      	ldr	r0, [r7, #8]
 800c10c:	f7fe fe94 	bl	800ae38 <LL_TIM_OC_SetCompareCH2>

    /*  Channel3 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1 );
 800c110:	2260      	movs	r2, #96	; 0x60
 800c112:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c116:	68b8      	ldr	r0, [r7, #8]
 800c118:	f7fe fd8c 	bl	800ac34 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH3 );
 800c11c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c120:	68b8      	ldr	r0, [r7, #8]
 800c122:	f7fe fd63 	bl	800abec <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c12a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d105      	bne.n	800c13e <R3_1_RLDetectionModeDisable+0x106>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800c132:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c136:	68b8      	ldr	r0, [r7, #8]
 800c138:	f7fe fd58 	bl	800abec <LL_TIM_CC_EnableChannel>
 800c13c:	e00a      	b.n	800c154 <R3_1_RLDetectionModeDisable+0x11c>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c142:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800c146:	2b02      	cmp	r3, #2
 800c148:	d104      	bne.n	800c154 <R3_1_RLDetectionModeDisable+0x11c>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800c14a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c14e:	68b8      	ldr	r0, [r7, #8]
 800c150:	f7fe fd5d 	bl	800ac0e <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH3( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c15a:	085b      	lsrs	r3, r3, #1
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	4619      	mov	r1, r3
 800c160:	68b8      	ldr	r0, [r7, #8]
 800c162:	f7fe fe77 	bl	800ae54 <LL_TIM_OC_SetCompareCH3>
    
    /* ADCx Injected discontinuous mode disable */
    LL_ADC_INJ_SetSequencerDiscont( pHandle->pParams_str->ADCx,
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2100      	movs	r1, #0
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fe fbd6 	bl	800a920 <LL_ADC_INJ_SetSequencerDiscont>
                                    LL_ADC_INJ_SEQ_DISCONT_DISABLE );

    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	4a09      	ldr	r2, [pc, #36]	; (800c19c <R3_1_RLDetectionModeDisable+0x164>)
 800c178:	605a      	str	r2, [r3, #4]
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	4a08      	ldr	r2, [pc, #32]	; (800c1a0 <R3_1_RLDetectionModeDisable+0x168>)
 800c17e:	615a      	str	r2, [r3, #20]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	4a08      	ldr	r2, [pc, #32]	; (800c1a4 <R3_1_RLDetectionModeDisable+0x16c>)
 800c184:	60da      	str	r2, [r3, #12]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	4a07      	ldr	r2, [pc, #28]	; (800c1a8 <R3_1_RLDetectionModeDisable+0x170>)
 800c18a:	609a      	str	r2, [r3, #8]

    pHandle->_Super.RLDetectionMode = false;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }
}
 800c194:	bf00      	nop
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	0800b65d 	.word	0x0800b65d
 800c1a0:	0800bad3 	.word	0x0800bad3
 800c1a4:	0800bb7f 	.word	0x0800bb7f
 800c1a8:	0800bcc1 	.word	0x0800bcc1

0800c1ac <R3_1_RLDetectionModeSetDuty>:
 * @param  hDuty to be applied in uint16_t
 * @retval It returns the code error 'MC_FOC_DURATION' if any, 'MC_NO_ERROR'
 *         otherwise. These error codes are defined in mc_type.h
 */
uint16_t R3_1_RLDetectionModeSetDuty( PWMC_Handle_t * pHdl, uint16_t hDuty )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b086      	sub	sp, #24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	807b      	strh	r3, [r7, #2]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	60fb      	str	r3, [r7, #12]
  uint32_t val;
  uint16_t hAux;


  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	887b      	ldrh	r3, [r7, #2]
 800c1ce:	fb03 f302 	mul.w	r3, r3, r2
 800c1d2:	0c1b      	lsrs	r3, r3, #16
 800c1d4:	60bb      	str	r3, [r7, #8]
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	865a      	strh	r2, [r3, #50]	; 0x32
  
  /* set sector in order to sample phase B */
  pHandle->_Super.Sector = SECTOR_4;
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	2203      	movs	r2, #3
 800c1e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  /* TIM1 Channel 1 Duty Cycle configuration.
   * In RL Detection mode only the Up-side device of Phase A are controlled*/
  LL_TIM_OC_SetCompareCH1(TIMx, ( uint32_t )pHandle->_Super.CntPhA);
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f7fe fe15 	bl	800ae1c <LL_TIM_OC_SetCompareCH1>


  /* Limit for update event */
  /*  If an update event has occurred before to set new
  values of regs the FOC rate is too high */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d002      	beq.n	800c204 <R3_1_RLDetectionModeSetDuty+0x58>
  {
    hAux = MC_FOC_DURATION;
 800c1fe:	2301      	movs	r3, #1
 800c200:	82fb      	strh	r3, [r7, #22]
 800c202:	e001      	b.n	800c208 <R3_1_RLDetectionModeSetDuty+0x5c>
  }
  else
  {
    hAux = MC_NO_ERROR;
 800c204:	2300      	movs	r3, #0
 800c206:	82fb      	strh	r3, [r7, #22]
  }
  if ( pHandle->_Super.SWerror == 1u )
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d104      	bne.n	800c21a <R3_1_RLDetectionModeSetDuty+0x6e>
  {
    hAux = MC_FOC_DURATION;
 800c210:	2301      	movs	r3, #1
 800c212:	82fb      	strh	r3, [r7, #22]
    pHandle->_Super.SWerror = 0u;
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	2200      	movs	r2, #0
 800c218:	871a      	strh	r2, [r3, #56]	; 0x38
  }
  return hAux;
 800c21a:	8afb      	ldrh	r3, [r7, #22]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3718      	adds	r7, #24
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <R3_1_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_1_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b086      	sub	sp, #24
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	60fb      	str	r3, [r7, #12]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800c23a:	2100      	movs	r1, #0
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f7fe fe25 	bl	800ae8c <LL_TIM_SetTriggerOutput>

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector];
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c246:	4619      	mov	r1, r3
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c252:	330e      	adds	r3, #14
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	4413      	add	r3, r2
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	1acb      	subs	r3, r1, r3
 800c25e:	617b      	str	r3, [r7, #20]

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	4a0d      	ldr	r2, [pc, #52]	; (800c298 <R3_1_RLGetPhaseCurrents+0x74>)
 800c264:	4293      	cmp	r3, r2
 800c266:	db08      	blt.n	800c27a <R3_1_RLGetPhaseCurrents+0x56>
  {
    if ( wAux < INT16_MAX )
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c26e:	4293      	cmp	r3, r2
 800c270:	dd05      	ble.n	800c27e <R3_1_RLGetPhaseCurrents+0x5a>
    {
    }
    else
    {
      wAux = INT16_MAX;
 800c272:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800c276:	617b      	str	r3, [r7, #20]
 800c278:	e001      	b.n	800c27e <R3_1_RLGetPhaseCurrents+0x5a>
    }
  }
  else
  {
    wAux = -INT16_MAX;
 800c27a:	4b08      	ldr	r3, [pc, #32]	; (800c29c <R3_1_RLGetPhaseCurrents+0x78>)
 800c27c:	617b      	str	r3, [r7, #20]
  }

  pStator_Currents->a = (int16_t)wAux;
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	b21a      	sxth	r2, r3
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	801a      	strh	r2, [r3, #0]
  pStator_Currents->b = (int16_t)wAux;
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	b21a      	sxth	r2, r3
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	805a      	strh	r2, [r3, #2]
}
 800c28e:	bf00      	nop
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	ffff8002 	.word	0xffff8002
 800c29c:	ffff8001 	.word	0xffff8001

0800c2a0 <R3_1_RLTurnOnLowSides>:
  *         This function is specific for RL detection phase.
  * @param pHdl: handler of the current instance of the PWM component
  * @retval none
  */
static void R3_1_RLTurnOnLowSides( PWMC_Handle_t * pHdl )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	60bb      	str	r3, [r7, #8]

  /*Turn on the phase A low side switch */
  LL_TIM_OC_SetCompareCH1 ( TIMx, 0u );
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	68b8      	ldr	r0, [r7, #8]
 800c2b8:	f7fe fdb0 	bl	800ae1c <LL_TIM_OC_SetCompareCH1>

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800c2bc:	68b8      	ldr	r0, [r7, #8]
 800c2be:	f7fe fe18 	bl	800aef2 <LL_TIM_ClearFlag_UPDATE>

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800c2c2:	bf00      	nop
 800c2c4:	68b8      	ldr	r0, [r7, #8]
 800c2c6:	f7fe fe22 	bl	800af0e <LL_TIM_IsActiveFlag_UPDATE>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d0f9      	beq.n	800c2c4 <R3_1_RLTurnOnLowSides+0x24>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800c2d0:	68b8      	ldr	r0, [r7, #8]
 800c2d2:	f7fe fe0e 	bl	800aef2 <LL_TIM_ClearFlag_UPDATE>
  
  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
 800c2d6:	68b8      	ldr	r0, [r7, #8]
 800c2d8:	f7fe fdeb 	bl	800aeb2 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2e0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d121      	bne.n	800c32c <R3_1_RLTurnOnLowSides+0x8c>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2ec:	699a      	ldr	r2, [r3, #24]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2f2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	4610      	mov	r0, r2
 800c2fa:	f7fe fe8b 	bl	800b014 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c302:	69da      	ldr	r2, [r3, #28]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c308:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800c30c:	4619      	mov	r1, r3
 800c30e:	4610      	mov	r0, r2
 800c310:	f7fe fe8e 	bl	800b030 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c318:	6a1a      	ldr	r2, [r3, #32]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c31e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800c322:	4619      	mov	r1, r3
 800c324:	4610      	mov	r0, r2
 800c326:	f7fe fe83 	bl	800b030 <LL_GPIO_ResetOutputPin>
  }
  return;
 800c32a:	bf00      	nop
 800c32c:	bf00      	nop
}
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <R3_1_RLSwitchOnPWM>:
 *         This function is specific for RL detection phase.
 * @param pHdl: handler of the current instance of the PWM component
 * @retval none
 */
static void R3_1_RLSwitchOnPWM( PWMC_Handle_t * pHdl )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b086      	sub	sp, #24
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	60fb      	str	r3, [r7, #12]
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	2200      	movs	r2, #0
 800c354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  /* The folowing while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

   /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 800c358:	bf00      	nop
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f003 0310 	and.w	r3, r3, #16
 800c362:	2b10      	cmp	r3, #16
 800c364:	d0f9      	beq.n	800c35a <R3_1_RLSwitchOnPWM+0x26>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 800c366:	bf00      	nop
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f003 0310 	and.w	r3, r3, #16
 800c370:	2b00      	cmp	r3, #0
 800c372:	d0f9      	beq.n	800c368 <R3_1_RLSwitchOnPWM+0x34>
  {
  }

  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);
 800c374:	2101      	movs	r1, #1
 800c376:	6938      	ldr	r0, [r7, #16]
 800c378:	f7fe fd50 	bl	800ae1c <LL_TIM_OC_SetCompareCH1>

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c382:	3b05      	subs	r3, #5
 800c384:	4619      	mov	r1, r3
 800c386:	6938      	ldr	r0, [r7, #16]
 800c388:	f7fe fd72 	bl	800ae70 <LL_TIM_OC_SetCompareCH4>
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */
 800c38c:	6938      	ldr	r0, [r7, #16]
 800c38e:	f7fe fdb0 	bl	800aef2 <LL_TIM_ClearFlag_UPDATE>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800c392:	bf00      	nop
 800c394:	6938      	ldr	r0, [r7, #16]
 800c396:	f7fe fdba 	bl	800af0e <LL_TIM_IsActiveFlag_UPDATE>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d0f9      	beq.n	800c394 <R3_1_RLSwitchOnPWM+0x60>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800c3a0:	6938      	ldr	r0, [r7, #16]
 800c3a2:	f7fe fda6 	bl	800aef2 <LL_TIM_ClearFlag_UPDATE>
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3aa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);
 800c3b2:	6938      	ldr	r0, [r7, #16]
 800c3b4:	f7fe fd7d 	bl	800aeb2 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3bc:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800c3c0:	2b02      	cmp	r3, #2
 800c3c2:	d149      	bne.n	800c458 <R3_1_RLSwitchOnPWM+0x124>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	6a1a      	ldr	r2, [r3, #32]
 800c3c8:	f240 5355 	movw	r3, #1365	; 0x555
 800c3cc:	4013      	ands	r3, r2
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d021      	beq.n	800c416 <R3_1_RLSwitchOnPWM+0xe2>
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3d6:	699a      	ldr	r2, [r3, #24]
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3dc:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	4610      	mov	r0, r2
 800c3e4:	f7fe fe16 	bl	800b014 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3ec:	69da      	ldr	r2, [r3, #28]
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3f2:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	4610      	mov	r0, r2
 800c3fa:	f7fe fe0b 	bl	800b014 <LL_GPIO_SetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c402:	6a1a      	ldr	r2, [r3, #32]
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c408:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800c40c:	4619      	mov	r1, r3
 800c40e:	4610      	mov	r0, r2
 800c410:	f7fe fe0e 	bl	800b030 <LL_GPIO_ResetOutputPin>
 800c414:	e020      	b.n	800c458 <R3_1_RLSwitchOnPWM+0x124>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c41a:	699a      	ldr	r2, [r3, #24]
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c420:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800c424:	4619      	mov	r1, r3
 800c426:	4610      	mov	r0, r2
 800c428:	f7fe fe02 	bl	800b030 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c430:	69da      	ldr	r2, [r3, #28]
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c436:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800c43a:	4619      	mov	r1, r3
 800c43c:	4610      	mov	r0, r2
 800c43e:	f7fe fdf7 	bl	800b030 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c446:	6a1a      	ldr	r2, [r3, #32]
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c44c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800c450:	4619      	mov	r1, r3
 800c452:	4610      	mov	r0, r2
 800c454:	f7fe fdec 	bl	800b030 <LL_GPIO_ResetOutputPin>
    }
  }

  /* set the sector that correspond to Phase A and B sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2203      	movs	r2, #3
 800c45c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  LL_ADC_INJ_StartConversion( ADCx );
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f7fe fb05 	bl	800aa70 <LL_ADC_INJ_StartConversion>

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
 800c466:	6938      	ldr	r0, [r7, #16]
 800c468:	f7fe fd94 	bl	800af94 <LL_TIM_EnableIT_UPDATE>



  return;
 800c46c:	bf00      	nop
}
 800c46e:	3718      	adds	r7, #24
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <RVBS_Init>:
    It must be called only after PWMC_Init.
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Init( RDivider_Handle_t * pHandle )
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  /* Need to be register with RegularConvManager */
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	330c      	adds	r3, #12
 800c480:	4618      	mov	r0, r3
 800c482:	f7f6 fe2f 	bl	80030e4 <RCM_RegisterRegConv>
 800c486:	4603      	mov	r3, r0
 800c488:	461a      	mov	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  /* Check */
  RVBS_Clear( pHandle );
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 f804 	bl	800c49e <RVBS_Clear>
}
 800c496:	bf00      	nop
 800c498:	3708      	adds	r7, #8
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 800c49e:	b480      	push	{r7}
 800c4a0:	b085      	sub	sp, #20
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	8b5b      	ldrh	r3, [r3, #26]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	8b9b      	ldrh	r3, [r3, #28]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	085b      	lsrs	r3, r3, #1
 800c4b4:	81bb      	strh	r3, [r7, #12]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	81fb      	strh	r3, [r7, #14]
 800c4ba:	e009      	b.n	800c4d0 <RVBS_Clear+0x32>
  {
    pHandle->aBuffer[index] = aux;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6a1a      	ldr	r2, [r3, #32]
 800c4c0:	89fb      	ldrh	r3, [r7, #14]
 800c4c2:	005b      	lsls	r3, r3, #1
 800c4c4:	4413      	add	r3, r2
 800c4c6:	89ba      	ldrh	r2, [r7, #12]
 800c4c8:	801a      	strh	r2, [r3, #0]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800c4ca:	89fb      	ldrh	r3, [r7, #14]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	81fb      	strh	r3, [r7, #14]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	8b1b      	ldrh	r3, [r3, #24]
 800c4d4:	89fa      	ldrh	r2, [r7, #14]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d3f0      	bcc.n	800c4bc <RVBS_Clear+0x1e>
  }
  pHandle->_Super.LatestConv = aux;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	89ba      	ldrh	r2, [r7, #12]
 800c4de:	809a      	strh	r2, [r3, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	89ba      	ldrh	r2, [r7, #12]
 800c4e4:	80da      	strh	r2, [r3, #6]
  pHandle->index = 0;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800c4ee:	bf00      	nop
 800c4f0:	3714      	adds	r7, #20
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <RVBS_ConvertVbusFiltrered>:

static uint16_t RVBS_ConvertVbusFiltrered( RDivider_Handle_t * pHandle )
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b086      	sub	sp, #24
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
  uint16_t hAux;
  uint8_t vindex;
  uint16_t max = 0, min = 0;
 800c502:	2300      	movs	r3, #0
 800c504:	82bb      	strh	r3, [r7, #20]
 800c506:	2300      	movs	r3, #0
 800c508:	827b      	strh	r3, [r7, #18]
  uint32_t tot = 0u;
 800c50a:	2300      	movs	r3, #0
 800c50c:	60fb      	str	r3, [r7, #12]

  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 800c50e:	2300      	movs	r3, #0
 800c510:	75fb      	strb	r3, [r7, #23]
 800c512:	e027      	b.n	800c564 <RVBS_ConvertVbusFiltrered+0x6a>
  {
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7f6 fe98 	bl	8003250 <RCM_ExecRegularConv>
 800c520:	4603      	mov	r3, r0
 800c522:	817b      	strh	r3, [r7, #10]

    if ( hAux != 0xFFFFu )
 800c524:	897b      	ldrh	r3, [r7, #10]
 800c526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d01a      	beq.n	800c564 <RVBS_ConvertVbusFiltrered+0x6a>
    {
      if ( vindex == 0 )
 800c52e:	7dfb      	ldrb	r3, [r7, #23]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d104      	bne.n	800c53e <RVBS_ConvertVbusFiltrered+0x44>
      {
        min = hAux;
 800c534:	897b      	ldrh	r3, [r7, #10]
 800c536:	827b      	strh	r3, [r7, #18]
        max = hAux;
 800c538:	897b      	ldrh	r3, [r7, #10]
 800c53a:	82bb      	strh	r3, [r7, #20]
 800c53c:	e00b      	b.n	800c556 <RVBS_ConvertVbusFiltrered+0x5c>
      }
      else
      {
        if ( hAux < min )
 800c53e:	897a      	ldrh	r2, [r7, #10]
 800c540:	8a7b      	ldrh	r3, [r7, #18]
 800c542:	429a      	cmp	r2, r3
 800c544:	d201      	bcs.n	800c54a <RVBS_ConvertVbusFiltrered+0x50>
        {
          min = hAux;
 800c546:	897b      	ldrh	r3, [r7, #10]
 800c548:	827b      	strh	r3, [r7, #18]
        }
        if ( hAux > max )
 800c54a:	897a      	ldrh	r2, [r7, #10]
 800c54c:	8abb      	ldrh	r3, [r7, #20]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d901      	bls.n	800c556 <RVBS_ConvertVbusFiltrered+0x5c>
        {
          max = hAux;
 800c552:	897b      	ldrh	r3, [r7, #10]
 800c554:	82bb      	strh	r3, [r7, #20]
        }
      }
      vindex++;
 800c556:	7dfb      	ldrb	r3, [r7, #23]
 800c558:	3301      	adds	r3, #1
 800c55a:	75fb      	strb	r3, [r7, #23]

      tot += hAux;
 800c55c:	897b      	ldrh	r3, [r7, #10]
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	4413      	add	r3, r2
 800c562:	60fb      	str	r3, [r7, #12]
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 800c564:	7dfb      	ldrb	r3, [r7, #23]
 800c566:	b29a      	uxth	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	8b1b      	ldrh	r3, [r3, #24]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d3d1      	bcc.n	800c514 <RVBS_ConvertVbusFiltrered+0x1a>
    }
  }

  tot -= max;
 800c570:	8abb      	ldrh	r3, [r7, #20]
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	60fb      	str	r3, [r7, #12]
  tot -= min;
 800c578:	8a7b      	ldrh	r3, [r7, #18]
 800c57a:	68fa      	ldr	r2, [r7, #12]
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	60fb      	str	r3, [r7, #12]
  return ( uint16_t )( tot / ( pHandle->LowPassFilterBW - 2u ) );
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	8b1b      	ldrh	r3, [r3, #24]
 800c584:	3b02      	subs	r3, #2
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	fbb2 f3f3 	udiv	r3, r2, r3
 800c58c:	b29b      	uxth	r3, r3
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3718      	adds	r7, #24
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <RVBS_CalcAvVbusFilt>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CalcAvVbusFilt( RDivider_Handle_t * pHandle )
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b084      	sub	sp, #16
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
  uint32_t wtemp;
  uint16_t hAux;
  uint8_t i;

  hAux = RVBS_ConvertVbusFiltrered( pHandle );
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f7ff ffab 	bl	800c4fa <RVBS_ConvertVbusFiltrered>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	813b      	strh	r3, [r7, #8]

  if ( hAux != 0xFFFF )
 800c5a8:	893b      	ldrh	r3, [r7, #8]
 800c5aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d044      	beq.n	800c63c <RVBS_CalcAvVbusFilt+0xa6>
  {
    pHandle->aBuffer[pHandle->index] = hAux;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a1a      	ldr	r2, [r3, #32]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c5bc:	005b      	lsls	r3, r3, #1
 800c5be:	4413      	add	r3, r2
 800c5c0:	893a      	ldrh	r2, [r7, #8]
 800c5c2:	801a      	strh	r2, [r3, #0]
    wtemp = 0;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	72fb      	strb	r3, [r7, #11]
 800c5cc:	e00c      	b.n	800c5e8 <RVBS_CalcAvVbusFilt+0x52>
    {
      wtemp += pHandle->aBuffer[i];
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6a1a      	ldr	r2, [r3, #32]
 800c5d2:	7afb      	ldrb	r3, [r7, #11]
 800c5d4:	005b      	lsls	r3, r3, #1
 800c5d6:	4413      	add	r3, r2
 800c5d8:	881b      	ldrh	r3, [r3, #0]
 800c5da:	461a      	mov	r2, r3
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	4413      	add	r3, r2
 800c5e0:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800c5e2:	7afb      	ldrb	r3, [r7, #11]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	72fb      	strb	r3, [r7, #11]
 800c5e8:	7afb      	ldrb	r3, [r7, #11]
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	8b1b      	ldrh	r3, [r3, #24]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d3ec      	bcc.n	800c5ce <RVBS_CalcAvVbusFilt+0x38>
    }
    wtemp /= pHandle->LowPassFilterBW;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	8b1b      	ldrh	r3, [r3, #24]
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c600:	60fb      	str	r3, [r7, #12]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	b29a      	uxth	r2, r3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.LatestConv = hAux;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	893a      	ldrh	r2, [r7, #8]
 800c60e:	809a      	strh	r2, [r3, #4]

    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c616:	461a      	mov	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	8b1b      	ldrh	r3, [r3, #24]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	429a      	cmp	r2, r3
 800c620:	da08      	bge.n	800c634 <RVBS_CalcAvVbusFilt+0x9e>
    {
      pHandle->index++;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c628:	3301      	adds	r3, #1
 800c62a:	b2da      	uxtb	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800c632:	e003      	b.n	800c63c <RVBS_CalcAvVbusFilt+0xa6>
    }
    else
    {
      pHandle->index = 0;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 f80a 	bl	800c656 <RVBS_CheckFaultState>
 800c642:	4603      	mov	r3, r0
 800c644:	461a      	mov	r2, r3
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	811a      	strh	r2, [r3, #8]

  return ( pHandle->_Super.FaultState );
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	891b      	ldrh	r3, [r3, #8]
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
 800c656:	b480      	push	{r7}
 800c658:	b085      	sub	sp, #20
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	88da      	ldrh	r2, [r3, #6]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	8b5b      	ldrh	r3, [r3, #26]
 800c666:	429a      	cmp	r2, r3
 800c668:	d902      	bls.n	800c670 <RVBS_CheckFaultState+0x1a>
  {
    fault = MC_OVER_VOLT;
 800c66a:	2302      	movs	r3, #2
 800c66c:	81fb      	strh	r3, [r7, #14]
 800c66e:	e00a      	b.n	800c686 <RVBS_CheckFaultState+0x30>
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	88da      	ldrh	r2, [r3, #6]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	8b9b      	ldrh	r3, [r3, #28]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d202      	bcs.n	800c682 <RVBS_CheckFaultState+0x2c>
  {
    fault = MC_UNDER_VOLT;
 800c67c:	2304      	movs	r3, #4
 800c67e:	81fb      	strh	r3, [r7, #14]
 800c680:	e001      	b.n	800c686 <RVBS_CheckFaultState+0x30>
  }
  else
  {
    fault = MC_NO_ERROR;
 800c682:	2300      	movs	r3, #0
 800c684:	81fb      	strh	r3, [r7, #14]
  }
  return fault;
 800c686:	89fb      	ldrh	r3, [r7, #14]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3714      	adds	r7, #20
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <REMNG_Init>:
  * @brief  It reset the state variable to zero.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  pHandle->Ext = 0;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	609a      	str	r2, [r3, #8]
  pHandle->TargetFinal = 0;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	605a      	str	r2, [r3, #4]
  pHandle->RampRemainingStep = 0u;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	611a      	str	r2, [r3, #16]
  pHandle->ScalingFactor = 1u;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	615a      	str	r2, [r3, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800c6ba:	bf00      	nop
 800c6bc:	370c      	adds	r7, #12
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <REMNG_Calc>:
            It must be called at fixed interval defined in the hExecFreq.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval int32_t value of the state variable
  */
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b085      	sub	sp, #20
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	60fb      	str	r3, [r7, #12]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d90a      	bls.n	800c6f2 <REMNG_Calc+0x2c>
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	691b      	ldr	r3, [r3, #16]
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	60fb      	str	r3, [r7, #12]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	1e5a      	subs	r2, r3, #1
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	60da      	str	r2, [r3, #12]
 800c6f0:	e00d      	b.n	800c70e <REMNG_Calc+0x48>
  }
  else if ( pHandle->RampRemainingStep == 1u )
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d109      	bne.n	800c70e <REMNG_Calc+0x48>
  {
    /* Set the backup value of TargetFinal. */
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	6952      	ldr	r2, [r2, #20]
 800c702:	fb02 f303 	mul.w	r3, r2, r3
 800c706:	60fb      	str	r3, [r7, #12]
    pHandle->RampRemainingStep = 0u;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	60da      	str	r2, [r3, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	609a      	str	r2, [r3, #8]

#ifdef FASTDIV
  ret_val = FD_FastDiv( & ( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	6952      	ldr	r2, [r2, #20]
 800c71c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c720:	60bb      	str	r3, [r7, #8]
#endif

  return ret_val;
 800c722:	68bb      	ldr	r3, [r7, #8]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3714      	adds	r7, #20
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <REMNG_ExecRamp>:
  *         milliseconds. It is possible to set 0 to perform an instantaneous
  *         change in the value.
  * @retval bool It returns true is command is valid, false otherwise
  */
__weak bool REMNG_ExecRamp( RampExtMngr_Handle_t * pHandle, int32_t TargetFinal, uint32_t Durationms )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b08c      	sub	sp, #48	; 0x30
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
  uint32_t aux;
  int32_t aux1;
  int32_t current_ref;
  bool retVal = true;
 800c73c:	2301      	movs	r3, #1
 800c73e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Get current state */
#ifdef FASTDIV
  current_ref = FD_FastDiv( &( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	6952      	ldr	r2, [r2, #20]
 800c74a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c74e:	627b      	str	r3, [r7, #36]	; 0x24
#endif

  if ( Durationms == 0u )
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d114      	bne.n	800c780 <REMNG_ExecRamp+0x50>
  {
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 800c756:	68b8      	ldr	r0, [r7, #8]
 800c758:	f000 f887 	bl	800c86a <getScalingFactor>
 800c75c:	4602      	mov	r2, r0
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	615a      	str	r2, [r3, #20]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	695b      	ldr	r3, [r3, #20]
 800c766:	461a      	mov	r2, r3
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	fb03 f202 	mul.w	r2, r3, r2
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	609a      	str	r2, [r3, #8]
    pHandle->RampRemainingStep = 0u;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2200      	movs	r2, #0
 800c776:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2200      	movs	r2, #0
 800c77c:	611a      	str	r2, [r3, #16]
 800c77e:	e059      	b.n	800c834 <REMNG_ExecRamp+0x104>
  }
  else
  {
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 800c780:	68ba      	ldr	r2, [r7, #8]
 800c782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c784:	1ad3      	subs	r3, r2, r3
 800c786:	4618      	mov	r0, r3
 800c788:	f000 f86f 	bl	800c86a <getScalingFactor>
 800c78c:	6238      	str	r0, [r7, #32]
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 800c78e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c790:	f000 f86b 	bl	800c86a <getScalingFactor>
 800c794:	61f8      	str	r0, [r7, #28]
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 800c796:	68b8      	ldr	r0, [r7, #8]
 800c798:	f000 f867 	bl	800c86a <getScalingFactor>
 800c79c:	61b8      	str	r0, [r7, #24]
    uint32_t wScalingFactorMin;

    if ( wScalingFactor <  wScalingFactor2 )
 800c79e:	6a3a      	ldr	r2, [r7, #32]
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d209      	bcs.n	800c7ba <REMNG_ExecRamp+0x8a>
    {
      if ( wScalingFactor < wScalingFactor3 )
 800c7a6:	6a3a      	ldr	r2, [r7, #32]
 800c7a8:	69bb      	ldr	r3, [r7, #24]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d202      	bcs.n	800c7b4 <REMNG_ExecRamp+0x84>
      {
        wScalingFactorMin = wScalingFactor;
 800c7ae:	6a3b      	ldr	r3, [r7, #32]
 800c7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7b2:	e00b      	b.n	800c7cc <REMNG_ExecRamp+0x9c>
      }
      else
      {
        wScalingFactorMin = wScalingFactor3;
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7b8:	e008      	b.n	800c7cc <REMNG_ExecRamp+0x9c>
      }
    }
    else
    {
      if ( wScalingFactor2 < wScalingFactor3 )
 800c7ba:	69fa      	ldr	r2, [r7, #28]
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d202      	bcs.n	800c7c8 <REMNG_ExecRamp+0x98>
      {
        wScalingFactorMin = wScalingFactor2;
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7c6:	e001      	b.n	800c7cc <REMNG_ExecRamp+0x9c>
      }
      else
      {
        wScalingFactorMin = wScalingFactor3;
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
    }

    pHandle->ScalingFactor = wScalingFactorMin;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7d0:	615a      	str	r2, [r3, #20]
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	695b      	ldr	r3, [r3, #20]
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7da:	fb03 f202 	mul.w	r2, r3, r2
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	609a      	str	r2, [r3, #8]

    /* Store the TargetFinal to be applied in the last step */
    pHandle->TargetFinal = TargetFinal;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	68ba      	ldr	r2, [r7, #8]
 800c7e6:	605a      	str	r2, [r3, #4]

    /* Compute the (wRampRemainingStep) number of steps remaining to complete
    the ramp. */
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	fb02 f303 	mul.w	r3, r2, r3
 800c7f2:	617b      	str	r3, [r7, #20]
    aux /= 1000u;
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	4a12      	ldr	r2, [pc, #72]	; (800c840 <REMNG_ExecRamp+0x110>)
 800c7f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c7fc:	099b      	lsrs	r3, r3, #6
 800c7fe:	617b      	str	r3, [r7, #20]
    pHandle->RampRemainingStep = aux;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	697a      	ldr	r2, [r7, #20]
 800c804:	60da      	str	r2, [r3, #12]
    pHandle->RampRemainingStep++;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	1c5a      	adds	r2, r3, #1
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	60da      	str	r2, [r3, #12]

    /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
    the reference value at each CalcTorqueReference. */
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	6952      	ldr	r2, [r2, #20]
 800c81a:	fb02 f303 	mul.w	r3, r2, r3
 800c81e:	613b      	str	r3, [r7, #16]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	461a      	mov	r2, r3
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	fb93 f3f2 	sdiv	r3, r3, r2
 800c82c:	613b      	str	r3, [r7, #16]
    pHandle->IncDecAmount = aux1;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	693a      	ldr	r2, [r7, #16]
 800c832:	611a      	str	r2, [r3, #16]
  }

  return retVal;
 800c834:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3730      	adds	r7, #48	; 0x30
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	10624dd3 	.word	0x10624dd3

0800c844 <REMNG_RampCompleted>:
  * @brief  Check if the settled ramp has been completed.
  * @param  pHandle related Handle of struct RampMngr_Handle_t.
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  bool retVal = false;
 800c84c:	2300      	movs	r3, #0
 800c84e:	73fb      	strb	r3, [r7, #15]
  if ( pHandle->RampRemainingStep == 0u )
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d101      	bne.n	800c85c <REMNG_RampCompleted+0x18>
  {
    retVal = true;
 800c858:	2301      	movs	r3, #1
 800c85a:	73fb      	strb	r3, [r7, #15]
  }
  return retVal;
 800c85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3714      	adds	r7, #20
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr

0800c86a <getScalingFactor>:
  *         It allows to keep Target * Scaling factor inside int32_t type.
  * @param  Target Input data.
  * @retval uint32_t It returns the optimized scaling factor.
  */
__weak uint32_t getScalingFactor( int32_t Target )
{
 800c86a:	b480      	push	{r7}
 800c86c:	b087      	sub	sp, #28
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2b00      	cmp	r3, #0
 800c876:	da05      	bge.n	800c884 <getScalingFactor+0x1a>
  {
    aux = -Target;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	425b      	negs	r3, r3
 800c87c:	60fb      	str	r3, [r7, #12]
    TargetAbs = ( uint32_t )( aux );
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	613b      	str	r3, [r7, #16]
 800c882:	e001      	b.n	800c888 <getScalingFactor+0x1e>
  }
  else
  {
    TargetAbs = ( uint32_t )( Target );
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	613b      	str	r3, [r7, #16]
  }
  for ( i = 1u; i < 32u; i++ )
 800c888:	2301      	movs	r3, #1
 800c88a:	75fb      	strb	r3, [r7, #23]
 800c88c:	e00d      	b.n	800c8aa <getScalingFactor+0x40>
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 800c88e:	7dfb      	ldrb	r3, [r7, #23]
 800c890:	f1c3 031f 	rsb	r3, r3, #31
 800c894:	2201      	movs	r2, #1
 800c896:	fa02 f303 	lsl.w	r3, r2, r3
 800c89a:	60bb      	str	r3, [r7, #8]
    if ( TargetAbs >= limit )
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d206      	bcs.n	800c8b2 <getScalingFactor+0x48>
  for ( i = 1u; i < 32u; i++ )
 800c8a4:	7dfb      	ldrb	r3, [r7, #23]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	75fb      	strb	r3, [r7, #23]
 800c8aa:	7dfb      	ldrb	r3, [r7, #23]
 800c8ac:	2b1f      	cmp	r3, #31
 800c8ae:	d9ee      	bls.n	800c88e <getScalingFactor+0x24>
 800c8b0:	e000      	b.n	800c8b4 <getScalingFactor+0x4a>
    {
      break;
 800c8b2:	bf00      	nop
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
 800c8b4:	7dfb      	ldrb	r3, [r7, #23]
 800c8b6:	3b01      	subs	r3, #1
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	fa02 f303 	lsl.w	r3, r2, r3
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	371c      	adds	r7, #28
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <SPD_GetElAngle>:
  *         s16degrees. 1 s16degree = 360ï¿½/65536
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
 800c8ca:	b480      	push	{r7}
 800c8cc:	b083      	sub	sp, #12
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  return ( pHandle->hElAngle );
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <SPD_GetAvrgMecSpeedUnit>:
  * @brief  Returns the last computed average mechanical speed, expressed in
  *         the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  return ( pHandle->hAvrMecSpeedUnit );
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	370c      	adds	r7, #12
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr

0800c8fe <SPD_GetInstElSpeedDpp>:
  *         SPD_CalcElectricalAngle).
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
 800c8fe:	b480      	push	{r7}
 800c900:	b083      	sub	sp, #12
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
  return ( pHandle->InstantaneousElSpeedDpp );
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable( SpeednPosFdbk_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 800c918:	b480      	push	{r7}
 800c91a:	b087      	sub	sp, #28
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = true;
 800c922:	2301      	movs	r3, #1
 800c924:	75fb      	strb	r3, [r7, #23]
  uint8_t bSpeedErrorNumber;
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	78db      	ldrb	r3, [r3, #3]
 800c92a:	73fb      	strb	r3, [r7, #15]

  bool SpeedError = false;
 800c92c:	2300      	movs	r3, #0
 800c92e:	757b      	strb	r3, [r7, #21]
  uint16_t hAbsMecSpeedUnit, hAbsMecAccelUnitP;
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	75bb      	strb	r3, [r7, #22]

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	da09      	bge.n	800c954 <SPD_IsMecSpeedReliable+0x3c>
  {
    hAux = -( *pMecSpeedUnit );
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c946:	b29b      	uxth	r3, r3
 800c948:	425b      	negs	r3, r3
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	81bb      	strh	r3, [r7, #12]
    hAbsMecSpeedUnit = ( uint16_t )( hAux );
 800c94e:	89bb      	ldrh	r3, [r7, #12]
 800c950:	827b      	strh	r3, [r7, #18]
 800c952:	e003      	b.n	800c95c <SPD_IsMecSpeedReliable+0x44>
  }
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c95a:	827b      	strh	r3, [r7, #18]
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	8a9b      	ldrh	r3, [r3, #20]
 800c960:	8a7a      	ldrh	r2, [r7, #18]
 800c962:	429a      	cmp	r2, r3
 800c964:	d901      	bls.n	800c96a <SPD_IsMecSpeedReliable+0x52>
  {
    SpeedError = true;
 800c966:	2301      	movs	r3, #1
 800c968:	757b      	strb	r3, [r7, #21]
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	8adb      	ldrh	r3, [r3, #22]
 800c96e:	8a7a      	ldrh	r2, [r7, #18]
 800c970:	429a      	cmp	r2, r3
 800c972:	d201      	bcs.n	800c978 <SPD_IsMecSpeedReliable+0x60>
  {
    SpeedError = true;
 800c974:	2301      	movs	r3, #1
 800c976:	757b      	strb	r3, [r7, #21]
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	da09      	bge.n	800c996 <SPD_IsMecSpeedReliable+0x7e>
  {
    hAux = -( pHandle->hMecAccelUnitP );
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c988:	b29b      	uxth	r3, r3
 800c98a:	425b      	negs	r3, r3
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	81bb      	strh	r3, [r7, #12]
    hAbsMecAccelUnitP = ( uint16_t )( hAux );
 800c990:	89bb      	ldrh	r3, [r7, #12]
 800c992:	823b      	strh	r3, [r7, #16]
 800c994:	e003      	b.n	800c99e <SPD_IsMecSpeedReliable+0x86>
  }
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c99c:	823b      	strh	r3, [r7, #16]
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	8b1b      	ldrh	r3, [r3, #24]
 800c9a2:	8a3a      	ldrh	r2, [r7, #16]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d901      	bls.n	800c9ac <SPD_IsMecSpeedReliable+0x94>
  {
    SpeedError = true;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	757b      	strb	r3, [r7, #21]
  }

  if ( SpeedError == true )
 800c9ac:	7d7b      	ldrb	r3, [r7, #21]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d007      	beq.n	800c9c2 <SPD_IsMecSpeedReliable+0xaa>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800c9b2:	7dba      	ldrb	r2, [r7, #22]
 800c9b4:	7bfb      	ldrb	r3, [r7, #15]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d209      	bcs.n	800c9ce <SPD_IsMecSpeedReliable+0xb6>
    {
      bSpeedErrorNumber++;
 800c9ba:	7dbb      	ldrb	r3, [r7, #22]
 800c9bc:	3301      	adds	r3, #1
 800c9be:	75bb      	strb	r3, [r7, #22]
 800c9c0:	e005      	b.n	800c9ce <SPD_IsMecSpeedReliable+0xb6>
    }
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800c9c2:	7dba      	ldrb	r2, [r7, #22]
 800c9c4:	7bfb      	ldrb	r3, [r7, #15]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d201      	bcs.n	800c9ce <SPD_IsMecSpeedReliable+0xb6>
    {
      bSpeedErrorNumber = 0u;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 800c9ce:	7dba      	ldrb	r2, [r7, #22]
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d101      	bne.n	800c9da <SPD_IsMecSpeedReliable+0xc2>
  {
    SpeedSensorReliability = false;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	75fb      	strb	r3, [r7, #23]
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	7dba      	ldrb	r2, [r7, #22]
 800c9de:	701a      	strb	r2, [r3, #0]

  return ( SpeedSensorReliability );
 800c9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	371c      	adds	r7, #28
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
 800c9ee:	b480      	push	{r7}
 800c9f0:	b085      	sub	sp, #20
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800c9fc:	60fb      	str	r3, [r7, #12]
  wAux *= INT16_MAX;
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	4613      	mov	r3, r2
 800ca02:	03db      	lsls	r3, r3, #15
 800ca04:	1a9b      	subs	r3, r3, r2
 800ca06:	60fb      	str	r3, [r7, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	8a9b      	ldrh	r3, [r3, #20]
 800ca0c:	b21b      	sxth	r3, r3
 800ca0e:	461a      	mov	r2, r3
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca16:	60fb      	str	r3, [r7, #12]
  return ( int16_t )wAux;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	b21b      	sxth	r3, r3
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]

  pHandle->PISpeed = pPI;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	611a      	str	r2, [r3, #16]
  pHandle->SPD = SPD_Handle;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	615a      	str	r2, [r3, #20]
  pHandle->Mode = pHandle->ModeDefault;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	701a      	strb	r2, [r3, #0]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800ca50:	041a      	lsls	r2, r3, #16
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	605a      	str	r2, [r3, #4]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800ca5c:	041a      	lsls	r2, r3, #16
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	609a      	str	r2, [r3, #8]
  pHandle->TargetFinal = 0;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2200      	movs	r2, #0
 800ca66:	805a      	strh	r2, [r3, #2]
  pHandle->RampRemainingStep = 0u;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2200      	movs	r2, #0
 800ca72:	619a      	str	r2, [r3, #24]
}
 800ca74:	bf00      	nop
 800ca76:	3714      	adds	r7, #20
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <STC_SetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  pHandle->SPD = SPD_Handle;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	683a      	ldr	r2, [r7, #0]
 800ca8e:	615a      	str	r2, [r3, #20]
}
 800ca90:	bf00      	nop
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <STC_GetSpeedSensor>:
  * @brief It returns the speed sensor utilized by the FOC.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  return ( pHandle->SPD );
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	695b      	ldr	r3, [r3, #20]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <STC_Clear>:
            speed mode, this method resets the integral term of speed regulator.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  if ( pHandle->Mode == STC_SPEED_MODE )
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d105      	bne.n	800cad0 <STC_Clear+0x1c>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	691b      	ldr	r3, [r3, #16]
 800cac8:	2100      	movs	r1, #0
 800caca:	4618      	mov	r0, r3
 800cacc:	f7fd fa63 	bl	8009f96 <PID_SetIntegralTerm>
  }
}
 800cad0:	bf00      	nop
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <STC_GetMecSpeedRefUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	da02      	bge.n	800caee <STC_GetMecSpeedRefUnit+0x16>
 800cae8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800caec:	33ff      	adds	r3, #255	; 0xff
 800caee:	141b      	asrs	r3, r3, #16
 800caf0:	b21b      	sxth	r3, r3
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	370c      	adds	r7, #12
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr

0800cafe <STC_GetTorqueRef>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
 800cafe:	b480      	push	{r7}
 800cb00:	b083      	sub	sp, #12
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	689b      	ldr	r3, [r3, #8]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	da02      	bge.n	800cb14 <STC_GetTorqueRef+0x16>
 800cb0e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800cb12:	33ff      	adds	r3, #255	; 0xff
 800cb14:	141b      	asrs	r3, r3, #16
 800cb16:	b21b      	sxth	r3, r3
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr

0800cb24 <STC_SetControlMode>:
  *         STC_TORQUE_MODE to enable the Torque mode or STC_SPEED_MODE to
  *         enable the Speed mode.
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	70fb      	strb	r3, [r7, #3]
  pHandle->Mode = bMode;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	78fa      	ldrb	r2, [r7, #3]
 800cb34:	701a      	strb	r2, [r3, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	60da      	str	r2, [r3, #12]
}
 800cb3c:	bf00      	nop
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b088      	sub	sp, #32
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	460b      	mov	r3, r1
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	817b      	strh	r3, [r7, #10]
  bool AllowedRange = true;
 800cb56:	2301      	movs	r3, #1
 800cb58:	77fb      	strb	r3, [r7, #31]
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d116      	bne.n	800cb90 <STC_ExecRamp+0x48>
  {
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f7ff ffcb 	bl	800cafe <STC_GetTorqueRef>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	83bb      	strh	r3, [r7, #28]
#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800cb6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800cb74:	4293      	cmp	r3, r2
 800cb76:	dd01      	ble.n	800cb7c <STC_ExecRamp+0x34>
    {
      AllowedRange = false;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	77fb      	strb	r3, [r7, #31]
    }
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800cb82:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	da2d      	bge.n	800cbe6 <STC_ExecRamp+0x9e>
    {
      AllowedRange = false;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	77fb      	strb	r3, [r7, #31]
 800cb8e:	e02a      	b.n	800cbe6 <STC_ExecRamp+0x9e>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	da02      	bge.n	800cb9e <STC_ExecRamp+0x56>
 800cb98:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800cb9c:	33ff      	adds	r3, #255	; 0xff
 800cb9e:	141b      	asrs	r3, r3, #16
 800cba0:	83bb      	strh	r3, [r7, #28]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800cba2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cba6:	68fa      	ldr	r2, [r7, #12]
 800cba8:	8bd2      	ldrh	r2, [r2, #30]
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	dd02      	ble.n	800cbb4 <STC_ExecRamp+0x6c>
    {
      AllowedRange = false;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	77fb      	strb	r3, [r7, #31]
 800cbb2:	e018      	b.n	800cbe6 <STC_ExecRamp+0x9e>
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800cbba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	da02      	bge.n	800cbc8 <STC_ExecRamp+0x80>
    {
      AllowedRange = false;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	77fb      	strb	r3, [r7, #31]
 800cbc6:	e00e      	b.n	800cbe6 <STC_ExecRamp+0x9e>
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800cbc8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	8c12      	ldrh	r2, [r2, #32]
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	da08      	bge.n	800cbe6 <STC_ExecRamp+0x9e>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800cbda:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	dd01      	ble.n	800cbe6 <STC_ExecRamp+0x9e>
      {
        AllowedRange = false;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	77fb      	strb	r3, [r7, #31]
    }
    else {}
#endif
  }

  if ( AllowedRange == true )
 800cbe6:	7ffb      	ldrb	r3, [r7, #31]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d041      	beq.n	800cc70 <STC_ExecRamp+0x128>
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d115      	bne.n	800cc1e <STC_ExecRamp+0xd6>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d105      	bne.n	800cc06 <STC_ExecRamp+0xbe>
      {
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800cbfa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cbfe:	041a      	lsls	r2, r3, #16
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	605a      	str	r2, [r3, #4]
 800cc04:	e004      	b.n	800cc10 <STC_ExecRamp+0xc8>
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800cc06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cc0a:	041a      	lsls	r2, r3, #16
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	609a      	str	r2, [r3, #8]
      }
      pHandle->RampRemainingStep = 0u;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2200      	movs	r2, #0
 800cc14:	60da      	str	r2, [r3, #12]
      pHandle->IncDecAmount = 0;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	619a      	str	r2, [r3, #24]
 800cc1c:	e028      	b.n	800cc70 <STC_ExecRamp+0x128>
    }
    else
    {
      /* Store the hTargetFinal to be applied in the last step */
      pHandle->TargetFinal = hTargetFinal;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	897a      	ldrh	r2, [r7, #10]
 800cc22:	805a      	strh	r2, [r3, #2]

      /* Compute the (wRampRemainingStep) number of steps remaining to complete
      the ramp. */
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	8b9b      	ldrh	r3, [r3, #28]
 800cc28:	461a      	mov	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	fb02 f303 	mul.w	r3, r2, r3
 800cc30:	61bb      	str	r3, [r7, #24]
      wAux /= 1000u;
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	4a11      	ldr	r2, [pc, #68]	; (800cc7c <STC_ExecRamp+0x134>)
 800cc36:	fba2 2303 	umull	r2, r3, r2, r3
 800cc3a:	099b      	lsrs	r3, r3, #6
 800cc3c:	61bb      	str	r3, [r7, #24]
      pHandle->RampRemainingStep = wAux;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	69ba      	ldr	r2, [r7, #24]
 800cc42:	60da      	str	r2, [r3, #12]
      pHandle->RampRemainingStep++;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	1c5a      	adds	r2, r3, #1
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	60da      	str	r2, [r3, #12]

      /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
      the reference value at each CalcTorqueReference. */
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800cc4e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800cc52:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	041b      	lsls	r3, r3, #16
 800cc5a:	617b      	str	r3, [r7, #20]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	461a      	mov	r2, r3
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc68:	617b      	str	r3, [r7, #20]
      pHandle->IncDecAmount = wAux1;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	697a      	ldr	r2, [r7, #20]
 800cc6e:	619a      	str	r2, [r3, #24]
    }
  }

  return AllowedRange;
 800cc70:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3720      	adds	r7, #32
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	10624dd3 	.word	0x10624dd3

0800cc80 <STC_StopRamp>:
  *         rotor speed reference is maintained.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]

  pHandle->RampRemainingStep = 0u;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	619a      	str	r2, [r3, #24]
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  int32_t wCurrentReference;
  int16_t hTorqueReference = 0;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	827b      	strh	r3, [r7, #18]
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d103      	bne.n	800ccbc <STC_CalcTorqueReference+0x1c>
  {
    wCurrentReference = pHandle->TorqueRef;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	617b      	str	r3, [r7, #20]
 800ccba:	e002      	b.n	800ccc2 <STC_CalcTorqueReference+0x22>
  }
  else
  {
    wCurrentReference = pHandle->SpeedRefUnitExt;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	617b      	str	r3, [r7, #20]
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	68db      	ldr	r3, [r3, #12]
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d90a      	bls.n	800cce0 <STC_CalcTorqueReference+0x40>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	699b      	ldr	r3, [r3, #24]
 800ccce:	697a      	ldr	r2, [r7, #20]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	617b      	str	r3, [r7, #20]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	1e5a      	subs	r2, r3, #1
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	60da      	str	r2, [r3, #12]
 800ccde:	e00b      	b.n	800ccf8 <STC_CalcTorqueReference+0x58>
  }
  else if ( pHandle->RampRemainingStep == 1u )
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d107      	bne.n	800ccf8 <STC_CalcTorqueReference+0x58>
  {
    /* Set the backup value of hTargetFinal. */
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ccee:	041b      	lsls	r3, r3, #16
 800ccf0:	617b      	str	r3, [r7, #20]
    pHandle->RampRemainingStep = 0u;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	60da      	str	r2, [r3, #12]
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d126      	bne.n	800cd4e <STC_CalcTorqueReference+0xae>
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	da02      	bge.n	800cd0c <STC_CalcTorqueReference+0x6c>
 800cd06:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800cd0a:	33ff      	adds	r3, #255	; 0xff
 800cd0c:	141b      	asrs	r3, r3, #16
 800cd0e:	823b      	strh	r3, [r7, #16]
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	695b      	ldr	r3, [r3, #20]
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7ff fde5 	bl	800c8e4 <SPD_GetAvrgMecSpeedUnit>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	81fb      	strh	r3, [r7, #14]
    hError = hTargetSpeed - hMeasuredSpeed;
 800cd1e:	8a3a      	ldrh	r2, [r7, #16]
 800cd20:	89fb      	ldrh	r3, [r7, #14]
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	81bb      	strh	r3, [r7, #12]
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800cd30:	4611      	mov	r1, r2
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fd f972 	bl	800a01c <PI_Controller>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	827b      	strh	r3, [r7, #18]

    pHandle->SpeedRefUnitExt = wCurrentReference;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	697a      	ldr	r2, [r7, #20]
 800cd40:	605a      	str	r2, [r3, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800cd42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd46:	041a      	lsls	r2, r3, #16
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	609a      	str	r2, [r3, #8]
 800cd4c:	e00a      	b.n	800cd64 <STC_CalcTorqueReference+0xc4>
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	697a      	ldr	r2, [r7, #20]
 800cd52:	609a      	str	r2, [r3, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	da02      	bge.n	800cd60 <STC_CalcTorqueReference+0xc0>
 800cd5a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800cd5e:	33ff      	adds	r3, #255	; 0xff
 800cd60:	141b      	asrs	r3, r3, #16
 800cd62:	827b      	strh	r3, [r7, #18]
  }

  return hTorqueReference;
 800cd64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3718      	adds	r7, #24
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <STC_GetMecSpeedRefUnitDefault>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t It returns the Default mechanical rotor speed. reference
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  return pHandle->MecSpeedRefUnitDefault;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	370c      	adds	r7, #12
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <STC_GetMaxAppPositiveMecSpeedUnit>:
/**
  * @brief  Returns the Application maximum positive value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800cd8a:	b480      	push	{r7}
 800cd8c:	b083      	sub	sp, #12
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
  return pHandle->MaxAppPositiveMecSpeedUnit;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	8bdb      	ldrh	r3, [r3, #30]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	370c      	adds	r7, #12
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr

0800cda2 <STC_GetMinAppNegativeMecSpeedUnit>:
/**
  * @brief  Returns the Application minimum negative value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800cda2:	b480      	push	{r7}
 800cda4:	b083      	sub	sp, #12
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
  return pHandle->MinAppNegativeMecSpeedUnit;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	370c      	adds	r7, #12
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <STC_GetDefaultIqdref>:
  * @brief It returns the default values of Iqdref.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800cdca:	813b      	strh	r3, [r7, #8]
  IqdRefDefault.d = pHandle->IdrefDefault;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cdd2:	817b      	strh	r3, [r7, #10]
  return IqdRefDefault;
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	60fb      	str	r3, [r7, #12]
 800cdd8:	2300      	movs	r3, #0
 800cdda:	89ba      	ldrh	r2, [r7, #12]
 800cddc:	f362 030f 	bfi	r3, r2, #0, #16
 800cde0:	89fa      	ldrh	r2, [r7, #14]
 800cde2:	f362 431f 	bfi	r3, r2, #16, #16
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3714      	adds	r7, #20
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr

0800cdf2 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b082      	sub	sp, #8
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	695b      	ldr	r3, [r3, #20]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7ff fd70 	bl	800c8e4 <SPD_GetAvrgMecSpeedUnit>
 800ce04:	4603      	mov	r3, r0
 800ce06:	041a      	lsls	r2, r3, #16
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	605a      	str	r2, [r3, #4]
}
 800ce0c:	bf00      	nop
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <STM_Init>:
  *         once right after object creation.
  * @param pHandle pointer on the component instance to initialize.
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]

  pHandle->bState = IDLE;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	701a      	strb	r2, [r3, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	805a      	strh	r2, [r3, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	809a      	strh	r2, [r3, #4]
}
 800ce2e:	bf00      	nop
 800ce30:	370c      	adds	r7, #12
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr
	...

0800ce3c <STM_NextState>:
  * @param bState New requested state
  * @retval bool It returns true if the state has been really set equal to
  *         bState, false if the requested state can't be reached
  */
__weak bool STM_NextState( STM_Handle_t * pHandle, State_t bState )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	460b      	mov	r3, r1
 800ce46:	70fb      	strb	r3, [r7, #3]
  bool bChangeState = false;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	73fb      	strb	r3, [r7, #15]
  State_t bCurrentState = pHandle->bState;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	737b      	strb	r3, [r7, #13]
  State_t bNewState = bCurrentState;
 800ce52:	7b7b      	ldrb	r3, [r7, #13]
 800ce54:	73bb      	strb	r3, [r7, #14]

  switch ( bCurrentState )
 800ce56:	7b7b      	ldrb	r3, [r7, #13]
 800ce58:	2b14      	cmp	r3, #20
 800ce5a:	f200 8110 	bhi.w	800d07e <STM_NextState+0x242>
 800ce5e:	a201      	add	r2, pc, #4	; (adr r2, 800ce64 <STM_NextState+0x28>)
 800ce60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce64:	0800cecb 	.word	0x0800cecb
 800ce68:	0800cee9 	.word	0x0800cee9
 800ce6c:	0800cf4f 	.word	0x0800cf4f
 800ce70:	0800cf61 	.word	0x0800cf61
 800ce74:	0800cfeb 	.word	0x0800cfeb
 800ce78:	0800d023 	.word	0x0800d023
 800ce7c:	0800d039 	.word	0x0800d039
 800ce80:	0800d049 	.word	0x0800d049
 800ce84:	0800d059 	.word	0x0800d059
 800ce88:	0800d069 	.word	0x0800d069
 800ce8c:	0800d07f 	.word	0x0800d07f
 800ce90:	0800d07f 	.word	0x0800d07f
 800ce94:	0800ceb9 	.word	0x0800ceb9
 800ce98:	0800cf07 	.word	0x0800cf07
 800ce9c:	0800cf1f 	.word	0x0800cf1f
 800cea0:	0800cf37 	.word	0x0800cf37
 800cea4:	0800cf8b 	.word	0x0800cf8b
 800cea8:	0800cfa3 	.word	0x0800cfa3
 800ceac:	0800cfd5 	.word	0x0800cfd5
 800ceb0:	0800d007 	.word	0x0800d007
 800ceb4:	0800cfbf 	.word	0x0800cfbf
  {
    case ICLWAIT:
      if ( bState == IDLE )
 800ceb8:	78fb      	ldrb	r3, [r7, #3]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	f040 80e1 	bne.w	800d082 <STM_NextState+0x246>
      {
        bNewState = bState;
 800cec0:	78fb      	ldrb	r3, [r7, #3]
 800cec2:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800cec4:	2301      	movs	r3, #1
 800cec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cec8:	e0db      	b.n	800d082 <STM_NextState+0x246>
    case IDLE:
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800ceca:	78fb      	ldrb	r3, [r7, #3]
 800cecc:	2b03      	cmp	r3, #3
 800cece:	d006      	beq.n	800cede <STM_NextState+0xa2>
 800ced0:	78fb      	ldrb	r3, [r7, #3]
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d003      	beq.n	800cede <STM_NextState+0xa2>
           || ( bState == ICLWAIT ) )
 800ced6:	78fb      	ldrb	r3, [r7, #3]
 800ced8:	2b0c      	cmp	r3, #12
 800ceda:	f040 80d4 	bne.w	800d086 <STM_NextState+0x24a>
      {
        bNewState = bState;
 800cede:	78fb      	ldrb	r3, [r7, #3]
 800cee0:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800cee2:	2301      	movs	r3, #1
 800cee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cee6:	e0ce      	b.n	800d086 <STM_NextState+0x24a>

    case IDLE_ALIGNMENT:
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800cee8:	78fb      	ldrb	r3, [r7, #3]
 800ceea:	2b07      	cmp	r3, #7
 800ceec:	d006      	beq.n	800cefc <STM_NextState+0xc0>
 800ceee:	78fb      	ldrb	r3, [r7, #3]
 800cef0:	2b0d      	cmp	r3, #13
 800cef2:	d003      	beq.n	800cefc <STM_NextState+0xc0>
           || ( bState == ALIGN_OFFSET_CALIB ) )
 800cef4:	78fb      	ldrb	r3, [r7, #3]
 800cef6:	2b0e      	cmp	r3, #14
 800cef8:	f040 80c7 	bne.w	800d08a <STM_NextState+0x24e>
      {
        bNewState = bState;
 800cefc:	78fb      	ldrb	r3, [r7, #3]
 800cefe:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800cf00:	2301      	movs	r3, #1
 800cf02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cf04:	e0c1      	b.n	800d08a <STM_NextState+0x24e>

    case ALIGN_CHARGE_BOOT_CAP:
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800cf06:	78fb      	ldrb	r3, [r7, #3]
 800cf08:	2b0e      	cmp	r3, #14
 800cf0a:	d003      	beq.n	800cf14 <STM_NextState+0xd8>
 800cf0c:	78fb      	ldrb	r3, [r7, #3]
 800cf0e:	2b07      	cmp	r3, #7
 800cf10:	f040 80bd 	bne.w	800d08e <STM_NextState+0x252>
      {
        bNewState = bState;
 800cf14:	78fb      	ldrb	r3, [r7, #3]
 800cf16:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cf1c:	e0b7      	b.n	800d08e <STM_NextState+0x252>

    case ALIGN_OFFSET_CALIB:
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800cf1e:	78fb      	ldrb	r3, [r7, #3]
 800cf20:	2b0f      	cmp	r3, #15
 800cf22:	d003      	beq.n	800cf2c <STM_NextState+0xf0>
 800cf24:	78fb      	ldrb	r3, [r7, #3]
 800cf26:	2b07      	cmp	r3, #7
 800cf28:	f040 80b3 	bne.w	800d092 <STM_NextState+0x256>
      {
        bNewState = bState;
 800cf2c:	78fb      	ldrb	r3, [r7, #3]
 800cf2e:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800cf30:	2301      	movs	r3, #1
 800cf32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cf34:	e0ad      	b.n	800d092 <STM_NextState+0x256>

    case ALIGN_CLEAR:
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800cf36:	78fb      	ldrb	r3, [r7, #3]
 800cf38:	2b02      	cmp	r3, #2
 800cf3a:	d003      	beq.n	800cf44 <STM_NextState+0x108>
 800cf3c:	78fb      	ldrb	r3, [r7, #3]
 800cf3e:	2b07      	cmp	r3, #7
 800cf40:	f040 80a9 	bne.w	800d096 <STM_NextState+0x25a>
      {
        bNewState = bState;
 800cf44:	78fb      	ldrb	r3, [r7, #3]
 800cf46:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cf4c:	e0a3      	b.n	800d096 <STM_NextState+0x25a>

    case ALIGNMENT:
      if ( bState == ANY_STOP )
 800cf4e:	78fb      	ldrb	r3, [r7, #3]
 800cf50:	2b07      	cmp	r3, #7
 800cf52:	f040 80a2 	bne.w	800d09a <STM_NextState+0x25e>
      {
        bNewState = bState;
 800cf56:	78fb      	ldrb	r3, [r7, #3]
 800cf58:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cf5e:	e09c      	b.n	800d09a <STM_NextState+0x25e>

    case IDLE_START:
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 800cf60:	78fb      	ldrb	r3, [r7, #3]
 800cf62:	2b07      	cmp	r3, #7
 800cf64:	d00c      	beq.n	800cf80 <STM_NextState+0x144>
 800cf66:	78fb      	ldrb	r3, [r7, #3]
 800cf68:	2b10      	cmp	r3, #16
 800cf6a:	d009      	beq.n	800cf80 <STM_NextState+0x144>
 800cf6c:	78fb      	ldrb	r3, [r7, #3]
 800cf6e:	2b04      	cmp	r3, #4
 800cf70:	d006      	beq.n	800cf80 <STM_NextState+0x144>
           ( bState == START ) ||
 800cf72:	78fb      	ldrb	r3, [r7, #3]
 800cf74:	2b11      	cmp	r3, #17
 800cf76:	d003      	beq.n	800cf80 <STM_NextState+0x144>
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800cf78:	78fb      	ldrb	r3, [r7, #3]
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	f040 808f 	bne.w	800d09e <STM_NextState+0x262>
      {
        bNewState = bState;
 800cf80:	78fb      	ldrb	r3, [r7, #3]
 800cf82:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800cf84:	2301      	movs	r3, #1
 800cf86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cf88:	e089      	b.n	800d09e <STM_NextState+0x262>

    case CHARGE_BOOT_CAP:
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800cf8a:	78fb      	ldrb	r3, [r7, #3]
 800cf8c:	2b11      	cmp	r3, #17
 800cf8e:	d003      	beq.n	800cf98 <STM_NextState+0x15c>
 800cf90:	78fb      	ldrb	r3, [r7, #3]
 800cf92:	2b07      	cmp	r3, #7
 800cf94:	f040 8085 	bne.w	800d0a2 <STM_NextState+0x266>
      {
        bNewState = bState;
 800cf98:	78fb      	ldrb	r3, [r7, #3]
 800cf9a:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cfa0:	e07f      	b.n	800d0a2 <STM_NextState+0x266>

    case OFFSET_CALIB:
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800cfa2:	78fb      	ldrb	r3, [r7, #3]
 800cfa4:	2b12      	cmp	r3, #18
 800cfa6:	d005      	beq.n	800cfb4 <STM_NextState+0x178>
 800cfa8:	78fb      	ldrb	r3, [r7, #3]
 800cfaa:	2b07      	cmp	r3, #7
 800cfac:	d002      	beq.n	800cfb4 <STM_NextState+0x178>
 800cfae:	78fb      	ldrb	r3, [r7, #3]
 800cfb0:	2b14      	cmp	r3, #20
 800cfb2:	d178      	bne.n	800d0a6 <STM_NextState+0x26a>
      {
        bNewState = bState;
 800cfb4:	78fb      	ldrb	r3, [r7, #3]
 800cfb6:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cfbc:	e073      	b.n	800d0a6 <STM_NextState+0x26a>

     case WAIT_STOP_MOTOR:
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800cfbe:	78fb      	ldrb	r3, [r7, #3]
 800cfc0:	2b12      	cmp	r3, #18
 800cfc2:	d002      	beq.n	800cfca <STM_NextState+0x18e>
 800cfc4:	78fb      	ldrb	r3, [r7, #3]
 800cfc6:	2b07      	cmp	r3, #7
 800cfc8:	d16f      	bne.n	800d0aa <STM_NextState+0x26e>
      {
        bNewState = bState;
 800cfca:	78fb      	ldrb	r3, [r7, #3]
 800cfcc:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cfd2:	e06a      	b.n	800d0aa <STM_NextState+0x26e>

    case CLEAR:
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800cfd4:	78fb      	ldrb	r3, [r7, #3]
 800cfd6:	2b04      	cmp	r3, #4
 800cfd8:	d002      	beq.n	800cfe0 <STM_NextState+0x1a4>
 800cfda:	78fb      	ldrb	r3, [r7, #3]
 800cfdc:	2b07      	cmp	r3, #7
 800cfde:	d166      	bne.n	800d0ae <STM_NextState+0x272>
      {
        bNewState = bState;
 800cfe0:	78fb      	ldrb	r3, [r7, #3]
 800cfe2:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cfe8:	e061      	b.n	800d0ae <STM_NextState+0x272>

    case START:
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800cfea:	78fb      	ldrb	r3, [r7, #3]
 800cfec:	2b13      	cmp	r3, #19
 800cfee:	d005      	beq.n	800cffc <STM_NextState+0x1c0>
 800cff0:	78fb      	ldrb	r3, [r7, #3]
 800cff2:	2b07      	cmp	r3, #7
 800cff4:	d002      	beq.n	800cffc <STM_NextState+0x1c0>
 800cff6:	78fb      	ldrb	r3, [r7, #3]
 800cff8:	2b05      	cmp	r3, #5
 800cffa:	d15a      	bne.n	800d0b2 <STM_NextState+0x276>
      {
        bNewState = bState;
 800cffc:	78fb      	ldrb	r3, [r7, #3]
 800cffe:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800d000:	2301      	movs	r3, #1
 800d002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d004:	e055      	b.n	800d0b2 <STM_NextState+0x276>

    case SWITCH_OVER:
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800d006:	78fb      	ldrb	r3, [r7, #3]
 800d008:	2b04      	cmp	r3, #4
 800d00a:	d005      	beq.n	800d018 <STM_NextState+0x1dc>
 800d00c:	78fb      	ldrb	r3, [r7, #3]
 800d00e:	2b07      	cmp	r3, #7
 800d010:	d002      	beq.n	800d018 <STM_NextState+0x1dc>
 800d012:	78fb      	ldrb	r3, [r7, #3]
 800d014:	2b05      	cmp	r3, #5
 800d016:	d14e      	bne.n	800d0b6 <STM_NextState+0x27a>
      {
        bNewState = bState;
 800d018:	78fb      	ldrb	r3, [r7, #3]
 800d01a:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800d01c:	2301      	movs	r3, #1
 800d01e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d020:	e049      	b.n	800d0b6 <STM_NextState+0x27a>

    case START_RUN:
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800d022:	78fb      	ldrb	r3, [r7, #3]
 800d024:	2b06      	cmp	r3, #6
 800d026:	d002      	beq.n	800d02e <STM_NextState+0x1f2>
 800d028:	78fb      	ldrb	r3, [r7, #3]
 800d02a:	2b07      	cmp	r3, #7
 800d02c:	d145      	bne.n	800d0ba <STM_NextState+0x27e>
      {
        bNewState = bState;
 800d02e:	78fb      	ldrb	r3, [r7, #3]
 800d030:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800d032:	2301      	movs	r3, #1
 800d034:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d036:	e040      	b.n	800d0ba <STM_NextState+0x27e>

    case RUN:
      if ( bState == ANY_STOP )
 800d038:	78fb      	ldrb	r3, [r7, #3]
 800d03a:	2b07      	cmp	r3, #7
 800d03c:	d13f      	bne.n	800d0be <STM_NextState+0x282>
      {
        bNewState = bState;
 800d03e:	78fb      	ldrb	r3, [r7, #3]
 800d040:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800d042:	2301      	movs	r3, #1
 800d044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d046:	e03a      	b.n	800d0be <STM_NextState+0x282>

    case ANY_STOP:
      if ( bState == STOP )
 800d048:	78fb      	ldrb	r3, [r7, #3]
 800d04a:	2b08      	cmp	r3, #8
 800d04c:	d139      	bne.n	800d0c2 <STM_NextState+0x286>
      {
        bNewState = bState;
 800d04e:	78fb      	ldrb	r3, [r7, #3]
 800d050:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800d052:	2301      	movs	r3, #1
 800d054:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d056:	e034      	b.n	800d0c2 <STM_NextState+0x286>

    case STOP:
      if ( bState == STOP_IDLE )
 800d058:	78fb      	ldrb	r3, [r7, #3]
 800d05a:	2b09      	cmp	r3, #9
 800d05c:	d133      	bne.n	800d0c6 <STM_NextState+0x28a>
      {
        bNewState = bState;
 800d05e:	78fb      	ldrb	r3, [r7, #3]
 800d060:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800d062:	2301      	movs	r3, #1
 800d064:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d066:	e02e      	b.n	800d0c6 <STM_NextState+0x28a>

    case STOP_IDLE:
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800d068:	78fb      	ldrb	r3, [r7, #3]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d002      	beq.n	800d074 <STM_NextState+0x238>
 800d06e:	78fb      	ldrb	r3, [r7, #3]
 800d070:	2b0c      	cmp	r3, #12
 800d072:	d12a      	bne.n	800d0ca <STM_NextState+0x28e>
      {
        bNewState = bState;
 800d074:	78fb      	ldrb	r3, [r7, #3]
 800d076:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800d078:	2301      	movs	r3, #1
 800d07a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d07c:	e025      	b.n	800d0ca <STM_NextState+0x28e>
    default:
      break;
 800d07e:	bf00      	nop
 800d080:	e024      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d082:	bf00      	nop
 800d084:	e022      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d086:	bf00      	nop
 800d088:	e020      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d08a:	bf00      	nop
 800d08c:	e01e      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d08e:	bf00      	nop
 800d090:	e01c      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d092:	bf00      	nop
 800d094:	e01a      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d096:	bf00      	nop
 800d098:	e018      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d09a:	bf00      	nop
 800d09c:	e016      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d09e:	bf00      	nop
 800d0a0:	e014      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d0a2:	bf00      	nop
 800d0a4:	e012      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d0a6:	bf00      	nop
 800d0a8:	e010      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d0aa:	bf00      	nop
 800d0ac:	e00e      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d0ae:	bf00      	nop
 800d0b0:	e00c      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d0b2:	bf00      	nop
 800d0b4:	e00a      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d0b6:	bf00      	nop
 800d0b8:	e008      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d0ba:	bf00      	nop
 800d0bc:	e006      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d0be:	bf00      	nop
 800d0c0:	e004      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d0c2:	bf00      	nop
 800d0c4:	e002      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d0c6:	bf00      	nop
 800d0c8:	e000      	b.n	800d0cc <STM_NextState+0x290>
      break;
 800d0ca:	bf00      	nop
  }

  if ( bChangeState )
 800d0cc:	7bfb      	ldrb	r3, [r7, #15]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d003      	beq.n	800d0da <STM_NextState+0x29e>
  {
    pHandle->bState = bNewState;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	7bba      	ldrb	r2, [r7, #14]
 800d0d6:	701a      	strb	r2, [r3, #0]
 800d0d8:	e00d      	b.n	800d0f6 <STM_NextState+0x2ba>
  }
  else
  {
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800d0da:	78fb      	ldrb	r3, [r7, #3]
 800d0dc:	2b03      	cmp	r3, #3
 800d0de:	d00a      	beq.n	800d0f6 <STM_NextState+0x2ba>
 800d0e0:	78fb      	ldrb	r3, [r7, #3]
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d007      	beq.n	800d0f6 <STM_NextState+0x2ba>
 800d0e6:	78fb      	ldrb	r3, [r7, #3]
 800d0e8:	2b07      	cmp	r3, #7
 800d0ea:	d004      	beq.n	800d0f6 <STM_NextState+0x2ba>
            || ( bState == ANY_STOP ) ) )
    {
      /* If new state is not a user command START/STOP raise a software error */
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	2180      	movs	r1, #128	; 0x80
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 f805 	bl	800d100 <STM_FaultProcessing>
    }
  }

  return ( bChangeState );
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	460b      	mov	r3, r1
 800d10a:	807b      	strh	r3, [r7, #2]
 800d10c:	4613      	mov	r3, r2
 800d10e:	803b      	strh	r3, [r7, #0]
  State_t LocalState =  pHandle->bState;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	73fb      	strb	r3, [r7, #15]

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	885a      	ldrh	r2, [r3, #2]
 800d11a:	887b      	ldrh	r3, [r7, #2]
 800d11c:	4313      	orrs	r3, r2
 800d11e:	b29b      	uxth	r3, r3
 800d120:	b21a      	sxth	r2, r3
 800d122:	f9b7 3000 	ldrsh.w	r3, [r7]
 800d126:	43db      	mvns	r3, r3
 800d128:	b21b      	sxth	r3, r3
 800d12a:	4013      	ands	r3, r2
 800d12c:	b21b      	sxth	r3, r3
 800d12e:	b29a      	uxth	r2, r3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	805a      	strh	r2, [r3, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	889a      	ldrh	r2, [r3, #4]
 800d138:	887b      	ldrh	r3, [r7, #2]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	b29a      	uxth	r2, r3
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	809a      	strh	r2, [r3, #4]

  if ( LocalState == FAULT_NOW )
 800d142:	7bfb      	ldrb	r3, [r7, #15]
 800d144:	2b0a      	cmp	r3, #10
 800d146:	d109      	bne.n	800d15c <STM_FaultProcessing+0x5c>
  {
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	885b      	ldrh	r3, [r3, #2]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10e      	bne.n	800d16e <STM_FaultProcessing+0x6e>
    {
      pHandle->bState = FAULT_OVER;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	220b      	movs	r2, #11
 800d154:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_OVER;
 800d156:	230b      	movs	r3, #11
 800d158:	73fb      	strb	r3, [r7, #15]
 800d15a:	e008      	b.n	800d16e <STM_FaultProcessing+0x6e>
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	885b      	ldrh	r3, [r3, #2]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d004      	beq.n	800d16e <STM_FaultProcessing+0x6e>
    {
      pHandle->bState = FAULT_NOW;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	220a      	movs	r2, #10
 800d168:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_NOW;
 800d16a:	230a      	movs	r3, #10
 800d16c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ( LocalState );
 800d16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d170:	4618      	mov	r0, r3
 800d172:	3714      	adds	r7, #20
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr

0800d17c <STM_GetState>:
  * @brief  Returns the current state machine state
  * @param  pHanlde pointer of type  STM_Handle_t
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  return ( pHandle->bState );
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	781b      	ldrb	r3, [r3, #0]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	370c      	adds	r7, #12
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <STM_FaultAcknowledged>:
  * @param pHanlde pointer of type  STM_Handle_t
  * @retval bool true if the state machine has been moved to IDLE, false if the
  *        method call had no effects
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  bool bToBeReturned = false;
 800d19c:	2300      	movs	r3, #0
 800d19e:	73fb      	strb	r3, [r7, #15]

  if ( pHandle->bState == FAULT_OVER )
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	2b0b      	cmp	r3, #11
 800d1a6:	d107      	bne.n	800d1b8 <STM_FaultAcknowledged+0x24>
  {
    pHandle->bState = STOP_IDLE;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2209      	movs	r2, #9
 800d1ac:	701a      	strb	r2, [r3, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	809a      	strh	r2, [r3, #4]
    bToBeReturned = true;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	73fb      	strb	r3, [r7, #15]
  }

  return ( bToBeReturned );
 800d1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3714      	adds	r7, #20
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr

0800d1c6 <STM_GetFaultState>:
  *         significant half are stored the information about the faults
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
 800d1c6:	b480      	push	{r7}
 800d1c8:	b085      	sub	sp, #20
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	889b      	ldrh	r3, [r3, #4]
 800d1d2:	60fb      	str	r3, [r7, #12]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	885b      	ldrh	r3, [r3, #2]
 800d1d8:	041b      	lsls	r3, r3, #16
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	60fb      	str	r3, [r7, #12]

  return LocalFaultState;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3714      	adds	r7, #20
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr

0800d1ee <LL_USART_EnableIT_RXNE>:
{
 800d1ee:	b480      	push	{r7}
 800d1f0:	b083      	sub	sp, #12
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f043 0220 	orr.w	r2, r3, #32
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	601a      	str	r2, [r3, #0]
}
 800d202:	bf00      	nop
 800d204:	370c      	adds	r7, #12
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr

0800d20e <LL_USART_EnableIT_TXE>:
{
 800d20e:	b480      	push	{r7}
 800d210:	b083      	sub	sp, #12
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	601a      	str	r2, [r3, #0]
}
 800d222:	bf00      	nop
 800d224:	370c      	adds	r7, #12
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr

0800d22e <LL_USART_DisableIT_RXNE>:
{
 800d22e:	b480      	push	{r7}
 800d230:	b083      	sub	sp, #12
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f023 0220 	bic.w	r2, r3, #32
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	601a      	str	r2, [r3, #0]
}
 800d242:	bf00      	nop
 800d244:	370c      	adds	r7, #12
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr

0800d24e <LL_USART_DisableIT_TXE>:
{
 800d24e:	b480      	push	{r7}
 800d250:	b083      	sub	sp, #12
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	601a      	str	r2, [r3, #0]
}
 800d262:	bf00      	nop
 800d264:	370c      	adds	r7, #12
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr

0800d26e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800d26e:	b480      	push	{r7}
 800d270:	b083      	sub	sp, #12
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
 800d276:	460b      	mov	r3, r1
 800d278:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800d27a:	78fb      	ldrb	r3, [r7, #3]
 800d27c:	b29a      	uxth	r2, r3
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800d282:	bf00      	nop
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr

0800d28e <UFCP_Init>:
static const uint16_t UFCP_Usart_Timeout_stop = 2;

/* Functions ---------------------------------------------------------*/

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{
 800d28e:	b580      	push	{r7, lr}
 800d290:	b082      	sub	sp, #8
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4618      	mov	r0, r3
 800d29a:	f7fc fc65 	bl	8009b68 <FCP_Init>
}
 800d29e:	bf00      	nop
 800d2a0:	3708      	adds	r7, #8
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
	...

0800d2a8 <UFCP_RX_IRQ_Handler>:

/*
 *
 */
__weak void * UFCP_RX_IRQ_Handler( UFCP_Handle_t * pHandle, unsigned short rx_data )
{
 800d2a8:	b590      	push	{r4, r7, lr}
 800d2aa:	b087      	sub	sp, #28
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	807b      	strh	r3, [r7, #2]
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800d2b4:	4b4b      	ldr	r3, [pc, #300]	; (800d3e4 <UFCP_RX_IRQ_Handler+0x13c>)
 800d2b6:	617b      	str	r3, [r7, #20]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	613b      	str	r3, [r7, #16]
  uint8_t error_code;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f000 8089 	beq.w	800d3da <UFCP_RX_IRQ_Handler+0x132>
  {
    uint8_t rx_byte = (uint8_t) rx_data;
 800d2c8:	887b      	ldrh	r3, [r7, #2]
 800d2ca:	73fb      	strb	r3, [r7, #15]

    switch ( pBaseHandle->RxFrameLevel )
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d002      	beq.n	800d2dc <UFCP_RX_IRQ_Handler+0x34>
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d013      	beq.n	800d302 <UFCP_RX_IRQ_Handler+0x5a>
 800d2da:	e029      	b.n	800d330 <UFCP_RX_IRQ_Handler+0x88>
    {
      case 0: // First Byte received --> The Code
        pBaseHandle->RxFrame.Code = rx_byte;
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	7bfa      	ldrb	r2, [r7, #15]
 800d2e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
        /* Need to ask the caller to start our timeout... TODO: Is this really useful? */
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 800d2e4:	4b40      	ldr	r3, [pc, #256]	; (800d3e8 <UFCP_RX_IRQ_Handler+0x140>)
 800d2e6:	617b      	str	r3, [r7, #20]

        /* Start Rx Timeout */
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	8a1a      	ldrh	r2, [r3, #16]
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	825a      	strh	r2, [r3, #18]
        pBaseHandle->RxFrameLevel++;
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	b2da      	uxtb	r2, r3
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        break;
 800d300:	e06b      	b.n	800d3da <UFCP_RX_IRQ_Handler+0x132>

      case 1: // Second Byte received --> Size of the payload
        pBaseHandle->RxFrame.Size = rx_byte;
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	7bfa      	ldrb	r2, [r7, #15]
 800d306:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
        pBaseHandle->RxFrameLevel++;
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800d310:	3301      	adds	r3, #1
 800d312:	b2da      	uxtb	r2, r3
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d320:	b25b      	sxtb	r3, r3
 800d322:	2b00      	cmp	r3, #0
 800d324:	da58      	bge.n	800d3d8 <UFCP_RX_IRQ_Handler+0x130>
        { /* Garbage data received decoded with a payload size that exceeds max*/
          pBaseHandle->RxFrameLevel =0 ;
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	2200      	movs	r2, #0
 800d32a:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        }
        break;
 800d32e:	e053      	b.n	800d3d8 <UFCP_RX_IRQ_Handler+0x130>

      default: // In the payload or the "CRC"
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800d336:	461a      	mov	r2, r3
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d33e:	3302      	adds	r3, #2
 800d340:	429a      	cmp	r2, r3
 800d342:	da11      	bge.n	800d368 <UFCP_RX_IRQ_Handler+0xc0>
        {
          // read byte is for the payload
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800d34a:	3b02      	subs	r3, #2
 800d34c:	693a      	ldr	r2, [r7, #16]
 800d34e:	4413      	add	r3, r2
 800d350:	7bfa      	ldrb	r2, [r7, #15]
 800d352:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
          pBaseHandle->RxFrameLevel++;
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800d35c:	3301      	adds	r3, #1
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 800d366:	e038      	b.n	800d3da <UFCP_RX_IRQ_Handler+0x132>
        }
        else
        {
          // read byte is for the "CRC"
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	7bfa      	ldrb	r2, [r7, #15]
 800d36c:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

          /* Need to ask the caller to stop our timeout... TODO: Is this really useful? */
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800d370:	4b1e      	ldr	r3, [pc, #120]	; (800d3ec <UFCP_RX_IRQ_Handler+0x144>)
 800d372:	617b      	str	r3, [r7, #20]

          /* Stop Rx Timeout */
          pBaseHandle->RxTimeoutCountdown = 0;
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	2200      	movs	r2, #0
 800d378:	825a      	strh	r2, [r3, #18]
          /* Disable the reception IRQ */
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800d380:	4618      	mov	r0, r3
 800d382:	f7ff ff54 	bl	800d22e <LL_USART_DisableIT_RXNE>
          /* Indicate the reception is complete. */
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	2200      	movs	r2, #0
 800d38a:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

          /* Check the Control Sum */
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	3399      	adds	r3, #153	; 0x99
 800d392:	4618      	mov	r0, r3
 800d394:	f7fc fc37 	bl	8009c06 <FCP_CalcCRC>
 800d398:	4603      	mov	r3, r0
 800d39a:	461a      	mov	r2, r3
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d10e      	bne.n	800d3c4 <UFCP_RX_IRQ_Handler+0x11c>
          {
            /* OK. the frame is considered correct. Let's forward to client. */
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	689c      	ldr	r4, [r3, #8]
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	6818      	ldr	r0, [r3, #0]
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	f893 1099 	ldrb.w	r1, [r3, #153]	; 0x99
                                                      pBaseHandle->RxFrame.Code,
                                                      pBaseHandle->RxFrame.Buffer,
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	f103 029b 	add.w	r2, r3, #155	; 0x9b
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d3c0:	47a0      	blx	r4
 800d3c2:	e00a      	b.n	800d3da <UFCP_RX_IRQ_Handler+0x132>
                                                      pBaseHandle->RxFrame.Size );
          }
          else
          {
            error_code = FCP_MSG_RX_BAD_CRC;
 800d3c4:	230a      	movs	r3, #10
 800d3c6:	73bb      	strb	r3, [r7, #14]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800d3c8:	f107 020e 	add.w	r2, r7, #14
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	21ff      	movs	r1, #255	; 0xff
 800d3d0:	6938      	ldr	r0, [r7, #16]
 800d3d2:	f000 f8a3 	bl	800d51c <UFCP_Send>
 800d3d6:	e000      	b.n	800d3da <UFCP_RX_IRQ_Handler+0x132>
        break;
 800d3d8:	bf00      	nop
          }
        }
    } /* end of switch ( pBaseHandle->RxFrameLevel ) */
  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState ) */

  return ret_val;
 800d3da:	697b      	ldr	r3, [r7, #20]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	371c      	adds	r7, #28
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd90      	pop	{r4, r7, pc}
 800d3e4:	0800edea 	.word	0x0800edea
 800d3e8:	0800edec 	.word	0x0800edec
 800d3ec:	0800edee 	.word	0x0800edee

0800d3f0 <UFCP_TX_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	60bb      	str	r3, [r7, #8]

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800d402:	2b00      	cmp	r3, #0
 800d404:	d050      	beq.n	800d4a8 <UFCP_TX_IRQ_Handler+0xb8>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d002      	beq.n	800d416 <UFCP_TX_IRQ_Handler+0x26>
 800d410:	2b01      	cmp	r3, #1
 800d412:	d004      	beq.n	800d41e <UFCP_TX_IRQ_Handler+0x2e>
 800d414:	e007      	b.n	800d426 <UFCP_TX_IRQ_Handler+0x36>
    {
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	7d1b      	ldrb	r3, [r3, #20]
 800d41a:	81fb      	strh	r3, [r7, #14]
        break;
 800d41c:	e019      	b.n	800d452 <UFCP_TX_IRQ_Handler+0x62>

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	7d5b      	ldrb	r3, [r3, #21]
 800d422:	81fb      	strh	r3, [r7, #14]
        break;
 800d424:	e015      	b.n	800d452 <UFCP_TX_IRQ_Handler+0x62>

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d42c:	461a      	mov	r2, r3
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	7d5b      	ldrb	r3, [r3, #21]
 800d432:	3302      	adds	r3, #2
 800d434:	429a      	cmp	r2, r3
 800d436:	da08      	bge.n	800d44a <UFCP_TX_IRQ_Handler+0x5a>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d43e:	3b02      	subs	r3, #2
 800d440:	68ba      	ldr	r2, [r7, #8]
 800d442:	4413      	add	r3, r2
 800d444:	7d9b      	ldrb	r3, [r3, #22]
 800d446:	81fb      	strh	r3, [r7, #14]
 800d448:	e003      	b.n	800d452 <UFCP_TX_IRQ_Handler+0x62>
        }
        else
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800d450:	81fb      	strh	r3, [r7, #14]
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800d458:	89fa      	ldrh	r2, [r7, #14]
 800d45a:	b2d2      	uxtb	r2, r2
 800d45c:	4611      	mov	r1, r2
 800d45e:	4618      	mov	r0, r3
 800d460:	f7ff ff05 	bl	800d26e <LL_USART_TransmitData8>

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d46a:	461a      	mov	r2, r3
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	7d5b      	ldrb	r3, [r3, #21]
 800d470:	3302      	adds	r3, #2
 800d472:	429a      	cmp	r2, r3
 800d474:	da08      	bge.n	800d488 <UFCP_TX_IRQ_Handler+0x98>
    {
      pBaseHandle->TxFrameLevel++;
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d47c:	3301      	adds	r3, #1
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800d486:	e00f      	b.n	800d4a8 <UFCP_TX_IRQ_Handler+0xb8>
      LL_USART_DisableIT_TXE(pHandle->USARTx);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800d48e:	4618      	mov	r0, r3
 800d490:	f7ff fedd 	bl	800d24e <LL_USART_DisableIT_TXE>
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	2200      	movs	r2, #0
 800d498:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	68ba      	ldr	r2, [r7, #8]
 800d4a2:	6812      	ldr	r2, [r2, #0]
 800d4a4:	4610      	mov	r0, r2
 800d4a6:	4798      	blx	r3
}
 800d4a8:	bf00      	nop
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <UFCP_OVR_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_OVR_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	60fb      	str	r3, [r7, #12]
  uint8_t error_code;

  error_code = UFCP_MSG_OVERRUN;
 800d4bc:	2308      	movs	r3, #8
 800d4be:	72fb      	strb	r3, [r7, #11]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800d4c0:	f107 020b 	add.w	r2, r7, #11
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	21ff      	movs	r1, #255	; 0xff
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	f000 f827 	bl	800d51c <UFCP_Send>

}
 800d4ce:	bf00      	nop
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <UFCP_Receive>:
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );

}

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b084      	sub	sp, #16
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d112      	bne.n	800d50e <UFCP_Receive+0x38>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	60bb      	str	r3, [r7, #8]

    pHandle->RxFrameLevel = 0;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff fe73 	bl	800d1ee <LL_USART_EnableIT_RXNE>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800d508:	2302      	movs	r3, #2
 800d50a:	73fb      	strb	r3, [r7, #15]
 800d50c:	e001      	b.n	800d512 <UFCP_Receive+0x3c>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800d50e:	2301      	movs	r3, #1
 800d510:	73fb      	strb	r3, [r7, #15]
  }

  return ret_val;
 800d512:	7bfb      	ldrb	r3, [r7, #15]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b088      	sub	sp, #32
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	607a      	str	r2, [r7, #4]
 800d526:	461a      	mov	r2, r3
 800d528:	460b      	mov	r3, r1
 800d52a:	72fb      	strb	r3, [r7, #11]
 800d52c:	4613      	mov	r3, r2
 800d52e:	72bb      	strb	r3, [r7, #10]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800d536:	2b00      	cmp	r3, #0
 800d538:	d133      	bne.n	800d5a2 <UFCP_Send+0x86>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	617b      	str	r3, [r7, #20]
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	3316      	adds	r3, #22
 800d542:	61bb      	str	r3, [r7, #24]

    pHandle->TxFrame.Code = code;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	7afa      	ldrb	r2, [r7, #11]
 800d548:	751a      	strb	r2, [r3, #20]
    pHandle->TxFrame.Size = size;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	7aba      	ldrb	r2, [r7, #10]
 800d54e:	755a      	strb	r2, [r3, #21]
    while ( size-- ) *dest++ = *buffer++;
 800d550:	e007      	b.n	800d562 <UFCP_Send+0x46>
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	1c53      	adds	r3, r2, #1
 800d556:	607b      	str	r3, [r7, #4]
 800d558:	69bb      	ldr	r3, [r7, #24]
 800d55a:	1c59      	adds	r1, r3, #1
 800d55c:	61b9      	str	r1, [r7, #24]
 800d55e:	7812      	ldrb	r2, [r2, #0]
 800d560:	701a      	strb	r2, [r3, #0]
 800d562:	7abb      	ldrb	r3, [r7, #10]
 800d564:	1e5a      	subs	r2, r3, #1
 800d566:	72ba      	strb	r2, [r7, #10]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d1f2      	bne.n	800d552 <UFCP_Send+0x36>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	3314      	adds	r3, #20
 800d570:	4618      	mov	r0, r3
 800d572:	f7fc fb48 	bl	8009c06 <FCP_CalcCRC>
 800d576:	4603      	mov	r3, r0
 800d578:	461a      	mov	r2, r3
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    pHandle->TxFrameLevel = 0;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2200      	movs	r2, #0
 800d584:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2201      	movs	r2, #1
 800d58c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97

    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800d596:	4618      	mov	r0, r3
 800d598:	f7ff fe39 	bl	800d20e <LL_USART_EnableIT_TXE>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800d59c:	2302      	movs	r3, #2
 800d59e:	77fb      	strb	r3, [r7, #31]
 800d5a0:	e001      	b.n	800d5a6 <UFCP_Send+0x8a>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	77fb      	strb	r3, [r7, #31]
  }

  return ret_val;
 800d5a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3720      	adds	r7, #32
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b083      	sub	sp, #12
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
}
 800d5c0:	bf00      	nop
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <VSS_Init>:
* @brief  Software initialization of VirtualSpeedSensor component
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Init( VirtualSpeedSensor_Handle_t * pHandle )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
#ifdef FASTDIV
  FD_Init( &( pHandle->fd ) );
#endif

  VSS_Clear( pHandle );
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 f804 	bl	800d5e2 <VSS_Clear>
}
 800d5da:	bf00      	nop
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <VSS_Clear>:
*         of the motor.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{
 800d5e2:	b480      	push	{r7}
 800d5e4:	b083      	sub	sp, #12
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	701a      	strb	r2, [r3, #0]
  pHandle->_Super.hElAngle = 0;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	809a      	strh	r2, [r3, #4]
  pHandle->_Super.hMecAngle = 0;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	819a      	strh	r2, [r3, #12]
  pHandle->_Super.hElSpeedDpp = 0;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2200      	movs	r2, #0
 800d606:	81da      	strh	r2, [r3, #14]
  pHandle->_Super.hMecAccelUnitP = 0;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	825a      	strh	r2, [r3, #18]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	701a      	strb	r2, [r3, #0]

  pHandle->wElAccDppP32 = 0;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2200      	movs	r2, #0
 800d618:	621a      	str	r2, [r3, #32]
  pHandle->wElSpeedDpp32 = 0;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	625a      	str	r2, [r3, #36]	; 0x24
  pHandle->hRemainingStep = 0u;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	851a      	strh	r2, [r3, #40]	; 0x28
  pHandle->hElAngleAccu = 0;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2200      	movs	r2, #0
 800d62a:	861a      	strh	r2, [r3, #48]	; 0x30

  pHandle->bTransitionStarted = false;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  pHandle->bTransitionEnded = false;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	85da      	strh	r2, [r3, #46]	; 0x2e
  pHandle->bTransitionLocked = false;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2200      	movs	r2, #0
 800d64a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  pHandle->bCopyObserver = false;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2200      	movs	r2, #0
 800d652:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 800d656:	bf00      	nop
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <VSS_CalcElAngle>:
*         instantaneous electrical speed express in dpp.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval int16_t Measured electrical angle in s16degree format.
*/
__weak int16_t VSS_CalcElAngle( VirtualSpeedSensor_Handle_t * pHandle, void * pInputVars_str )
{
 800d662:	b480      	push	{r7}
 800d664:	b087      	sub	sp, #28
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
 800d66a:	6039      	str	r1, [r7, #0]

  int16_t hRetAngle;
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;
 800d66c:	2301      	movs	r3, #1
 800d66e:	827b      	strh	r3, [r7, #18]

  if ( pHandle->bCopyObserver == true )
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d676:	2b00      	cmp	r3, #0
 800d678:	d003      	beq.n	800d682 <VSS_CalcElAngle+0x20>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	881b      	ldrh	r3, [r3, #0]
 800d67e:	82fb      	strh	r3, [r7, #22]
 800d680:	e09a      	b.n	800d7b8 <VSS_CalcElAngle+0x156>
  }
  else
  {
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d688:	b29a      	uxth	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d690:	b29b      	uxth	r3, r3
 800d692:	4413      	add	r3, r2
 800d694:	b29b      	uxth	r3, r3
 800d696:	b21a      	sxth	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	861a      	strh	r2, [r3, #48]	; 0x30
#ifdef FASTDIV
    pHandle->_Super.hMecAngle += ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                 ( int32_t )pHandle->_Super.hElSpeedDpp,
                                 ( int32_t )pHandle->_Super.bElToMecRatio ) );
#else
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d6aa:	4619      	mov	r1, r3
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	785b      	ldrb	r3, [r3, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800d6b0:	fb91 f3f3 	sdiv	r3, r1, r3
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	4413      	add	r3, r2
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	b21a      	sxth	r2, r3
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	80da      	strh	r2, [r3, #6]
#endif

    if ( pHandle->bTransitionStarted == true )
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d073      	beq.n	800d7b2 <VSS_CalcElAngle+0x150>
    {
      if ( pHandle->hTransitionRemainingSteps == 0 )
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10a      	bne.n	800d6ea <VSS_CalcElAngle+0x88>
      {
        hRetAngle = *( int16_t * )pInputVars_str;
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	881b      	ldrh	r3, [r3, #0]
 800d6d8:	82fb      	strh	r3, [r7, #22]
        pHandle->bTransitionEnded = true;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0u;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	701a      	strb	r2, [r3, #0]
 800d6e8:	e066      	b.n	800d7b8 <VSS_CalcElAngle+0x156>
      }
      else
      {
        pHandle->hTransitionRemainingSteps--;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	b21a      	sxth	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d702:	2b00      	cmp	r3, #0
 800d704:	db0b      	blt.n	800d71e <VSS_CalcElAngle+0xbc>
        {
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d714:	b29b      	uxth	r3, r3
 800d716:	1ad3      	subs	r3, r2, r3
 800d718:	b29b      	uxth	r3, r3
 800d71a:	82bb      	strh	r3, [r7, #20]
 800d71c:	e00d      	b.n	800d73a <VSS_CalcElAngle+0xd8>
        }
        else
        {
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d724:	b29a      	uxth	r2, r3
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	1ad3      	subs	r3, r2, r3
 800d730:	b29b      	uxth	r3, r3
 800d732:	82bb      	strh	r3, [r7, #20]
          hSignCorr = -1;
 800d734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d738:	827b      	strh	r3, [r7, #18]
        }

        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 800d73a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 800d744:	fb02 f303 	mul.w	r3, r2, r3
 800d748:	60fb      	str	r3, [r7, #12]
#ifdef FASTDIV
        hAngleCorr = ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                              wAux,
                                              ( int32_t )( pHandle->hTransitionSteps ) ) );
#else
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800d750:	461a      	mov	r2, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	fb93 f3f2 	sdiv	r3, r3, r2
 800d758:	817b      	strh	r3, [r7, #10]
#endif

        hAngleCorr *= hSignCorr;
 800d75a:	897a      	ldrh	r2, [r7, #10]
 800d75c:	8a7b      	ldrh	r3, [r7, #18]
 800d75e:	fb12 f303 	smulbb	r3, r2, r3
 800d762:	b29b      	uxth	r3, r3
 800d764:	817b      	strh	r3, [r7, #10]

        if ( hAngleDiff >= 0 )
 800d766:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	db0c      	blt.n	800d788 <VSS_CalcElAngle+0x126>
        {
          pHandle->bTransitionLocked = true;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2201      	movs	r2, #1
 800d772:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	897b      	ldrh	r3, [r7, #10]
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	b29b      	uxth	r3, r3
 800d784:	82fb      	strh	r3, [r7, #22]
 800d786:	e017      	b.n	800d7b8 <VSS_CalcElAngle+0x156>
        }
        else
        {
          if ( pHandle->bTransitionLocked == false )
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d78e:	f083 0301 	eor.w	r3, r3, #1
 800d792:	b2db      	uxtb	r3, r3
 800d794:	2b00      	cmp	r3, #0
 800d796:	d003      	beq.n	800d7a0 <VSS_CalcElAngle+0x13e>
          {
            hRetAngle = pHandle->hElAngleAccu;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d79c:	82fb      	strh	r3, [r7, #22]
 800d79e:	e00b      	b.n	800d7b8 <VSS_CalcElAngle+0x156>
          }
          else
          {
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7a6:	b29a      	uxth	r2, r3
 800d7a8:	897b      	ldrh	r3, [r7, #10]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	82fb      	strh	r3, [r7, #22]
 800d7b0:	e002      	b.n	800d7b8 <VSS_CalcElAngle+0x156>
        }
      }
    }
    else
    {
      hRetAngle = pHandle->hElAngleAccu;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d7b6:	82fb      	strh	r3, [r7, #22]
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	8afa      	ldrh	r2, [r7, #22]
 800d7bc:	809a      	strh	r2, [r3, #4]
  return hRetAngle;
 800d7be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	371c      	adds	r7, #28
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr

0800d7ce <VSS_CalcAvrgMecSpeedUnit>:
  *         mechanical speed (SPED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b084      	sub	sp, #16
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
 800d7d6:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = false;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	73fb      	strb	r3, [r7, #15]

  if ( pHandle->hRemainingStep > 1u )
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d936      	bls.n	800d852 <VSS_CalcAvrgMecSpeedUnit+0x84>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6a1b      	ldr	r3, [r3, #32]
 800d7ec:	441a      	add	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	625a      	str	r2, [r3, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	da02      	bge.n	800d800 <VSS_CalcAvrgMecSpeedUnit+0x32>
 800d7fa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800d7fe:	33ff      	adds	r3, #255	; 0xff
 800d800:	141b      	asrs	r3, r3, #16
 800d802:	b21a      	sxth	r2, r3
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	81da      	strh	r2, [r3, #14]

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d80e:	461a      	mov	r2, r3
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	8b5b      	ldrh	r3, [r3, #26]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800d814:	fb03 f202 	mul.w	r2, r3, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800d818:	4613      	mov	r3, r2
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	4413      	add	r3, r2
 800d81e:	005b      	lsls	r3, r3, #1
 800d820:	461a      	mov	r2, r3
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	69db      	ldr	r3, [r3, #28]
 800d826:	4619      	mov	r1, r3
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	785b      	ldrb	r3, [r3, #1]
 800d82c:	fb03 f301 	mul.w	r3, r3, r1
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800d830:	fb92 f3f3 	sdiv	r3, r2, r3
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800d834:	b21a      	sxth	r2, r3
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	801a      	strh	r2, [r3, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	819a      	strh	r2, [r3, #12]

    pHandle->hRemainingStep--;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d848:	3b01      	subs	r3, #1
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	851a      	strh	r2, [r3, #40]	; 0x28
 800d850:	e037      	b.n	800d8c2 <VSS_CalcAvrgMecSpeedUnit+0xf4>
  }
  else if ( pHandle->hRemainingStep == 1u )
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d856:	2b01      	cmp	r3, #1
 800d858:	d12e      	bne.n	800d8b8 <VSS_CalcAvrgMecSpeedUnit+0xea>
  {
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	801a      	strh	r2, [r3, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	819a      	strh	r2, [r3, #12]

    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d874:	461a      	mov	r2, r3
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	69db      	ldr	r3, [r3, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800d87a:	fb03 f202 	mul.w	r2, r3, r2
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	8b5b      	ldrh	r3, [r3, #26]
 800d882:	4619      	mov	r1, r3
 800d884:	460b      	mov	r3, r1
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	440b      	add	r3, r1
 800d88a:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 800d88c:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800d890:	b21a      	sxth	r2, r3
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	81da      	strh	r2, [r3, #14]

    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	785b      	ldrb	r3, [r3, #1]
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	fb12 f303 	smulbb	r3, r2, r3
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	b21a      	sxth	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	81da      	strh	r2, [r3, #14]

    pHandle->hRemainingStep = 0u;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	851a      	strh	r2, [r3, #40]	; 0x28
 800d8b6:	e004      	b.n	800d8c2 <VSS_CalcAvrgMecSpeedUnit+0xf4>
  }
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	801a      	strh	r2, [r3, #0]
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8c8:	f083 0301 	eor.w	r3, r3, #1
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d006      	beq.n	800d8e0 <VSS_CalcAvrgMecSpeedUnit+0x112>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	78da      	ldrb	r2, [r3, #3]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	701a      	strb	r2, [r3, #0]
    SpeedSensorReliability = false;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	73fb      	strb	r3, [r7, #15]
 800d8de:	e006      	b.n	800d8ee <VSS_CalcAvrgMecSpeedUnit+0x120>
  }
  else
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6839      	ldr	r1, [r7, #0]
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7ff f817 	bl	800c918 <SPD_IsMecSpeedReliable>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	73fb      	strb	r3, [r7, #15]
  }

  return ( SpeedSensorReliability );
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <VSS_SetMecAngle>:
  * @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
  * @param  hMecAngle istantaneous measure of rotor mechanical angle
  * @retval none
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b083      	sub	sp, #12
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	460b      	mov	r3, r1
 800d902:	807b      	strh	r3, [r7, #2]

  pHandle->hElAngleAccu = hMecAngle;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	887a      	ldrh	r2, [r7, #2]
 800d908:	861a      	strh	r2, [r3, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d910:	461a      	mov	r2, r3
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	785b      	ldrb	r3, [r3, #1]
 800d916:	fb92 f3f3 	sdiv	r3, r2, r3
 800d91a:	b21a      	sxth	r2, r3
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hElAngle = hMecAngle;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	887a      	ldrh	r2, [r7, #2]
 800d924:	809a      	strh	r2, [r3, #4]
}
 800d926:	bf00      	nop
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
	...

0800d934 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 800d934:	b480      	push	{r7}
 800d936:	b087      	sub	sp, #28
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	460b      	mov	r3, r1
 800d93e:	807b      	strh	r3, [r7, #2]
 800d940:	4613      	mov	r3, r2
 800d942:	803b      	strh	r3, [r7, #0]
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d94a:	f083 0301 	eor.w	r3, r3, #1
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	2b00      	cmp	r3, #0
 800d952:	d06f      	beq.n	800da34 <VSS_SetMecAcceleration+0x100>
  {
    if ( hDurationms == 0u )
 800d954:	883b      	ldrh	r3, [r7, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d128      	bne.n	800d9ac <VSS_SetMecAcceleration+0x78>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	887a      	ldrh	r2, [r7, #2]
 800d95e:	819a      	strh	r2, [r3, #12]

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800d960:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	69d2      	ldr	r2, [r2, #28]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800d968:	fb02 f203 	mul.w	r2, r2, r3
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	8b5b      	ldrh	r3, [r3, #26]
 800d970:	4619      	mov	r1, r3
 800d972:	460b      	mov	r3, r1
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	440b      	add	r3, r1
 800d978:	005b      	lsls	r3, r3, #1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800d97a:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800d97e:	b21a      	sxth	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	81da      	strh	r2, [r3, #14]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	785b      	ldrb	r3, [r3, #1]
 800d990:	b29b      	uxth	r3, r3
 800d992:	fb12 f303 	smulbb	r3, r2, r3
 800d996:	b29b      	uxth	r3, r3
 800d998:	b21a      	sxth	r2, r3
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	81da      	strh	r2, [r3, #14]

      pHandle->hRemainingStep = 0u;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	851a      	strh	r2, [r3, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	887a      	ldrh	r2, [r7, #2]
 800d9a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 800d9aa:	e043      	b.n	800da34 <VSS_SetMecAcceleration+0x100>
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800d9ac:	883b      	ldrh	r3, [r7, #0]
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	8e92      	ldrh	r2, [r2, #52]	; 0x34
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800d9b2:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800d9b6:	4a22      	ldr	r2, [pc, #136]	; (800da40 <VSS_SetMecAcceleration+0x10c>)
 800d9b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d9bc:	099b      	lsrs	r3, r3, #6
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800d9be:	82fb      	strh	r3, [r7, #22]
      hNbrStep++;
 800d9c0:	8afb      	ldrh	r3, [r7, #22]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	82fb      	strh	r3, [r7, #22]
      pHandle->hRemainingStep = hNbrStep;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	8afa      	ldrh	r2, [r7, #22]
 800d9ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d9d2:	461a      	mov	r2, r3
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	785b      	ldrb	r3, [r3, #1]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800d9d8:	fb92 f3f3 	sdiv	r3, r2, r3
 800d9dc:	82bb      	strh	r3, [r7, #20]
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800d9de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	69d2      	ldr	r2, [r2, #28]
 800d9e6:	fb02 f203 	mul.w	r2, r2, r3
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	8b5b      	ldrh	r3, [r3, #26]
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	009b      	lsls	r3, r3, #2
 800d9f4:	440b      	add	r3, r1
 800d9f6:	005b      	lsls	r3, r3, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800d9f8:	fb92 f3f3 	sdiv	r3, r2, r3
 800d9fc:	827b      	strh	r3, [r7, #18]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800d9fe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800da02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800da06:	1ad3      	subs	r3, r2, r3
 800da08:	041a      	lsls	r2, r3, #16
                        ( int32_t )65536 ) / ( int32_t )hNbrStep;
 800da0a:	8afb      	ldrh	r3, [r7, #22]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800da0c:	fb92 f3f3 	sdiv	r3, r2, r3
 800da10:	60fb      	str	r3, [r7, #12]
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	785b      	ldrb	r3, [r3, #1]
 800da16:	461a      	mov	r2, r3
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	fb03 f202 	mul.w	r2, r3, r2
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	621a      	str	r2, [r3, #32]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	887a      	ldrh	r2, [r7, #2]
 800da26:	855a      	strh	r2, [r3, #42]	; 0x2a
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800da2e:	041a      	lsls	r2, r3, #16
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	625a      	str	r2, [r3, #36]	; 0x24
}
 800da34:	bf00      	nop
 800da36:	371c      	adds	r7, #28
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr
 800da40:	10624dd3 	.word	0x10624dd3

0800da44 <VSS_SetStartTransition>:
  * @retval bool true if Transition phase is enabled (started or not), false if
            transition has been triggered but it's actually disabled
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
 800da44:	b480      	push	{r7}
 800da46:	b085      	sub	sp, #20
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	460b      	mov	r3, r1
 800da4e:	70fb      	strb	r3, [r7, #3]
  bool bAux = true;
 800da50:	2301      	movs	r3, #1
 800da52:	73fb      	strb	r3, [r7, #15]
  if ( bCommand == true )
 800da54:	78fb      	ldrb	r3, [r7, #3]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d011      	beq.n	800da7e <VSS_SetStartTransition+0x3a>
  {
    pHandle->bTransitionStarted = true;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2201      	movs	r2, #1
 800da5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if ( pHandle->hTransitionSteps == 0 )
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d108      	bne.n	800da7e <VSS_SetStartTransition+0x3a>
    {
      pHandle->bTransitionEnded = true;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2201      	movs	r2, #1
 800da70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2200      	movs	r2, #0
 800da78:	701a      	strb	r2, [r3, #0]
      bAux = false;
 800da7a:	2300      	movs	r3, #0
 800da7c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return bAux;
 800da7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3714      	adds	r7, #20
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <VSS_TransitionEnded>:
  }
  return ( retVal );
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
    return pHandle->bTransitionEnded;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	370c      	adds	r7, #12
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr
	...

0800daa8 <RUC_Init>:
 800daa8:	b430      	push	{r4, r5}
 800daaa:	6681      	str	r1, [r0, #104]	; 0x68
 800daac:	2100      	movs	r1, #0
 800daae:	9c02      	ldr	r4, [sp, #8]
 800dab0:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 800dab4:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 800dab8:	f110 010c 	adds.w	r1, r0, #12
 800dabc:	66c2      	str	r2, [r0, #108]	; 0x6c
 800dabe:	6703      	str	r3, [r0, #112]	; 0x70
 800dac0:	6744      	str	r4, [r0, #116]	; 0x74
 800dac2:	d023      	beq.n	800db0c <RUC_Init+0x64>
 800dac4:	6943      	ldr	r3, [r0, #20]
 800dac6:	b323      	cbz	r3, 800db12 <RUC_Init+0x6a>
 800dac8:	689b      	ldr	r3, [r3, #8]
 800daca:	b323      	cbz	r3, 800db16 <RUC_Init+0x6e>
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	b323      	cbz	r3, 800db1a <RUC_Init+0x72>
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	b1c3      	cbz	r3, 800db06 <RUC_Init+0x5e>
 800dad4:	689b      	ldr	r3, [r3, #8]
 800dad6:	2105      	movs	r1, #5
 800dad8:	b1b3      	cbz	r3, 800db08 <RUC_Init+0x60>
 800dada:	2204      	movs	r2, #4
 800dadc:	2105      	movs	r1, #5
 800dade:	8805      	ldrh	r5, [r0, #0]
 800dae0:	4c0f      	ldr	r4, [pc, #60]	; (800db20 <RUC_Init+0x78>)
 800dae2:	2364      	movs	r3, #100	; 0x64
 800dae4:	fb03 f305 	mul.w	r3, r3, r5
 800dae8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800daec:	fba4 4303 	umull	r4, r3, r4, r3
 800daf0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800daf4:	2400      	movs	r4, #0
 800daf6:	099b      	lsrs	r3, r3, #6
 800daf8:	6154      	str	r4, [r2, #20]
 800dafa:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 800dafe:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 800db02:	bc30      	pop	{r4, r5}
 800db04:	4770      	bx	lr
 800db06:	2104      	movs	r1, #4
 800db08:	1e4a      	subs	r2, r1, #1
 800db0a:	e7e8      	b.n	800dade <RUC_Init+0x36>
 800db0c:	f04f 32ff 	mov.w	r2, #4294967295
 800db10:	e7e5      	b.n	800dade <RUC_Init+0x36>
 800db12:	2101      	movs	r1, #1
 800db14:	e7f8      	b.n	800db08 <RUC_Init+0x60>
 800db16:	2102      	movs	r1, #2
 800db18:	e7f6      	b.n	800db08 <RUC_Init+0x60>
 800db1a:	2103      	movs	r1, #3
 800db1c:	e7f4      	b.n	800db08 <RUC_Init+0x60>
 800db1e:	bf00      	nop
 800db20:	10624dd3 	.word	0x10624dd3

0800db24 <RUC_Clear>:
 800db24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db28:	4604      	mov	r4, r0
 800db2a:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 800db2c:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 800db30:	80e1      	strh	r1, [r4, #6]
 800db32:	2500      	movs	r5, #0
 800db34:	4638      	mov	r0, r7
 800db36:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 800db3a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800db3e:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 800db42:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 800db46:	460e      	mov	r6, r1
 800db48:	f7ff fd4b 	bl	800d5e2 <VSS_Clear>
 800db4c:	4629      	mov	r1, r5
 800db4e:	4640      	mov	r0, r8
 800db50:	f7fe ffe8 	bl	800cb24 <STC_SetControlMode>
 800db54:	8861      	ldrh	r1, [r4, #2]
 800db56:	b2b6      	uxth	r6, r6
 800db58:	fb11 f106 	smulbb	r1, r1, r6
 800db5c:	b209      	sxth	r1, r1
 800db5e:	4638      	mov	r0, r7
 800db60:	f7ff feca 	bl	800d8f8 <VSS_SetMecAngle>
 800db64:	462a      	mov	r2, r5
 800db66:	4629      	mov	r1, r5
 800db68:	4640      	mov	r0, r8
 800db6a:	f7fe ffed 	bl	800cb48 <STC_ExecRamp>
 800db6e:	8a21      	ldrh	r1, [r4, #16]
 800db70:	89a2      	ldrh	r2, [r4, #12]
 800db72:	fb11 f106 	smulbb	r1, r1, r6
 800db76:	b209      	sxth	r1, r1
 800db78:	4640      	mov	r0, r8
 800db7a:	f7fe ffe5 	bl	800cb48 <STC_ExecRamp>
 800db7e:	89e1      	ldrh	r1, [r4, #14]
 800db80:	89a2      	ldrh	r2, [r4, #12]
 800db82:	fb11 f106 	smulbb	r1, r1, r6
 800db86:	4638      	mov	r0, r7
 800db88:	b209      	sxth	r1, r1
 800db8a:	f7ff fed3 	bl	800d934 <VSS_SetMecAcceleration>
 800db8e:	89a0      	ldrh	r0, [r4, #12]
 800db90:	8823      	ldrh	r3, [r4, #0]
 800db92:	4907      	ldr	r1, [pc, #28]	; (800dbb0 <RUC_Clear+0x8c>)
 800db94:	6962      	ldr	r2, [r4, #20]
 800db96:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 800db9a:	fb03 f300 	mul.w	r3, r3, r0
 800db9e:	fba1 1303 	umull	r1, r3, r1, r3
 800dba2:	099b      	lsrs	r3, r3, #6
 800dba4:	3301      	adds	r3, #1
 800dba6:	80a3      	strh	r3, [r4, #4]
 800dba8:	60a2      	str	r2, [r4, #8]
 800dbaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbae:	bf00      	nop
 800dbb0:	10624dd3 	.word	0x10624dd3

0800dbb4 <RUC_Exec>:
 800dbb4:	b538      	push	{r3, r4, r5, lr}
 800dbb6:	8883      	ldrh	r3, [r0, #4]
 800dbb8:	b12b      	cbz	r3, 800dbc6 <RUC_Exec+0x12>
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	8083      	strh	r3, [r0, #4]
 800dbc0:	b10b      	cbz	r3, 800dbc6 <RUC_Exec+0x12>
 800dbc2:	2001      	movs	r0, #1
 800dbc4:	bd38      	pop	{r3, r4, r5, pc}
 800dbc6:	6883      	ldr	r3, [r0, #8]
 800dbc8:	b33b      	cbz	r3, 800dc1a <RUC_Exec+0x66>
 800dbca:	88c5      	ldrh	r5, [r0, #6]
 800dbcc:	8899      	ldrh	r1, [r3, #4]
 800dbce:	881a      	ldrh	r2, [r3, #0]
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	fb11 f105 	smulbb	r1, r1, r5
 800dbd6:	b209      	sxth	r1, r1
 800dbd8:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800dbda:	f7fe ffb5 	bl	800cb48 <STC_ExecRamp>
 800dbde:	68a3      	ldr	r3, [r4, #8]
 800dbe0:	88e5      	ldrh	r5, [r4, #6]
 800dbe2:	8859      	ldrh	r1, [r3, #2]
 800dbe4:	881a      	ldrh	r2, [r3, #0]
 800dbe6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800dbe8:	fb11 f105 	smulbb	r1, r1, r5
 800dbec:	b209      	sxth	r1, r1
 800dbee:	f7ff fea1 	bl	800d934 <VSS_SetMecAcceleration>
 800dbf2:	68a1      	ldr	r1, [r4, #8]
 800dbf4:	8823      	ldrh	r3, [r4, #0]
 800dbf6:	880d      	ldrh	r5, [r1, #0]
 800dbf8:	4809      	ldr	r0, [pc, #36]	; (800dc20 <RUC_Exec+0x6c>)
 800dbfa:	6889      	ldr	r1, [r1, #8]
 800dbfc:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800dc00:	60a1      	str	r1, [r4, #8]
 800dc02:	fb03 f305 	mul.w	r3, r3, r5
 800dc06:	fba0 1303 	umull	r1, r3, r0, r3
 800dc0a:	3201      	adds	r2, #1
 800dc0c:	099b      	lsrs	r3, r3, #6
 800dc0e:	3301      	adds	r3, #1
 800dc10:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 800dc14:	80a3      	strh	r3, [r4, #4]
 800dc16:	2001      	movs	r0, #1
 800dc18:	bd38      	pop	{r3, r4, r5, pc}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	bd38      	pop	{r3, r4, r5, pc}
 800dc1e:	bf00      	nop
 800dc20:	10624dd3 	.word	0x10624dd3

0800dc24 <RUC_FirstAccelerationStageReached>:
 800dc24:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 800dc28:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 800dc2c:	4282      	cmp	r2, r0
 800dc2e:	bf34      	ite	cc
 800dc30:	2000      	movcc	r0, #0
 800dc32:	2001      	movcs	r0, #1
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop

0800dc38 <RUC_SetPhaseDurationms>:
 800dc38:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dc3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc40:	818a      	strh	r2, [r1, #12]
 800dc42:	4770      	bx	lr

0800dc44 <RUC_SetPhaseFinalMecSpeedUnit>:
 800dc44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dc48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc4c:	81ca      	strh	r2, [r1, #14]
 800dc4e:	4770      	bx	lr

0800dc50 <RUC_SetPhaseFinalTorque>:
 800dc50:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dc54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc58:	820a      	strh	r2, [r1, #16]
 800dc5a:	4770      	bx	lr

0800dc5c <RUC_GetPhaseDurationms>:
 800dc5c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dc60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc64:	8988      	ldrh	r0, [r1, #12]
 800dc66:	4770      	bx	lr

0800dc68 <RUC_GetPhaseFinalMecSpeedUnit>:
 800dc68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dc6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc70:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop

0800dc78 <RUC_GetPhaseFinalTorque>:
 800dc78:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dc7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc80:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800dc84:	4770      	bx	lr
 800dc86:	bf00      	nop

0800dc88 <RUC_GetNumberOfPhases>:
 800dc88:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800dc8c:	4770      	bx	lr
 800dc8e:	bf00      	nop

0800dc90 <STO_PLL_CalcElAngle>:
 800dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc94:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 800dc98:	f8d0 c068 	ldr.w	ip, [r0, #104]	; 0x68
 800dc9c:	4604      	mov	r4, r0
 800dc9e:	03d8      	lsls	r0, r3, #15
 800dca0:	1ac2      	subs	r2, r0, r3
 800dca2:	4594      	cmp	ip, r2
 800dca4:	b087      	sub	sp, #28
 800dca6:	f340 80c4 	ble.w	800de32 <STO_PLL_CalcElAngle+0x1a2>
 800dcaa:	66a2      	str	r2, [r4, #104]	; 0x68
 800dcac:	4694      	mov	ip, r2
 800dcae:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 800dcb2:	f8d4 e06c 	ldr.w	lr, [r4, #108]	; 0x6c
 800dcb6:	fa4c f605 	asr.w	r6, ip, r5
 800dcba:	9602      	str	r6, [sp, #8]
 800dcbc:	4572      	cmp	r2, lr
 800dcbe:	b236      	sxth	r6, r6
 800dcc0:	9600      	str	r6, [sp, #0]
 800dcc2:	f280 80c8 	bge.w	800de56 <STO_PLL_CalcElAngle+0x1c6>
 800dcc6:	66e2      	str	r2, [r4, #108]	; 0x6c
 800dcc8:	4696      	mov	lr, r2
 800dcca:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 800dcce:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800dcd0:	03de      	lsls	r6, r3, #15
 800dcd2:	fa4e f205 	asr.w	r2, lr, r5
 800dcd6:	1af5      	subs	r5, r6, r3
 800dcd8:	9203      	str	r2, [sp, #12]
 800dcda:	42a8      	cmp	r0, r5
 800dcdc:	b212      	sxth	r2, r2
 800dcde:	9201      	str	r2, [sp, #4]
 800dce0:	f340 80b3 	ble.w	800de4a <STO_PLL_CalcElAngle+0x1ba>
 800dce4:	6625      	str	r5, [r4, #96]	; 0x60
 800dce6:	4628      	mov	r0, r5
 800dce8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dcea:	4295      	cmp	r5, r2
 800dcec:	f280 80a7 	bge.w	800de3e <STO_PLL_CalcElAngle+0x1ae>
 800dcf0:	6665      	str	r5, [r4, #100]	; 0x64
 800dcf2:	462a      	mov	r2, r5
 800dcf4:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 800dcf8:	f8b1 9006 	ldrh.w	r9, [r1, #6]
 800dcfc:	888d      	ldrh	r5, [r1, #4]
 800dcfe:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
 800dd02:	f8bd 7000 	ldrh.w	r7, [sp]
 800dd06:	f8b1 a008 	ldrh.w	sl, [r1, #8]
 800dd0a:	f9b1 8000 	ldrsh.w	r8, [r1]
 800dd0e:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800dd12:	f8a4 7070 	strh.w	r7, [r4, #112]	; 0x70
 800dd16:	fa40 f703 	asr.w	r7, r0, r3
 800dd1a:	fa42 f303 	asr.w	r3, r2, r3
 800dd1e:	fb13 f10b 	smulbb	r1, r3, fp
 800dd22:	1b7d      	subs	r5, r7, r5
 800dd24:	eba3 0309 	sub.w	r3, r3, r9
 800dd28:	fb17 f70b 	smulbb	r7, r7, fp
 800dd2c:	f9b4 9022 	ldrsh.w	r9, [r4, #34]	; 0x22
 800dd30:	f8bd b004 	ldrh.w	fp, [sp, #4]
 800dd34:	f8a4 b072 	strh.w	fp, [r4, #114]	; 0x72
 800dd38:	1a51      	subs	r1, r2, r1
 800dd3a:	b22d      	sxth	r5, r5
 800dd3c:	fb0a f208 	mul.w	r2, sl, r8
 800dd40:	1bc0      	subs	r0, r0, r7
 800dd42:	f9b4 8028 	ldrsh.w	r8, [r4, #40]	; 0x28
 800dd46:	8e67      	ldrh	r7, [r4, #50]	; 0x32
 800dd48:	f9b4 b124 	ldrsh.w	fp, [r4, #292]	; 0x124
 800dd4c:	fb09 0005 	mla	r0, r9, r5, r0
 800dd50:	1412      	asrs	r2, r2, #16
 800dd52:	fb08 0202 	mla	r2, r8, r2, r0
 800dd56:	9801      	ldr	r0, [sp, #4]
 800dd58:	f1bb 0f00 	cmp.w	fp, #0
 800dd5c:	b21b      	sxth	r3, r3
 800dd5e:	fa40 fb07 	asr.w	fp, r0, r7
 800dd62:	fb0a f606 	mul.w	r6, sl, r6
 800dd66:	9800      	ldr	r0, [sp, #0]
 800dd68:	fb09 1a03 	mla	sl, r9, r3, r1
 800dd6c:	ea4f 4626 	mov.w	r6, r6, asr #16
 800dd70:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 800dd74:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 800dd78:	fb08 a606 	mla	r6, r8, r6, sl
 800dd7c:	fa40 f707 	asr.w	r7, r0, r7
 800dd80:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
 800dd84:	f9b4 a024 	ldrsh.w	sl, [r4, #36]	; 0x24
 800dd88:	fb09 e303 	mla	r3, r9, r3, lr
 800dd8c:	fb07 f701 	mul.w	r7, r7, r1
 800dd90:	fb01 fb0b 	mul.w	fp, r1, fp
 800dd94:	fb07 3718 	mls	r7, r7, r8, r3
 800dd98:	9900      	ldr	r1, [sp, #0]
 800dd9a:	9b01      	ldr	r3, [sp, #4]
 800dd9c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800dda0:	fb05 c509 	mla	r5, r5, r9, ip
 800dda4:	bfb8      	it	lt
 800dda6:	4681      	movlt	r9, r0
 800dda8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800ddac:	bfa8      	it	ge
 800ddae:	f04f 0901 	movge.w	r9, #1
 800ddb2:	fb0a 6613 	mls	r6, sl, r3, r6
 800ddb6:	fb08 550b 	mla	r5, r8, fp, r5
 800ddba:	fb0a 2b11 	mls	fp, sl, r1, r2
 800ddbe:	f7f3 faf5 	bl	80013ac <MCM_Trig_Functions>
 800ddc2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ddc6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800ddca:	fb13 f309 	smulbb	r3, r3, r9
 800ddce:	fb12 f109 	smulbb	r1, r2, r9
 800ddd2:	425b      	negs	r3, r3
 800ddd4:	fb10 f303 	smulbb	r3, r0, r3
 800ddd8:	fb10 f021 	smultb	r0, r0, r1
 800dddc:	f343 33cf 	sbfx	r3, r3, #15, #16
 800dde0:	f340 31cf 	sbfx	r1, r0, #15, #16
 800dde4:	1a59      	subs	r1, r3, r1
 800dde6:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800ddea:	f7fc f917 	bl	800a01c <PI_Controller>
 800ddee:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 800ddf2:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 800ddf6:	8220      	strh	r0, [r4, #16]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	bf0a      	itet	eq
 800de00:	2200      	moveq	r2, #0
 800de02:	461a      	movne	r2, r3
 800de04:	4613      	moveq	r3, r2
 800de06:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800de0a:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 800de0e:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800de12:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 800de16:	88a2      	ldrh	r2, [r4, #4]
 800de18:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 800de1c:	4410      	add	r0, r2
 800de1e:	b200      	sxth	r0, r0
 800de20:	f8c4 b060 	str.w	fp, [r4, #96]	; 0x60
 800de24:	66a5      	str	r5, [r4, #104]	; 0x68
 800de26:	6666      	str	r6, [r4, #100]	; 0x64
 800de28:	66e7      	str	r7, [r4, #108]	; 0x6c
 800de2a:	80a0      	strh	r0, [r4, #4]
 800de2c:	b007      	add	sp, #28
 800de2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de32:	1a1d      	subs	r5, r3, r0
 800de34:	45ac      	cmp	ip, r5
 800de36:	bfdc      	itt	le
 800de38:	66a5      	strle	r5, [r4, #104]	; 0x68
 800de3a:	46ac      	movle	ip, r5
 800de3c:	e737      	b.n	800dcae <STO_PLL_CalcElAngle+0x1e>
 800de3e:	1b9b      	subs	r3, r3, r6
 800de40:	429a      	cmp	r2, r3
 800de42:	bfdc      	itt	le
 800de44:	6663      	strle	r3, [r4, #100]	; 0x64
 800de46:	461a      	movle	r2, r3
 800de48:	e754      	b.n	800dcf4 <STO_PLL_CalcElAngle+0x64>
 800de4a:	1b9a      	subs	r2, r3, r6
 800de4c:	4290      	cmp	r0, r2
 800de4e:	bfdc      	itt	le
 800de50:	6622      	strle	r2, [r4, #96]	; 0x60
 800de52:	4610      	movle	r0, r2
 800de54:	e748      	b.n	800dce8 <STO_PLL_CalcElAngle+0x58>
 800de56:	1a1b      	subs	r3, r3, r0
 800de58:	459e      	cmp	lr, r3
 800de5a:	bfdc      	itt	le
 800de5c:	66e3      	strle	r3, [r4, #108]	; 0x6c
 800de5e:	469e      	movle	lr, r3
 800de60:	e733      	b.n	800dcca <STO_PLL_CalcElAngle+0x3a>
 800de62:	bf00      	nop

0800de64 <STO_PLL_CalcAvrgMecSpeedUnit>:
 800de64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de66:	f890 710e 	ldrb.w	r7, [r0, #270]	; 0x10e
 800de6a:	2f00      	cmp	r7, #0
 800de6c:	f000 8099 	beq.w	800dfa2 <STO_PLL_CalcAvrgMecSpeedUnit+0x13e>
 800de70:	1e7e      	subs	r6, r7, #1
 800de72:	b2f6      	uxtb	r6, r6
 800de74:	363a      	adds	r6, #58	; 0x3a
 800de76:	f100 0472 	add.w	r4, r0, #114	; 0x72
 800de7a:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800de7e:	4622      	mov	r2, r4
 800de80:	2300      	movs	r3, #0
 800de82:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 800de86:	4296      	cmp	r6, r2
 800de88:	442b      	add	r3, r5
 800de8a:	d1fa      	bne.n	800de82 <STO_PLL_CalcAvrgMecSpeedUnit+0x1e>
 800de8c:	2500      	movs	r5, #0
 800de8e:	fb93 f6f7 	sdiv	r6, r3, r7
 800de92:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 800de96:	1b9b      	subs	r3, r3, r6
 800de98:	42a2      	cmp	r2, r4
 800de9a:	fb03 5503 	mla	r5, r3, r3, r5
 800de9e:	d1f8      	bne.n	800de92 <STO_PLL_CalcAvrgMecSpeedUnit+0x2e>
 800dea0:	fb95 f5f7 	sdiv	r5, r5, r7
 800dea4:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 800dea8:	8b43      	ldrh	r3, [r0, #26]
 800deaa:	7884      	ldrb	r4, [r0, #2]
 800deac:	f890 7104 	ldrb.w	r7, [r0, #260]	; 0x104
 800deb0:	fb06 fe06 	mul.w	lr, r6, r6
 800deb4:	fb02 f20e 	mul.w	r2, r2, lr
 800deb8:	11d2      	asrs	r2, r2, #7
 800deba:	fb06 f303 	mul.w	r3, r6, r3
 800debe:	42aa      	cmp	r2, r5
 800dec0:	fb03 f304 	mul.w	r3, r3, r4
 800dec4:	bfd8      	it	le
 800dec6:	2600      	movle	r6, #0
 800dec8:	69c4      	ldr	r4, [r0, #28]
 800deca:	fb93 f3f4 	sdiv	r3, r3, r4
 800dece:	bfc8      	it	gt
 800ded0:	2601      	movgt	r6, #1
 800ded2:	7844      	ldrb	r4, [r0, #1]
 800ded4:	fb93 f3f4 	sdiv	r3, r3, r4
 800ded8:	b21c      	sxth	r4, r3
 800deda:	800c      	strh	r4, [r1, #0]
 800dedc:	8184      	strh	r4, [r0, #12]
 800dede:	f880 60f5 	strb.w	r6, [r0, #245]	; 0xf5
 800dee2:	b1b7      	cbz	r7, 800df12 <STO_PLL_CalcAvrgMecSpeedUnit+0xae>
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f8b0 411a 	ldrh.w	r4, [r0, #282]	; 0x11a
 800deea:	bfb8      	it	lt
 800deec:	425b      	neglt	r3, r3
 800deee:	42a3      	cmp	r3, r4
 800def0:	db30      	blt.n	800df54 <STO_PLL_CalcAvrgMecSpeedUnit+0xf0>
 800def2:	2300      	movs	r3, #0
 800def4:	461c      	mov	r4, r3
 800def6:	461e      	mov	r6, r3
 800def8:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
 800defc:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
 800df00:	f880 30f9 	strb.w	r3, [r0, #249]	; 0xf9
 800df04:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 800df08:	b944      	cbnz	r4, 800df1c <STO_PLL_CalcAvrgMecSpeedUnit+0xb8>
 800df0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df0e:	f7fe bd03 	b.w	800c918 <SPD_IsMecSpeedReliable>
 800df12:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
 800df16:	2301      	movs	r3, #1
 800df18:	2c00      	cmp	r4, #0
 800df1a:	d0f6      	beq.n	800df0a <STO_PLL_CalcAvrgMecSpeedUnit+0xa6>
 800df1c:	42aa      	cmp	r2, r5
 800df1e:	dc10      	bgt.n	800df42 <STO_PLL_CalcAvrgMecSpeedUnit+0xde>
 800df20:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 800df24:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 800df28:	3301      	adds	r3, #1
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	429a      	cmp	r2, r3
 800df2e:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800df32:	d8ea      	bhi.n	800df0a <STO_PLL_CalcAvrgMecSpeedUnit+0xa6>
 800df34:	2300      	movs	r3, #0
 800df36:	78c2      	ldrb	r2, [r0, #3]
 800df38:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800df3c:	7002      	strb	r2, [r0, #0]
 800df3e:	4618      	mov	r0, r3
 800df40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df42:	2b00      	cmp	r3, #0
 800df44:	d0ec      	beq.n	800df20 <STO_PLL_CalcAvrgMecSpeedUnit+0xbc>
 800df46:	2300      	movs	r3, #0
 800df48:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800df4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df50:	f7fe bce2 	b.w	800c918 <SPD_IsMecSpeedReliable>
 800df54:	f890 4119 	ldrb.w	r4, [r0, #281]	; 0x119
 800df58:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 800df5c:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	; 0x72
 800df60:	f9b0 6070 	ldrsh.w	r6, [r0, #112]	; 0x70
 800df64:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800df68:	fb93 f3fe 	sdiv	r3, r3, lr
 800df6c:	fb03 f404 	mul.w	r4, r3, r4
 800df70:	2c00      	cmp	r4, #0
 800df72:	bfb8      	it	lt
 800df74:	343f      	addlt	r4, #63	; 0x3f
 800df76:	11a4      	asrs	r4, r4, #6
 800df78:	fb04 f403 	mul.w	r4, r4, r3
 800df7c:	fb07 f707 	mul.w	r7, r7, r7
 800df80:	2c00      	cmp	r4, #0
 800df82:	fb06 7606 	mla	r6, r6, r6, r7
 800df86:	4623      	mov	r3, r4
 800df88:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 800df8c:	bfb8      	it	lt
 800df8e:	f104 033f 	addlt.w	r3, r4, #63	; 0x3f
 800df92:	119b      	asrs	r3, r3, #6
 800df94:	fb07 4313 	mls	r3, r7, r3, r4
 800df98:	429e      	cmp	r6, r3
 800df9a:	bfd4      	ite	le
 800df9c:	2300      	movle	r3, #0
 800df9e:	2301      	movgt	r3, #1
 800dfa0:	e7aa      	b.n	800def8 <STO_PLL_CalcAvrgMecSpeedUnit+0x94>
 800dfa2:	463d      	mov	r5, r7
 800dfa4:	463e      	mov	r6, r7
 800dfa6:	e77d      	b.n	800dea4 <STO_PLL_CalcAvrgMecSpeedUnit+0x40>

0800dfa8 <STO_PLL_CalcAvrgElSpeedDpp>:
 800dfa8:	b470      	push	{r4, r5, r6}
 800dfaa:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
 800dfae:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 800dfb2:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
 800dfb6:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 800dfba:	b2ae      	uxth	r6, r5
 800dfbc:	1af3      	subs	r3, r6, r3
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	b1c3      	cbz	r3, 800dff4 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 800dfc2:	4413      	add	r3, r2
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	b219      	sxth	r1, r3
 800dfc8:	428d      	cmp	r5, r1
 800dfca:	bfdc      	itt	le
 800dfcc:	1b9b      	suble	r3, r3, r6
 800dfce:	b219      	sxthle	r1, r3
 800dfd0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800dfd4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800dfd8:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 800dfdc:	f9b1 2074 	ldrsh.w	r2, [r1, #116]	; 0x74
 800dfe0:	4423      	add	r3, r4
 800dfe2:	1a9b      	subs	r3, r3, r2
 800dfe4:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 800dfe8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800dfec:	4113      	asrs	r3, r2
 800dfee:	81c3      	strh	r3, [r0, #14]
 800dff0:	bc70      	pop	{r4, r5, r6}
 800dff2:	4770      	bx	lr
 800dff4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800dff8:	f9b0 110c 	ldrsh.w	r1, [r0, #268]	; 0x10c
 800dffc:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 800e000:	4423      	add	r3, r4
 800e002:	1a5b      	subs	r3, r3, r1
 800e004:	e7ee      	b.n	800dfe4 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
 800e006:	bf00      	nop

0800e008 <STO_PLL_Clear>:
 800e008:	b510      	push	{r4, lr}
 800e00a:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 800e00e:	2100      	movs	r1, #0
 800e010:	4604      	mov	r4, r0
 800e012:	6601      	str	r1, [r0, #96]	; 0x60
 800e014:	6641      	str	r1, [r0, #100]	; 0x64
 800e016:	6681      	str	r1, [r0, #104]	; 0x68
 800e018:	66c1      	str	r1, [r0, #108]	; 0x6c
 800e01a:	8081      	strh	r1, [r0, #4]
 800e01c:	81c1      	strh	r1, [r0, #14]
 800e01e:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
 800e022:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
 800e026:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 800e02a:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 800e02e:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 800e032:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 800e036:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 800e03a:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 800e03e:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 800e042:	b132      	cbz	r2, 800e052 <STO_PLL_Clear+0x4a>
 800e044:	3a01      	subs	r2, #1
 800e046:	b2d2      	uxtb	r2, r2
 800e048:	3201      	adds	r2, #1
 800e04a:	0052      	lsls	r2, r2, #1
 800e04c:	3074      	adds	r0, #116	; 0x74
 800e04e:	f000 f92d 	bl	800e2ac <memset>
 800e052:	2100      	movs	r1, #0
 800e054:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 800e058:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800e05c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800e060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e064:	f7fb bf97 	b.w	8009f96 <PID_SetIntegralTerm>

0800e068 <STO_PLL_Init>:
 800e068:	b538      	push	{r3, r4, r5, lr}
 800e06a:	4604      	mov	r4, r0
 800e06c:	2101      	movs	r1, #1
 800e06e:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 800e072:	f9b4 502e 	ldrsh.w	r5, [r4, #46]	; 0x2e
 800e076:	4b16      	ldr	r3, [pc, #88]	; (800e0d0 <STO_PLL_Init+0x68>)
 800e078:	fb93 f3f5 	sdiv	r3, r3, r5
 800e07c:	2200      	movs	r2, #0
 800e07e:	b21b      	sxth	r3, r3
 800e080:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 800e084:	8662      	strh	r2, [r4, #50]	; 0x32
 800e086:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 800e08a:	4608      	mov	r0, r1
 800e08c:	b90b      	cbnz	r3, 800e092 <STO_PLL_Init+0x2a>
 800e08e:	e00b      	b.n	800e0a8 <STO_PLL_Init+0x40>
 800e090:	4611      	mov	r1, r2
 800e092:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800e096:	1c4a      	adds	r2, r1, #1
 800e098:	105b      	asrs	r3, r3, #1
 800e09a:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800e09e:	b292      	uxth	r2, r2
 800e0a0:	d1f6      	bne.n	800e090 <STO_PLL_Init+0x28>
 800e0a2:	b200      	sxth	r0, r0
 800e0a4:	8661      	strh	r1, [r4, #50]	; 0x32
 800e0a6:	4601      	mov	r1, r0
 800e0a8:	4b0a      	ldr	r3, [pc, #40]	; (800e0d4 <STO_PLL_Init+0x6c>)
 800e0aa:	8620      	strh	r0, [r4, #48]	; 0x30
 800e0ac:	fb01 f105 	mul.w	r1, r1, r5
 800e0b0:	fb83 2301 	smull	r2, r3, r3, r1
 800e0b4:	17c9      	asrs	r1, r1, #31
 800e0b6:	ebc1 2123 	rsb	r1, r1, r3, asr #8
 800e0ba:	8561      	strh	r1, [r4, #42]	; 0x2a
 800e0bc:	4620      	mov	r0, r4
 800e0be:	f7ff ffa3 	bl	800e008 <STO_PLL_Clear>
 800e0c2:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800e0c6:	f7fb ff0f 	bl	8009ee8 <PID_HandleInit>
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	8263      	strh	r3, [r4, #18]
 800e0ce:	bd38      	pop	{r3, r4, r5, pc}
 800e0d0:	000fea5e 	.word	0x000fea5e
 800e0d4:	06488dc5 	.word	0x06488dc5

0800e0d8 <STO_PLL_IsObserverConverged>:
 800e0d8:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 800e0dc:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	b10a      	cbz	r2, 800e0e8 <STO_PLL_IsObserverConverged+0x10>
 800e0e4:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800e0e8:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	d143      	bne.n	800e178 <STO_PLL_IsObserverConverged+0xa0>
 800e0f0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800e0f4:	b430      	push	{r4, r5}
 800e0f6:	fb02 f501 	mul.w	r5, r2, r1
 800e0fa:	2d00      	cmp	r5, #0
 800e0fc:	460c      	mov	r4, r1
 800e0fe:	dd34      	ble.n	800e16a <STO_PLL_IsObserverConverged+0x92>
 800e100:	2a00      	cmp	r2, #0
 800e102:	bfbc      	itt	lt
 800e104:	4252      	neglt	r2, r2
 800e106:	b212      	sxthlt	r2, r2
 800e108:	2900      	cmp	r1, #0
 800e10a:	bfbc      	itt	lt
 800e10c:	4249      	neglt	r1, r1
 800e10e:	b20c      	sxthlt	r4, r1
 800e110:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 800e114:	b359      	cbz	r1, 800e16e <STO_PLL_IsObserverConverged+0x96>
 800e116:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 800e11a:	b291      	uxth	r1, r2
 800e11c:	428d      	cmp	r5, r1
 800e11e:	d226      	bcs.n	800e16e <STO_PLL_IsObserverConverged+0x96>
 800e120:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 800e124:	fb04 f101 	mul.w	r1, r4, r1
 800e128:	2900      	cmp	r1, #0
 800e12a:	bfb8      	it	lt
 800e12c:	310f      	addlt	r1, #15
 800e12e:	f341 110f 	sbfx	r1, r1, #4, #16
 800e132:	428a      	cmp	r2, r1
 800e134:	db1b      	blt.n	800e16e <STO_PLL_IsObserverConverged+0x96>
 800e136:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 800e13a:	fb04 f101 	mul.w	r1, r4, r1
 800e13e:	2900      	cmp	r1, #0
 800e140:	bfb8      	it	lt
 800e142:	310f      	addlt	r1, #15
 800e144:	f341 110f 	sbfx	r1, r1, #4, #16
 800e148:	428a      	cmp	r2, r1
 800e14a:	dc10      	bgt.n	800e16e <STO_PLL_IsObserverConverged+0x96>
 800e14c:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 800e150:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 800e154:	3201      	adds	r2, #1
 800e156:	b2d2      	uxtb	r2, r2
 800e158:	4291      	cmp	r1, r2
 800e15a:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800e15e:	d804      	bhi.n	800e16a <STO_PLL_IsObserverConverged+0x92>
 800e160:	2001      	movs	r0, #1
 800e162:	2200      	movs	r2, #0
 800e164:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800e168:	701a      	strb	r2, [r3, #0]
 800e16a:	bc30      	pop	{r4, r5}
 800e16c:	4770      	bx	lr
 800e16e:	2200      	movs	r2, #0
 800e170:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800e174:	bc30      	pop	{r4, r5}
 800e176:	4770      	bx	lr
 800e178:	2001      	movs	r0, #1
 800e17a:	2200      	movs	r2, #0
 800e17c:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800e180:	701a      	strb	r2, [r3, #0]
 800e182:	4770      	bx	lr

0800e184 <STO_PLL_GetEstimatedBemf>:
 800e184:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800e186:	2000      	movs	r0, #0
 800e188:	b29a      	uxth	r2, r3
 800e18a:	f362 000f 	bfi	r0, r2, #0, #16
 800e18e:	0c1b      	lsrs	r3, r3, #16
 800e190:	f363 401f 	bfi	r0, r3, #16, #16
 800e194:	b082      	sub	sp, #8
 800e196:	b002      	add	sp, #8
 800e198:	4770      	bx	lr
 800e19a:	bf00      	nop

0800e19c <STO_PLL_GetEstimatedCurrent>:
 800e19c:	b410      	push	{r4}
 800e19e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e1a0:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 800e1a4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800e1a6:	4122      	asrs	r2, r4
 800e1a8:	b292      	uxth	r2, r2
 800e1aa:	4123      	asrs	r3, r4
 800e1ac:	2100      	movs	r1, #0
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	f362 010f 	bfi	r1, r2, #0, #16
 800e1b4:	f363 411f 	bfi	r1, r3, #16, #16
 800e1b8:	4608      	mov	r0, r1
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	b003      	add	sp, #12
 800e1be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <STO_PLL_GetObserverGains>:
 800e1c4:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800e1c8:	800b      	strh	r3, [r1, #0]
 800e1ca:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 800e1ce:	8013      	strh	r3, [r2, #0]
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop

0800e1d4 <STO_PLL_SetObserverGains>:
 800e1d4:	8441      	strh	r1, [r0, #34]	; 0x22
 800e1d6:	84c2      	strh	r2, [r0, #38]	; 0x26
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop

0800e1dc <STO_GetPLLGains>:
 800e1dc:	b570      	push	{r4, r5, r6, lr}
 800e1de:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	460e      	mov	r6, r1
 800e1e6:	4615      	mov	r5, r2
 800e1e8:	f7fb febb 	bl	8009f62 <PID_GetKP>
 800e1ec:	8030      	strh	r0, [r6, #0]
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f7fb fec4 	bl	8009f7c <PID_GetKI>
 800e1f4:	8028      	strh	r0, [r5, #0]
 800e1f6:	bd70      	pop	{r4, r5, r6, pc}

0800e1f8 <STO_SetPLLGains>:
 800e1f8:	b538      	push	{r3, r4, r5, lr}
 800e1fa:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800e1fe:	4615      	mov	r5, r2
 800e200:	4620      	mov	r0, r4
 800e202:	f7fb fe90 	bl	8009f26 <PID_SetKP>
 800e206:	4629      	mov	r1, r5
 800e208:	4620      	mov	r0, r4
 800e20a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e20e:	f7fb be99 	b.w	8009f44 <PID_SetKI>
 800e212:	bf00      	nop

0800e214 <STO_OTF_ResetPLL>:
 800e214:	6800      	ldr	r0, [r0, #0]
 800e216:	2100      	movs	r1, #0
 800e218:	3034      	adds	r0, #52	; 0x34
 800e21a:	f7fb bebc 	b.w	8009f96 <PID_SetIntegralTerm>
 800e21e:	bf00      	nop

0800e220 <STO_ResetPLL>:
 800e220:	3034      	adds	r0, #52	; 0x34
 800e222:	2100      	movs	r1, #0
 800e224:	f7fb beb7 	b.w	8009f96 <PID_SetIntegralTerm>

0800e228 <STO_PLL_GetEstimatedBemfLevel>:
 800e228:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop

0800e230 <STO_PLL_GetObservedBemfLevel>:
 800e230:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 800e234:	4770      	bx	lr
 800e236:	bf00      	nop

0800e238 <STO_PLL_IsVarianceTight>:
 800e238:	6803      	ldr	r3, [r0, #0]
 800e23a:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 800e23e:	4770      	bx	lr

0800e240 <STO_PLL_ForceConvergency1>:
 800e240:	6803      	ldr	r3, [r0, #0]
 800e242:	2201      	movs	r2, #1
 800e244:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop

0800e24c <STO_PLL_ForceConvergency2>:
 800e24c:	6803      	ldr	r3, [r0, #0]
 800e24e:	2201      	movs	r2, #1
 800e250:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 800e254:	4770      	bx	lr
 800e256:	bf00      	nop

0800e258 <__errno>:
 800e258:	4b01      	ldr	r3, [pc, #4]	; (800e260 <__errno+0x8>)
 800e25a:	6818      	ldr	r0, [r3, #0]
 800e25c:	4770      	bx	lr
 800e25e:	bf00      	nop
 800e260:	2000069c 	.word	0x2000069c

0800e264 <__libc_init_array>:
 800e264:	b570      	push	{r4, r5, r6, lr}
 800e266:	4e0d      	ldr	r6, [pc, #52]	; (800e29c <__libc_init_array+0x38>)
 800e268:	4c0d      	ldr	r4, [pc, #52]	; (800e2a0 <__libc_init_array+0x3c>)
 800e26a:	1ba4      	subs	r4, r4, r6
 800e26c:	10a4      	asrs	r4, r4, #2
 800e26e:	2500      	movs	r5, #0
 800e270:	42a5      	cmp	r5, r4
 800e272:	d109      	bne.n	800e288 <__libc_init_array+0x24>
 800e274:	4e0b      	ldr	r6, [pc, #44]	; (800e2a4 <__libc_init_array+0x40>)
 800e276:	4c0c      	ldr	r4, [pc, #48]	; (800e2a8 <__libc_init_array+0x44>)
 800e278:	f000 fc26 	bl	800eac8 <_init>
 800e27c:	1ba4      	subs	r4, r4, r6
 800e27e:	10a4      	asrs	r4, r4, #2
 800e280:	2500      	movs	r5, #0
 800e282:	42a5      	cmp	r5, r4
 800e284:	d105      	bne.n	800e292 <__libc_init_array+0x2e>
 800e286:	bd70      	pop	{r4, r5, r6, pc}
 800e288:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e28c:	4798      	blx	r3
 800e28e:	3501      	adds	r5, #1
 800e290:	e7ee      	b.n	800e270 <__libc_init_array+0xc>
 800e292:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e296:	4798      	blx	r3
 800e298:	3501      	adds	r5, #1
 800e29a:	e7f2      	b.n	800e282 <__libc_init_array+0x1e>
 800e29c:	0800ee24 	.word	0x0800ee24
 800e2a0:	0800ee24 	.word	0x0800ee24
 800e2a4:	0800ee24 	.word	0x0800ee24
 800e2a8:	0800ee28 	.word	0x0800ee28

0800e2ac <memset>:
 800e2ac:	4402      	add	r2, r0
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d100      	bne.n	800e2b6 <memset+0xa>
 800e2b4:	4770      	bx	lr
 800e2b6:	f803 1b01 	strb.w	r1, [r3], #1
 800e2ba:	e7f9      	b.n	800e2b0 <memset+0x4>

0800e2bc <siprintf>:
 800e2bc:	b40e      	push	{r1, r2, r3}
 800e2be:	b500      	push	{lr}
 800e2c0:	b09c      	sub	sp, #112	; 0x70
 800e2c2:	ab1d      	add	r3, sp, #116	; 0x74
 800e2c4:	9002      	str	r0, [sp, #8]
 800e2c6:	9006      	str	r0, [sp, #24]
 800e2c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e2cc:	4809      	ldr	r0, [pc, #36]	; (800e2f4 <siprintf+0x38>)
 800e2ce:	9107      	str	r1, [sp, #28]
 800e2d0:	9104      	str	r1, [sp, #16]
 800e2d2:	4909      	ldr	r1, [pc, #36]	; (800e2f8 <siprintf+0x3c>)
 800e2d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2d8:	9105      	str	r1, [sp, #20]
 800e2da:	6800      	ldr	r0, [r0, #0]
 800e2dc:	9301      	str	r3, [sp, #4]
 800e2de:	a902      	add	r1, sp, #8
 800e2e0:	f000 f866 	bl	800e3b0 <_svfiprintf_r>
 800e2e4:	9b02      	ldr	r3, [sp, #8]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	701a      	strb	r2, [r3, #0]
 800e2ea:	b01c      	add	sp, #112	; 0x70
 800e2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2f0:	b003      	add	sp, #12
 800e2f2:	4770      	bx	lr
 800e2f4:	2000069c 	.word	0x2000069c
 800e2f8:	ffff0208 	.word	0xffff0208

0800e2fc <__ssputs_r>:
 800e2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e300:	688e      	ldr	r6, [r1, #8]
 800e302:	429e      	cmp	r6, r3
 800e304:	4682      	mov	sl, r0
 800e306:	460c      	mov	r4, r1
 800e308:	4690      	mov	r8, r2
 800e30a:	4699      	mov	r9, r3
 800e30c:	d837      	bhi.n	800e37e <__ssputs_r+0x82>
 800e30e:	898a      	ldrh	r2, [r1, #12]
 800e310:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e314:	d031      	beq.n	800e37a <__ssputs_r+0x7e>
 800e316:	6825      	ldr	r5, [r4, #0]
 800e318:	6909      	ldr	r1, [r1, #16]
 800e31a:	1a6f      	subs	r7, r5, r1
 800e31c:	6965      	ldr	r5, [r4, #20]
 800e31e:	2302      	movs	r3, #2
 800e320:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e324:	fb95 f5f3 	sdiv	r5, r5, r3
 800e328:	f109 0301 	add.w	r3, r9, #1
 800e32c:	443b      	add	r3, r7
 800e32e:	429d      	cmp	r5, r3
 800e330:	bf38      	it	cc
 800e332:	461d      	movcc	r5, r3
 800e334:	0553      	lsls	r3, r2, #21
 800e336:	d530      	bpl.n	800e39a <__ssputs_r+0x9e>
 800e338:	4629      	mov	r1, r5
 800e33a:	f000 fb2b 	bl	800e994 <_malloc_r>
 800e33e:	4606      	mov	r6, r0
 800e340:	b950      	cbnz	r0, 800e358 <__ssputs_r+0x5c>
 800e342:	230c      	movs	r3, #12
 800e344:	f8ca 3000 	str.w	r3, [sl]
 800e348:	89a3      	ldrh	r3, [r4, #12]
 800e34a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e34e:	81a3      	strh	r3, [r4, #12]
 800e350:	f04f 30ff 	mov.w	r0, #4294967295
 800e354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e358:	463a      	mov	r2, r7
 800e35a:	6921      	ldr	r1, [r4, #16]
 800e35c:	f000 faa8 	bl	800e8b0 <memcpy>
 800e360:	89a3      	ldrh	r3, [r4, #12]
 800e362:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e36a:	81a3      	strh	r3, [r4, #12]
 800e36c:	6126      	str	r6, [r4, #16]
 800e36e:	6165      	str	r5, [r4, #20]
 800e370:	443e      	add	r6, r7
 800e372:	1bed      	subs	r5, r5, r7
 800e374:	6026      	str	r6, [r4, #0]
 800e376:	60a5      	str	r5, [r4, #8]
 800e378:	464e      	mov	r6, r9
 800e37a:	454e      	cmp	r6, r9
 800e37c:	d900      	bls.n	800e380 <__ssputs_r+0x84>
 800e37e:	464e      	mov	r6, r9
 800e380:	4632      	mov	r2, r6
 800e382:	4641      	mov	r1, r8
 800e384:	6820      	ldr	r0, [r4, #0]
 800e386:	f000 fa9e 	bl	800e8c6 <memmove>
 800e38a:	68a3      	ldr	r3, [r4, #8]
 800e38c:	1b9b      	subs	r3, r3, r6
 800e38e:	60a3      	str	r3, [r4, #8]
 800e390:	6823      	ldr	r3, [r4, #0]
 800e392:	441e      	add	r6, r3
 800e394:	6026      	str	r6, [r4, #0]
 800e396:	2000      	movs	r0, #0
 800e398:	e7dc      	b.n	800e354 <__ssputs_r+0x58>
 800e39a:	462a      	mov	r2, r5
 800e39c:	f000 fb54 	bl	800ea48 <_realloc_r>
 800e3a0:	4606      	mov	r6, r0
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	d1e2      	bne.n	800e36c <__ssputs_r+0x70>
 800e3a6:	6921      	ldr	r1, [r4, #16]
 800e3a8:	4650      	mov	r0, sl
 800e3aa:	f000 faa5 	bl	800e8f8 <_free_r>
 800e3ae:	e7c8      	b.n	800e342 <__ssputs_r+0x46>

0800e3b0 <_svfiprintf_r>:
 800e3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b4:	461d      	mov	r5, r3
 800e3b6:	898b      	ldrh	r3, [r1, #12]
 800e3b8:	061f      	lsls	r7, r3, #24
 800e3ba:	b09d      	sub	sp, #116	; 0x74
 800e3bc:	4680      	mov	r8, r0
 800e3be:	460c      	mov	r4, r1
 800e3c0:	4616      	mov	r6, r2
 800e3c2:	d50f      	bpl.n	800e3e4 <_svfiprintf_r+0x34>
 800e3c4:	690b      	ldr	r3, [r1, #16]
 800e3c6:	b96b      	cbnz	r3, 800e3e4 <_svfiprintf_r+0x34>
 800e3c8:	2140      	movs	r1, #64	; 0x40
 800e3ca:	f000 fae3 	bl	800e994 <_malloc_r>
 800e3ce:	6020      	str	r0, [r4, #0]
 800e3d0:	6120      	str	r0, [r4, #16]
 800e3d2:	b928      	cbnz	r0, 800e3e0 <_svfiprintf_r+0x30>
 800e3d4:	230c      	movs	r3, #12
 800e3d6:	f8c8 3000 	str.w	r3, [r8]
 800e3da:	f04f 30ff 	mov.w	r0, #4294967295
 800e3de:	e0c8      	b.n	800e572 <_svfiprintf_r+0x1c2>
 800e3e0:	2340      	movs	r3, #64	; 0x40
 800e3e2:	6163      	str	r3, [r4, #20]
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3e8:	2320      	movs	r3, #32
 800e3ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3ee:	2330      	movs	r3, #48	; 0x30
 800e3f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3f4:	9503      	str	r5, [sp, #12]
 800e3f6:	f04f 0b01 	mov.w	fp, #1
 800e3fa:	4637      	mov	r7, r6
 800e3fc:	463d      	mov	r5, r7
 800e3fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e402:	b10b      	cbz	r3, 800e408 <_svfiprintf_r+0x58>
 800e404:	2b25      	cmp	r3, #37	; 0x25
 800e406:	d13e      	bne.n	800e486 <_svfiprintf_r+0xd6>
 800e408:	ebb7 0a06 	subs.w	sl, r7, r6
 800e40c:	d00b      	beq.n	800e426 <_svfiprintf_r+0x76>
 800e40e:	4653      	mov	r3, sl
 800e410:	4632      	mov	r2, r6
 800e412:	4621      	mov	r1, r4
 800e414:	4640      	mov	r0, r8
 800e416:	f7ff ff71 	bl	800e2fc <__ssputs_r>
 800e41a:	3001      	adds	r0, #1
 800e41c:	f000 80a4 	beq.w	800e568 <_svfiprintf_r+0x1b8>
 800e420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e422:	4453      	add	r3, sl
 800e424:	9309      	str	r3, [sp, #36]	; 0x24
 800e426:	783b      	ldrb	r3, [r7, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	f000 809d 	beq.w	800e568 <_svfiprintf_r+0x1b8>
 800e42e:	2300      	movs	r3, #0
 800e430:	f04f 32ff 	mov.w	r2, #4294967295
 800e434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e438:	9304      	str	r3, [sp, #16]
 800e43a:	9307      	str	r3, [sp, #28]
 800e43c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e440:	931a      	str	r3, [sp, #104]	; 0x68
 800e442:	462f      	mov	r7, r5
 800e444:	2205      	movs	r2, #5
 800e446:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e44a:	4850      	ldr	r0, [pc, #320]	; (800e58c <_svfiprintf_r+0x1dc>)
 800e44c:	f7f1 fec8 	bl	80001e0 <memchr>
 800e450:	9b04      	ldr	r3, [sp, #16]
 800e452:	b9d0      	cbnz	r0, 800e48a <_svfiprintf_r+0xda>
 800e454:	06d9      	lsls	r1, r3, #27
 800e456:	bf44      	itt	mi
 800e458:	2220      	movmi	r2, #32
 800e45a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e45e:	071a      	lsls	r2, r3, #28
 800e460:	bf44      	itt	mi
 800e462:	222b      	movmi	r2, #43	; 0x2b
 800e464:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e468:	782a      	ldrb	r2, [r5, #0]
 800e46a:	2a2a      	cmp	r2, #42	; 0x2a
 800e46c:	d015      	beq.n	800e49a <_svfiprintf_r+0xea>
 800e46e:	9a07      	ldr	r2, [sp, #28]
 800e470:	462f      	mov	r7, r5
 800e472:	2000      	movs	r0, #0
 800e474:	250a      	movs	r5, #10
 800e476:	4639      	mov	r1, r7
 800e478:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e47c:	3b30      	subs	r3, #48	; 0x30
 800e47e:	2b09      	cmp	r3, #9
 800e480:	d94d      	bls.n	800e51e <_svfiprintf_r+0x16e>
 800e482:	b1b8      	cbz	r0, 800e4b4 <_svfiprintf_r+0x104>
 800e484:	e00f      	b.n	800e4a6 <_svfiprintf_r+0xf6>
 800e486:	462f      	mov	r7, r5
 800e488:	e7b8      	b.n	800e3fc <_svfiprintf_r+0x4c>
 800e48a:	4a40      	ldr	r2, [pc, #256]	; (800e58c <_svfiprintf_r+0x1dc>)
 800e48c:	1a80      	subs	r0, r0, r2
 800e48e:	fa0b f000 	lsl.w	r0, fp, r0
 800e492:	4318      	orrs	r0, r3
 800e494:	9004      	str	r0, [sp, #16]
 800e496:	463d      	mov	r5, r7
 800e498:	e7d3      	b.n	800e442 <_svfiprintf_r+0x92>
 800e49a:	9a03      	ldr	r2, [sp, #12]
 800e49c:	1d11      	adds	r1, r2, #4
 800e49e:	6812      	ldr	r2, [r2, #0]
 800e4a0:	9103      	str	r1, [sp, #12]
 800e4a2:	2a00      	cmp	r2, #0
 800e4a4:	db01      	blt.n	800e4aa <_svfiprintf_r+0xfa>
 800e4a6:	9207      	str	r2, [sp, #28]
 800e4a8:	e004      	b.n	800e4b4 <_svfiprintf_r+0x104>
 800e4aa:	4252      	negs	r2, r2
 800e4ac:	f043 0302 	orr.w	r3, r3, #2
 800e4b0:	9207      	str	r2, [sp, #28]
 800e4b2:	9304      	str	r3, [sp, #16]
 800e4b4:	783b      	ldrb	r3, [r7, #0]
 800e4b6:	2b2e      	cmp	r3, #46	; 0x2e
 800e4b8:	d10c      	bne.n	800e4d4 <_svfiprintf_r+0x124>
 800e4ba:	787b      	ldrb	r3, [r7, #1]
 800e4bc:	2b2a      	cmp	r3, #42	; 0x2a
 800e4be:	d133      	bne.n	800e528 <_svfiprintf_r+0x178>
 800e4c0:	9b03      	ldr	r3, [sp, #12]
 800e4c2:	1d1a      	adds	r2, r3, #4
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	9203      	str	r2, [sp, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	bfb8      	it	lt
 800e4cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4d0:	3702      	adds	r7, #2
 800e4d2:	9305      	str	r3, [sp, #20]
 800e4d4:	4d2e      	ldr	r5, [pc, #184]	; (800e590 <_svfiprintf_r+0x1e0>)
 800e4d6:	7839      	ldrb	r1, [r7, #0]
 800e4d8:	2203      	movs	r2, #3
 800e4da:	4628      	mov	r0, r5
 800e4dc:	f7f1 fe80 	bl	80001e0 <memchr>
 800e4e0:	b138      	cbz	r0, 800e4f2 <_svfiprintf_r+0x142>
 800e4e2:	2340      	movs	r3, #64	; 0x40
 800e4e4:	1b40      	subs	r0, r0, r5
 800e4e6:	fa03 f000 	lsl.w	r0, r3, r0
 800e4ea:	9b04      	ldr	r3, [sp, #16]
 800e4ec:	4303      	orrs	r3, r0
 800e4ee:	3701      	adds	r7, #1
 800e4f0:	9304      	str	r3, [sp, #16]
 800e4f2:	7839      	ldrb	r1, [r7, #0]
 800e4f4:	4827      	ldr	r0, [pc, #156]	; (800e594 <_svfiprintf_r+0x1e4>)
 800e4f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4fa:	2206      	movs	r2, #6
 800e4fc:	1c7e      	adds	r6, r7, #1
 800e4fe:	f7f1 fe6f 	bl	80001e0 <memchr>
 800e502:	2800      	cmp	r0, #0
 800e504:	d038      	beq.n	800e578 <_svfiprintf_r+0x1c8>
 800e506:	4b24      	ldr	r3, [pc, #144]	; (800e598 <_svfiprintf_r+0x1e8>)
 800e508:	bb13      	cbnz	r3, 800e550 <_svfiprintf_r+0x1a0>
 800e50a:	9b03      	ldr	r3, [sp, #12]
 800e50c:	3307      	adds	r3, #7
 800e50e:	f023 0307 	bic.w	r3, r3, #7
 800e512:	3308      	adds	r3, #8
 800e514:	9303      	str	r3, [sp, #12]
 800e516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e518:	444b      	add	r3, r9
 800e51a:	9309      	str	r3, [sp, #36]	; 0x24
 800e51c:	e76d      	b.n	800e3fa <_svfiprintf_r+0x4a>
 800e51e:	fb05 3202 	mla	r2, r5, r2, r3
 800e522:	2001      	movs	r0, #1
 800e524:	460f      	mov	r7, r1
 800e526:	e7a6      	b.n	800e476 <_svfiprintf_r+0xc6>
 800e528:	2300      	movs	r3, #0
 800e52a:	3701      	adds	r7, #1
 800e52c:	9305      	str	r3, [sp, #20]
 800e52e:	4619      	mov	r1, r3
 800e530:	250a      	movs	r5, #10
 800e532:	4638      	mov	r0, r7
 800e534:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e538:	3a30      	subs	r2, #48	; 0x30
 800e53a:	2a09      	cmp	r2, #9
 800e53c:	d903      	bls.n	800e546 <_svfiprintf_r+0x196>
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d0c8      	beq.n	800e4d4 <_svfiprintf_r+0x124>
 800e542:	9105      	str	r1, [sp, #20]
 800e544:	e7c6      	b.n	800e4d4 <_svfiprintf_r+0x124>
 800e546:	fb05 2101 	mla	r1, r5, r1, r2
 800e54a:	2301      	movs	r3, #1
 800e54c:	4607      	mov	r7, r0
 800e54e:	e7f0      	b.n	800e532 <_svfiprintf_r+0x182>
 800e550:	ab03      	add	r3, sp, #12
 800e552:	9300      	str	r3, [sp, #0]
 800e554:	4622      	mov	r2, r4
 800e556:	4b11      	ldr	r3, [pc, #68]	; (800e59c <_svfiprintf_r+0x1ec>)
 800e558:	a904      	add	r1, sp, #16
 800e55a:	4640      	mov	r0, r8
 800e55c:	f3af 8000 	nop.w
 800e560:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e564:	4681      	mov	r9, r0
 800e566:	d1d6      	bne.n	800e516 <_svfiprintf_r+0x166>
 800e568:	89a3      	ldrh	r3, [r4, #12]
 800e56a:	065b      	lsls	r3, r3, #25
 800e56c:	f53f af35 	bmi.w	800e3da <_svfiprintf_r+0x2a>
 800e570:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e572:	b01d      	add	sp, #116	; 0x74
 800e574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e578:	ab03      	add	r3, sp, #12
 800e57a:	9300      	str	r3, [sp, #0]
 800e57c:	4622      	mov	r2, r4
 800e57e:	4b07      	ldr	r3, [pc, #28]	; (800e59c <_svfiprintf_r+0x1ec>)
 800e580:	a904      	add	r1, sp, #16
 800e582:	4640      	mov	r0, r8
 800e584:	f000 f882 	bl	800e68c <_printf_i>
 800e588:	e7ea      	b.n	800e560 <_svfiprintf_r+0x1b0>
 800e58a:	bf00      	nop
 800e58c:	0800edf0 	.word	0x0800edf0
 800e590:	0800edf6 	.word	0x0800edf6
 800e594:	0800edfa 	.word	0x0800edfa
 800e598:	00000000 	.word	0x00000000
 800e59c:	0800e2fd 	.word	0x0800e2fd

0800e5a0 <_printf_common>:
 800e5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a4:	4691      	mov	r9, r2
 800e5a6:	461f      	mov	r7, r3
 800e5a8:	688a      	ldr	r2, [r1, #8]
 800e5aa:	690b      	ldr	r3, [r1, #16]
 800e5ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	bfb8      	it	lt
 800e5b4:	4613      	movlt	r3, r2
 800e5b6:	f8c9 3000 	str.w	r3, [r9]
 800e5ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e5be:	4606      	mov	r6, r0
 800e5c0:	460c      	mov	r4, r1
 800e5c2:	b112      	cbz	r2, 800e5ca <_printf_common+0x2a>
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	f8c9 3000 	str.w	r3, [r9]
 800e5ca:	6823      	ldr	r3, [r4, #0]
 800e5cc:	0699      	lsls	r1, r3, #26
 800e5ce:	bf42      	ittt	mi
 800e5d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e5d4:	3302      	addmi	r3, #2
 800e5d6:	f8c9 3000 	strmi.w	r3, [r9]
 800e5da:	6825      	ldr	r5, [r4, #0]
 800e5dc:	f015 0506 	ands.w	r5, r5, #6
 800e5e0:	d107      	bne.n	800e5f2 <_printf_common+0x52>
 800e5e2:	f104 0a19 	add.w	sl, r4, #25
 800e5e6:	68e3      	ldr	r3, [r4, #12]
 800e5e8:	f8d9 2000 	ldr.w	r2, [r9]
 800e5ec:	1a9b      	subs	r3, r3, r2
 800e5ee:	42ab      	cmp	r3, r5
 800e5f0:	dc28      	bgt.n	800e644 <_printf_common+0xa4>
 800e5f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e5f6:	6822      	ldr	r2, [r4, #0]
 800e5f8:	3300      	adds	r3, #0
 800e5fa:	bf18      	it	ne
 800e5fc:	2301      	movne	r3, #1
 800e5fe:	0692      	lsls	r2, r2, #26
 800e600:	d42d      	bmi.n	800e65e <_printf_common+0xbe>
 800e602:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e606:	4639      	mov	r1, r7
 800e608:	4630      	mov	r0, r6
 800e60a:	47c0      	blx	r8
 800e60c:	3001      	adds	r0, #1
 800e60e:	d020      	beq.n	800e652 <_printf_common+0xb2>
 800e610:	6823      	ldr	r3, [r4, #0]
 800e612:	68e5      	ldr	r5, [r4, #12]
 800e614:	f8d9 2000 	ldr.w	r2, [r9]
 800e618:	f003 0306 	and.w	r3, r3, #6
 800e61c:	2b04      	cmp	r3, #4
 800e61e:	bf08      	it	eq
 800e620:	1aad      	subeq	r5, r5, r2
 800e622:	68a3      	ldr	r3, [r4, #8]
 800e624:	6922      	ldr	r2, [r4, #16]
 800e626:	bf0c      	ite	eq
 800e628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e62c:	2500      	movne	r5, #0
 800e62e:	4293      	cmp	r3, r2
 800e630:	bfc4      	itt	gt
 800e632:	1a9b      	subgt	r3, r3, r2
 800e634:	18ed      	addgt	r5, r5, r3
 800e636:	f04f 0900 	mov.w	r9, #0
 800e63a:	341a      	adds	r4, #26
 800e63c:	454d      	cmp	r5, r9
 800e63e:	d11a      	bne.n	800e676 <_printf_common+0xd6>
 800e640:	2000      	movs	r0, #0
 800e642:	e008      	b.n	800e656 <_printf_common+0xb6>
 800e644:	2301      	movs	r3, #1
 800e646:	4652      	mov	r2, sl
 800e648:	4639      	mov	r1, r7
 800e64a:	4630      	mov	r0, r6
 800e64c:	47c0      	blx	r8
 800e64e:	3001      	adds	r0, #1
 800e650:	d103      	bne.n	800e65a <_printf_common+0xba>
 800e652:	f04f 30ff 	mov.w	r0, #4294967295
 800e656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e65a:	3501      	adds	r5, #1
 800e65c:	e7c3      	b.n	800e5e6 <_printf_common+0x46>
 800e65e:	18e1      	adds	r1, r4, r3
 800e660:	1c5a      	adds	r2, r3, #1
 800e662:	2030      	movs	r0, #48	; 0x30
 800e664:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e668:	4422      	add	r2, r4
 800e66a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e66e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e672:	3302      	adds	r3, #2
 800e674:	e7c5      	b.n	800e602 <_printf_common+0x62>
 800e676:	2301      	movs	r3, #1
 800e678:	4622      	mov	r2, r4
 800e67a:	4639      	mov	r1, r7
 800e67c:	4630      	mov	r0, r6
 800e67e:	47c0      	blx	r8
 800e680:	3001      	adds	r0, #1
 800e682:	d0e6      	beq.n	800e652 <_printf_common+0xb2>
 800e684:	f109 0901 	add.w	r9, r9, #1
 800e688:	e7d8      	b.n	800e63c <_printf_common+0x9c>
	...

0800e68c <_printf_i>:
 800e68c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e690:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e694:	460c      	mov	r4, r1
 800e696:	7e09      	ldrb	r1, [r1, #24]
 800e698:	b085      	sub	sp, #20
 800e69a:	296e      	cmp	r1, #110	; 0x6e
 800e69c:	4617      	mov	r7, r2
 800e69e:	4606      	mov	r6, r0
 800e6a0:	4698      	mov	r8, r3
 800e6a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e6a4:	f000 80b3 	beq.w	800e80e <_printf_i+0x182>
 800e6a8:	d822      	bhi.n	800e6f0 <_printf_i+0x64>
 800e6aa:	2963      	cmp	r1, #99	; 0x63
 800e6ac:	d036      	beq.n	800e71c <_printf_i+0x90>
 800e6ae:	d80a      	bhi.n	800e6c6 <_printf_i+0x3a>
 800e6b0:	2900      	cmp	r1, #0
 800e6b2:	f000 80b9 	beq.w	800e828 <_printf_i+0x19c>
 800e6b6:	2958      	cmp	r1, #88	; 0x58
 800e6b8:	f000 8083 	beq.w	800e7c2 <_printf_i+0x136>
 800e6bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e6c4:	e032      	b.n	800e72c <_printf_i+0xa0>
 800e6c6:	2964      	cmp	r1, #100	; 0x64
 800e6c8:	d001      	beq.n	800e6ce <_printf_i+0x42>
 800e6ca:	2969      	cmp	r1, #105	; 0x69
 800e6cc:	d1f6      	bne.n	800e6bc <_printf_i+0x30>
 800e6ce:	6820      	ldr	r0, [r4, #0]
 800e6d0:	6813      	ldr	r3, [r2, #0]
 800e6d2:	0605      	lsls	r5, r0, #24
 800e6d4:	f103 0104 	add.w	r1, r3, #4
 800e6d8:	d52a      	bpl.n	800e730 <_printf_i+0xa4>
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	6011      	str	r1, [r2, #0]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	da03      	bge.n	800e6ea <_printf_i+0x5e>
 800e6e2:	222d      	movs	r2, #45	; 0x2d
 800e6e4:	425b      	negs	r3, r3
 800e6e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e6ea:	486f      	ldr	r0, [pc, #444]	; (800e8a8 <_printf_i+0x21c>)
 800e6ec:	220a      	movs	r2, #10
 800e6ee:	e039      	b.n	800e764 <_printf_i+0xd8>
 800e6f0:	2973      	cmp	r1, #115	; 0x73
 800e6f2:	f000 809d 	beq.w	800e830 <_printf_i+0x1a4>
 800e6f6:	d808      	bhi.n	800e70a <_printf_i+0x7e>
 800e6f8:	296f      	cmp	r1, #111	; 0x6f
 800e6fa:	d020      	beq.n	800e73e <_printf_i+0xb2>
 800e6fc:	2970      	cmp	r1, #112	; 0x70
 800e6fe:	d1dd      	bne.n	800e6bc <_printf_i+0x30>
 800e700:	6823      	ldr	r3, [r4, #0]
 800e702:	f043 0320 	orr.w	r3, r3, #32
 800e706:	6023      	str	r3, [r4, #0]
 800e708:	e003      	b.n	800e712 <_printf_i+0x86>
 800e70a:	2975      	cmp	r1, #117	; 0x75
 800e70c:	d017      	beq.n	800e73e <_printf_i+0xb2>
 800e70e:	2978      	cmp	r1, #120	; 0x78
 800e710:	d1d4      	bne.n	800e6bc <_printf_i+0x30>
 800e712:	2378      	movs	r3, #120	; 0x78
 800e714:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e718:	4864      	ldr	r0, [pc, #400]	; (800e8ac <_printf_i+0x220>)
 800e71a:	e055      	b.n	800e7c8 <_printf_i+0x13c>
 800e71c:	6813      	ldr	r3, [r2, #0]
 800e71e:	1d19      	adds	r1, r3, #4
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	6011      	str	r1, [r2, #0]
 800e724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e72c:	2301      	movs	r3, #1
 800e72e:	e08c      	b.n	800e84a <_printf_i+0x1be>
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	6011      	str	r1, [r2, #0]
 800e734:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e738:	bf18      	it	ne
 800e73a:	b21b      	sxthne	r3, r3
 800e73c:	e7cf      	b.n	800e6de <_printf_i+0x52>
 800e73e:	6813      	ldr	r3, [r2, #0]
 800e740:	6825      	ldr	r5, [r4, #0]
 800e742:	1d18      	adds	r0, r3, #4
 800e744:	6010      	str	r0, [r2, #0]
 800e746:	0628      	lsls	r0, r5, #24
 800e748:	d501      	bpl.n	800e74e <_printf_i+0xc2>
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	e002      	b.n	800e754 <_printf_i+0xc8>
 800e74e:	0668      	lsls	r0, r5, #25
 800e750:	d5fb      	bpl.n	800e74a <_printf_i+0xbe>
 800e752:	881b      	ldrh	r3, [r3, #0]
 800e754:	4854      	ldr	r0, [pc, #336]	; (800e8a8 <_printf_i+0x21c>)
 800e756:	296f      	cmp	r1, #111	; 0x6f
 800e758:	bf14      	ite	ne
 800e75a:	220a      	movne	r2, #10
 800e75c:	2208      	moveq	r2, #8
 800e75e:	2100      	movs	r1, #0
 800e760:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e764:	6865      	ldr	r5, [r4, #4]
 800e766:	60a5      	str	r5, [r4, #8]
 800e768:	2d00      	cmp	r5, #0
 800e76a:	f2c0 8095 	blt.w	800e898 <_printf_i+0x20c>
 800e76e:	6821      	ldr	r1, [r4, #0]
 800e770:	f021 0104 	bic.w	r1, r1, #4
 800e774:	6021      	str	r1, [r4, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d13d      	bne.n	800e7f6 <_printf_i+0x16a>
 800e77a:	2d00      	cmp	r5, #0
 800e77c:	f040 808e 	bne.w	800e89c <_printf_i+0x210>
 800e780:	4665      	mov	r5, ip
 800e782:	2a08      	cmp	r2, #8
 800e784:	d10b      	bne.n	800e79e <_printf_i+0x112>
 800e786:	6823      	ldr	r3, [r4, #0]
 800e788:	07db      	lsls	r3, r3, #31
 800e78a:	d508      	bpl.n	800e79e <_printf_i+0x112>
 800e78c:	6923      	ldr	r3, [r4, #16]
 800e78e:	6862      	ldr	r2, [r4, #4]
 800e790:	429a      	cmp	r2, r3
 800e792:	bfde      	ittt	le
 800e794:	2330      	movle	r3, #48	; 0x30
 800e796:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e79a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e79e:	ebac 0305 	sub.w	r3, ip, r5
 800e7a2:	6123      	str	r3, [r4, #16]
 800e7a4:	f8cd 8000 	str.w	r8, [sp]
 800e7a8:	463b      	mov	r3, r7
 800e7aa:	aa03      	add	r2, sp, #12
 800e7ac:	4621      	mov	r1, r4
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	f7ff fef6 	bl	800e5a0 <_printf_common>
 800e7b4:	3001      	adds	r0, #1
 800e7b6:	d14d      	bne.n	800e854 <_printf_i+0x1c8>
 800e7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7bc:	b005      	add	sp, #20
 800e7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7c2:	4839      	ldr	r0, [pc, #228]	; (800e8a8 <_printf_i+0x21c>)
 800e7c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e7c8:	6813      	ldr	r3, [r2, #0]
 800e7ca:	6821      	ldr	r1, [r4, #0]
 800e7cc:	1d1d      	adds	r5, r3, #4
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	6015      	str	r5, [r2, #0]
 800e7d2:	060a      	lsls	r2, r1, #24
 800e7d4:	d50b      	bpl.n	800e7ee <_printf_i+0x162>
 800e7d6:	07ca      	lsls	r2, r1, #31
 800e7d8:	bf44      	itt	mi
 800e7da:	f041 0120 	orrmi.w	r1, r1, #32
 800e7de:	6021      	strmi	r1, [r4, #0]
 800e7e0:	b91b      	cbnz	r3, 800e7ea <_printf_i+0x15e>
 800e7e2:	6822      	ldr	r2, [r4, #0]
 800e7e4:	f022 0220 	bic.w	r2, r2, #32
 800e7e8:	6022      	str	r2, [r4, #0]
 800e7ea:	2210      	movs	r2, #16
 800e7ec:	e7b7      	b.n	800e75e <_printf_i+0xd2>
 800e7ee:	064d      	lsls	r5, r1, #25
 800e7f0:	bf48      	it	mi
 800e7f2:	b29b      	uxthmi	r3, r3
 800e7f4:	e7ef      	b.n	800e7d6 <_printf_i+0x14a>
 800e7f6:	4665      	mov	r5, ip
 800e7f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e7fc:	fb02 3311 	mls	r3, r2, r1, r3
 800e800:	5cc3      	ldrb	r3, [r0, r3]
 800e802:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e806:	460b      	mov	r3, r1
 800e808:	2900      	cmp	r1, #0
 800e80a:	d1f5      	bne.n	800e7f8 <_printf_i+0x16c>
 800e80c:	e7b9      	b.n	800e782 <_printf_i+0xf6>
 800e80e:	6813      	ldr	r3, [r2, #0]
 800e810:	6825      	ldr	r5, [r4, #0]
 800e812:	6961      	ldr	r1, [r4, #20]
 800e814:	1d18      	adds	r0, r3, #4
 800e816:	6010      	str	r0, [r2, #0]
 800e818:	0628      	lsls	r0, r5, #24
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	d501      	bpl.n	800e822 <_printf_i+0x196>
 800e81e:	6019      	str	r1, [r3, #0]
 800e820:	e002      	b.n	800e828 <_printf_i+0x19c>
 800e822:	066a      	lsls	r2, r5, #25
 800e824:	d5fb      	bpl.n	800e81e <_printf_i+0x192>
 800e826:	8019      	strh	r1, [r3, #0]
 800e828:	2300      	movs	r3, #0
 800e82a:	6123      	str	r3, [r4, #16]
 800e82c:	4665      	mov	r5, ip
 800e82e:	e7b9      	b.n	800e7a4 <_printf_i+0x118>
 800e830:	6813      	ldr	r3, [r2, #0]
 800e832:	1d19      	adds	r1, r3, #4
 800e834:	6011      	str	r1, [r2, #0]
 800e836:	681d      	ldr	r5, [r3, #0]
 800e838:	6862      	ldr	r2, [r4, #4]
 800e83a:	2100      	movs	r1, #0
 800e83c:	4628      	mov	r0, r5
 800e83e:	f7f1 fccf 	bl	80001e0 <memchr>
 800e842:	b108      	cbz	r0, 800e848 <_printf_i+0x1bc>
 800e844:	1b40      	subs	r0, r0, r5
 800e846:	6060      	str	r0, [r4, #4]
 800e848:	6863      	ldr	r3, [r4, #4]
 800e84a:	6123      	str	r3, [r4, #16]
 800e84c:	2300      	movs	r3, #0
 800e84e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e852:	e7a7      	b.n	800e7a4 <_printf_i+0x118>
 800e854:	6923      	ldr	r3, [r4, #16]
 800e856:	462a      	mov	r2, r5
 800e858:	4639      	mov	r1, r7
 800e85a:	4630      	mov	r0, r6
 800e85c:	47c0      	blx	r8
 800e85e:	3001      	adds	r0, #1
 800e860:	d0aa      	beq.n	800e7b8 <_printf_i+0x12c>
 800e862:	6823      	ldr	r3, [r4, #0]
 800e864:	079b      	lsls	r3, r3, #30
 800e866:	d413      	bmi.n	800e890 <_printf_i+0x204>
 800e868:	68e0      	ldr	r0, [r4, #12]
 800e86a:	9b03      	ldr	r3, [sp, #12]
 800e86c:	4298      	cmp	r0, r3
 800e86e:	bfb8      	it	lt
 800e870:	4618      	movlt	r0, r3
 800e872:	e7a3      	b.n	800e7bc <_printf_i+0x130>
 800e874:	2301      	movs	r3, #1
 800e876:	464a      	mov	r2, r9
 800e878:	4639      	mov	r1, r7
 800e87a:	4630      	mov	r0, r6
 800e87c:	47c0      	blx	r8
 800e87e:	3001      	adds	r0, #1
 800e880:	d09a      	beq.n	800e7b8 <_printf_i+0x12c>
 800e882:	3501      	adds	r5, #1
 800e884:	68e3      	ldr	r3, [r4, #12]
 800e886:	9a03      	ldr	r2, [sp, #12]
 800e888:	1a9b      	subs	r3, r3, r2
 800e88a:	42ab      	cmp	r3, r5
 800e88c:	dcf2      	bgt.n	800e874 <_printf_i+0x1e8>
 800e88e:	e7eb      	b.n	800e868 <_printf_i+0x1dc>
 800e890:	2500      	movs	r5, #0
 800e892:	f104 0919 	add.w	r9, r4, #25
 800e896:	e7f5      	b.n	800e884 <_printf_i+0x1f8>
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d1ac      	bne.n	800e7f6 <_printf_i+0x16a>
 800e89c:	7803      	ldrb	r3, [r0, #0]
 800e89e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8a6:	e76c      	b.n	800e782 <_printf_i+0xf6>
 800e8a8:	0800ee01 	.word	0x0800ee01
 800e8ac:	0800ee12 	.word	0x0800ee12

0800e8b0 <memcpy>:
 800e8b0:	b510      	push	{r4, lr}
 800e8b2:	1e43      	subs	r3, r0, #1
 800e8b4:	440a      	add	r2, r1
 800e8b6:	4291      	cmp	r1, r2
 800e8b8:	d100      	bne.n	800e8bc <memcpy+0xc>
 800e8ba:	bd10      	pop	{r4, pc}
 800e8bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8c4:	e7f7      	b.n	800e8b6 <memcpy+0x6>

0800e8c6 <memmove>:
 800e8c6:	4288      	cmp	r0, r1
 800e8c8:	b510      	push	{r4, lr}
 800e8ca:	eb01 0302 	add.w	r3, r1, r2
 800e8ce:	d807      	bhi.n	800e8e0 <memmove+0x1a>
 800e8d0:	1e42      	subs	r2, r0, #1
 800e8d2:	4299      	cmp	r1, r3
 800e8d4:	d00a      	beq.n	800e8ec <memmove+0x26>
 800e8d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8da:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e8de:	e7f8      	b.n	800e8d2 <memmove+0xc>
 800e8e0:	4283      	cmp	r3, r0
 800e8e2:	d9f5      	bls.n	800e8d0 <memmove+0xa>
 800e8e4:	1881      	adds	r1, r0, r2
 800e8e6:	1ad2      	subs	r2, r2, r3
 800e8e8:	42d3      	cmn	r3, r2
 800e8ea:	d100      	bne.n	800e8ee <memmove+0x28>
 800e8ec:	bd10      	pop	{r4, pc}
 800e8ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e8f6:	e7f7      	b.n	800e8e8 <memmove+0x22>

0800e8f8 <_free_r>:
 800e8f8:	b538      	push	{r3, r4, r5, lr}
 800e8fa:	4605      	mov	r5, r0
 800e8fc:	2900      	cmp	r1, #0
 800e8fe:	d045      	beq.n	800e98c <_free_r+0x94>
 800e900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e904:	1f0c      	subs	r4, r1, #4
 800e906:	2b00      	cmp	r3, #0
 800e908:	bfb8      	it	lt
 800e90a:	18e4      	addlt	r4, r4, r3
 800e90c:	f000 f8d2 	bl	800eab4 <__malloc_lock>
 800e910:	4a1f      	ldr	r2, [pc, #124]	; (800e990 <_free_r+0x98>)
 800e912:	6813      	ldr	r3, [r2, #0]
 800e914:	4610      	mov	r0, r2
 800e916:	b933      	cbnz	r3, 800e926 <_free_r+0x2e>
 800e918:	6063      	str	r3, [r4, #4]
 800e91a:	6014      	str	r4, [r2, #0]
 800e91c:	4628      	mov	r0, r5
 800e91e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e922:	f000 b8c8 	b.w	800eab6 <__malloc_unlock>
 800e926:	42a3      	cmp	r3, r4
 800e928:	d90c      	bls.n	800e944 <_free_r+0x4c>
 800e92a:	6821      	ldr	r1, [r4, #0]
 800e92c:	1862      	adds	r2, r4, r1
 800e92e:	4293      	cmp	r3, r2
 800e930:	bf04      	itt	eq
 800e932:	681a      	ldreq	r2, [r3, #0]
 800e934:	685b      	ldreq	r3, [r3, #4]
 800e936:	6063      	str	r3, [r4, #4]
 800e938:	bf04      	itt	eq
 800e93a:	1852      	addeq	r2, r2, r1
 800e93c:	6022      	streq	r2, [r4, #0]
 800e93e:	6004      	str	r4, [r0, #0]
 800e940:	e7ec      	b.n	800e91c <_free_r+0x24>
 800e942:	4613      	mov	r3, r2
 800e944:	685a      	ldr	r2, [r3, #4]
 800e946:	b10a      	cbz	r2, 800e94c <_free_r+0x54>
 800e948:	42a2      	cmp	r2, r4
 800e94a:	d9fa      	bls.n	800e942 <_free_r+0x4a>
 800e94c:	6819      	ldr	r1, [r3, #0]
 800e94e:	1858      	adds	r0, r3, r1
 800e950:	42a0      	cmp	r0, r4
 800e952:	d10b      	bne.n	800e96c <_free_r+0x74>
 800e954:	6820      	ldr	r0, [r4, #0]
 800e956:	4401      	add	r1, r0
 800e958:	1858      	adds	r0, r3, r1
 800e95a:	4282      	cmp	r2, r0
 800e95c:	6019      	str	r1, [r3, #0]
 800e95e:	d1dd      	bne.n	800e91c <_free_r+0x24>
 800e960:	6810      	ldr	r0, [r2, #0]
 800e962:	6852      	ldr	r2, [r2, #4]
 800e964:	605a      	str	r2, [r3, #4]
 800e966:	4401      	add	r1, r0
 800e968:	6019      	str	r1, [r3, #0]
 800e96a:	e7d7      	b.n	800e91c <_free_r+0x24>
 800e96c:	d902      	bls.n	800e974 <_free_r+0x7c>
 800e96e:	230c      	movs	r3, #12
 800e970:	602b      	str	r3, [r5, #0]
 800e972:	e7d3      	b.n	800e91c <_free_r+0x24>
 800e974:	6820      	ldr	r0, [r4, #0]
 800e976:	1821      	adds	r1, r4, r0
 800e978:	428a      	cmp	r2, r1
 800e97a:	bf04      	itt	eq
 800e97c:	6811      	ldreq	r1, [r2, #0]
 800e97e:	6852      	ldreq	r2, [r2, #4]
 800e980:	6062      	str	r2, [r4, #4]
 800e982:	bf04      	itt	eq
 800e984:	1809      	addeq	r1, r1, r0
 800e986:	6021      	streq	r1, [r4, #0]
 800e988:	605c      	str	r4, [r3, #4]
 800e98a:	e7c7      	b.n	800e91c <_free_r+0x24>
 800e98c:	bd38      	pop	{r3, r4, r5, pc}
 800e98e:	bf00      	nop
 800e990:	20000750 	.word	0x20000750

0800e994 <_malloc_r>:
 800e994:	b570      	push	{r4, r5, r6, lr}
 800e996:	1ccd      	adds	r5, r1, #3
 800e998:	f025 0503 	bic.w	r5, r5, #3
 800e99c:	3508      	adds	r5, #8
 800e99e:	2d0c      	cmp	r5, #12
 800e9a0:	bf38      	it	cc
 800e9a2:	250c      	movcc	r5, #12
 800e9a4:	2d00      	cmp	r5, #0
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	db01      	blt.n	800e9ae <_malloc_r+0x1a>
 800e9aa:	42a9      	cmp	r1, r5
 800e9ac:	d903      	bls.n	800e9b6 <_malloc_r+0x22>
 800e9ae:	230c      	movs	r3, #12
 800e9b0:	6033      	str	r3, [r6, #0]
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	bd70      	pop	{r4, r5, r6, pc}
 800e9b6:	f000 f87d 	bl	800eab4 <__malloc_lock>
 800e9ba:	4a21      	ldr	r2, [pc, #132]	; (800ea40 <_malloc_r+0xac>)
 800e9bc:	6814      	ldr	r4, [r2, #0]
 800e9be:	4621      	mov	r1, r4
 800e9c0:	b991      	cbnz	r1, 800e9e8 <_malloc_r+0x54>
 800e9c2:	4c20      	ldr	r4, [pc, #128]	; (800ea44 <_malloc_r+0xb0>)
 800e9c4:	6823      	ldr	r3, [r4, #0]
 800e9c6:	b91b      	cbnz	r3, 800e9d0 <_malloc_r+0x3c>
 800e9c8:	4630      	mov	r0, r6
 800e9ca:	f000 f863 	bl	800ea94 <_sbrk_r>
 800e9ce:	6020      	str	r0, [r4, #0]
 800e9d0:	4629      	mov	r1, r5
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	f000 f85e 	bl	800ea94 <_sbrk_r>
 800e9d8:	1c43      	adds	r3, r0, #1
 800e9da:	d124      	bne.n	800ea26 <_malloc_r+0x92>
 800e9dc:	230c      	movs	r3, #12
 800e9de:	6033      	str	r3, [r6, #0]
 800e9e0:	4630      	mov	r0, r6
 800e9e2:	f000 f868 	bl	800eab6 <__malloc_unlock>
 800e9e6:	e7e4      	b.n	800e9b2 <_malloc_r+0x1e>
 800e9e8:	680b      	ldr	r3, [r1, #0]
 800e9ea:	1b5b      	subs	r3, r3, r5
 800e9ec:	d418      	bmi.n	800ea20 <_malloc_r+0x8c>
 800e9ee:	2b0b      	cmp	r3, #11
 800e9f0:	d90f      	bls.n	800ea12 <_malloc_r+0x7e>
 800e9f2:	600b      	str	r3, [r1, #0]
 800e9f4:	50cd      	str	r5, [r1, r3]
 800e9f6:	18cc      	adds	r4, r1, r3
 800e9f8:	4630      	mov	r0, r6
 800e9fa:	f000 f85c 	bl	800eab6 <__malloc_unlock>
 800e9fe:	f104 000b 	add.w	r0, r4, #11
 800ea02:	1d23      	adds	r3, r4, #4
 800ea04:	f020 0007 	bic.w	r0, r0, #7
 800ea08:	1ac3      	subs	r3, r0, r3
 800ea0a:	d0d3      	beq.n	800e9b4 <_malloc_r+0x20>
 800ea0c:	425a      	negs	r2, r3
 800ea0e:	50e2      	str	r2, [r4, r3]
 800ea10:	e7d0      	b.n	800e9b4 <_malloc_r+0x20>
 800ea12:	428c      	cmp	r4, r1
 800ea14:	684b      	ldr	r3, [r1, #4]
 800ea16:	bf16      	itet	ne
 800ea18:	6063      	strne	r3, [r4, #4]
 800ea1a:	6013      	streq	r3, [r2, #0]
 800ea1c:	460c      	movne	r4, r1
 800ea1e:	e7eb      	b.n	800e9f8 <_malloc_r+0x64>
 800ea20:	460c      	mov	r4, r1
 800ea22:	6849      	ldr	r1, [r1, #4]
 800ea24:	e7cc      	b.n	800e9c0 <_malloc_r+0x2c>
 800ea26:	1cc4      	adds	r4, r0, #3
 800ea28:	f024 0403 	bic.w	r4, r4, #3
 800ea2c:	42a0      	cmp	r0, r4
 800ea2e:	d005      	beq.n	800ea3c <_malloc_r+0xa8>
 800ea30:	1a21      	subs	r1, r4, r0
 800ea32:	4630      	mov	r0, r6
 800ea34:	f000 f82e 	bl	800ea94 <_sbrk_r>
 800ea38:	3001      	adds	r0, #1
 800ea3a:	d0cf      	beq.n	800e9dc <_malloc_r+0x48>
 800ea3c:	6025      	str	r5, [r4, #0]
 800ea3e:	e7db      	b.n	800e9f8 <_malloc_r+0x64>
 800ea40:	20000750 	.word	0x20000750
 800ea44:	20000754 	.word	0x20000754

0800ea48 <_realloc_r>:
 800ea48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea4a:	4607      	mov	r7, r0
 800ea4c:	4614      	mov	r4, r2
 800ea4e:	460e      	mov	r6, r1
 800ea50:	b921      	cbnz	r1, 800ea5c <_realloc_r+0x14>
 800ea52:	4611      	mov	r1, r2
 800ea54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ea58:	f7ff bf9c 	b.w	800e994 <_malloc_r>
 800ea5c:	b922      	cbnz	r2, 800ea68 <_realloc_r+0x20>
 800ea5e:	f7ff ff4b 	bl	800e8f8 <_free_r>
 800ea62:	4625      	mov	r5, r4
 800ea64:	4628      	mov	r0, r5
 800ea66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea68:	f000 f826 	bl	800eab8 <_malloc_usable_size_r>
 800ea6c:	42a0      	cmp	r0, r4
 800ea6e:	d20f      	bcs.n	800ea90 <_realloc_r+0x48>
 800ea70:	4621      	mov	r1, r4
 800ea72:	4638      	mov	r0, r7
 800ea74:	f7ff ff8e 	bl	800e994 <_malloc_r>
 800ea78:	4605      	mov	r5, r0
 800ea7a:	2800      	cmp	r0, #0
 800ea7c:	d0f2      	beq.n	800ea64 <_realloc_r+0x1c>
 800ea7e:	4631      	mov	r1, r6
 800ea80:	4622      	mov	r2, r4
 800ea82:	f7ff ff15 	bl	800e8b0 <memcpy>
 800ea86:	4631      	mov	r1, r6
 800ea88:	4638      	mov	r0, r7
 800ea8a:	f7ff ff35 	bl	800e8f8 <_free_r>
 800ea8e:	e7e9      	b.n	800ea64 <_realloc_r+0x1c>
 800ea90:	4635      	mov	r5, r6
 800ea92:	e7e7      	b.n	800ea64 <_realloc_r+0x1c>

0800ea94 <_sbrk_r>:
 800ea94:	b538      	push	{r3, r4, r5, lr}
 800ea96:	4c06      	ldr	r4, [pc, #24]	; (800eab0 <_sbrk_r+0x1c>)
 800ea98:	2300      	movs	r3, #0
 800ea9a:	4605      	mov	r5, r0
 800ea9c:	4608      	mov	r0, r1
 800ea9e:	6023      	str	r3, [r4, #0]
 800eaa0:	f7f5 f858 	bl	8003b54 <_sbrk>
 800eaa4:	1c43      	adds	r3, r0, #1
 800eaa6:	d102      	bne.n	800eaae <_sbrk_r+0x1a>
 800eaa8:	6823      	ldr	r3, [r4, #0]
 800eaaa:	b103      	cbz	r3, 800eaae <_sbrk_r+0x1a>
 800eaac:	602b      	str	r3, [r5, #0]
 800eaae:	bd38      	pop	{r3, r4, r5, pc}
 800eab0:	20000c70 	.word	0x20000c70

0800eab4 <__malloc_lock>:
 800eab4:	4770      	bx	lr

0800eab6 <__malloc_unlock>:
 800eab6:	4770      	bx	lr

0800eab8 <_malloc_usable_size_r>:
 800eab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eabc:	1f18      	subs	r0, r3, #4
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	bfbc      	itt	lt
 800eac2:	580b      	ldrlt	r3, [r1, r0]
 800eac4:	18c0      	addlt	r0, r0, r3
 800eac6:	4770      	bx	lr

0800eac8 <_init>:
 800eac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaca:	bf00      	nop
 800eacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eace:	bc08      	pop	{r3}
 800ead0:	469e      	mov	lr, r3
 800ead2:	4770      	bx	lr

0800ead4 <_fini>:
 800ead4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ead6:	bf00      	nop
 800ead8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eada:	bc08      	pop	{r3}
 800eadc:	469e      	mov	lr, r3
 800eade:	4770      	bx	lr
